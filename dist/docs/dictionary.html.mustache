<!DOCTYPE html>
<title>
      NetLogo {{version}} User Manual: NetLogo Dictionary
    </title>
    <link rel="stylesheet" href="netlogo.css" type="text/css">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <style type="text/css">
    p  { margin-left: 1.5em ; }
    h3 { font-size: 115% ; }
    h4 { font-size: 100% ; margin-left: 1.5em ; background: white ; }
    </style>
    <h1>
      NetLogo Dictionary
    </h1>
    {{> versionTag.html }}
    <div class="centertext">
      <div class="block">
        <div class="smallfont centertext tocborder inlineblock">
          Alphabetical:
          <span class="bold">
            <a href="#A">A</a>
            <a href="#B">B</a>
            <a href="#C">C</a>
            <a href="#D">D</a>
            <a href="#E">E</a>
            <a href="#F">F</a>
            <a href="#G">G</a>
            <a href="#H">H</a>
            <a href="#I">I</a>
            <a href="#J">J</a>
            <!--<a href="#K">K</a>-->
            <a href="#L">L</a>
            <a href="#M">M</a>
            <a href="#N">N</a>
            <a href="#O">O</a>
            <a href="#P">P</a>
            <!--<a href="#Q">Q</a>-->
            <a href="#R">R</a>
            <a href="#S">S</a>
            <a href="#T">T</a>
            <a href="#U">U</a>
            <a href="#V">V</a>
            <a href="#W">W</a>
            <a href="#X">X</a>
            <a href="#Y">Y</a>
            <!--<a href="#Z">Z</a>-->
            <a href="#ops">?</a>
          </span>
        </div>
      </div>
      <div class="block">
        <div class="smallfont centertext tocborder inlineblock">
          Categories: <a href="#turtlegroup">Turtle</a> -
          <a href="#patchgroup">Patch</a> - <a href="#agentsetgroup">Agentset</a> - <a href="#colorgroup">Color</a>
          - <a href="#taskgroup">Task</a> - <a href="#controlgroup">Control/Logic</a> - <a href="#worldgroup">World</a> - <a href="#perspectivegroup">Perspective</a>
          <br>
          <a href="#iogroup">Input/Output</a> - <a href="#fileiogroup">File</a> - <a href="#listsgroup">List</a> -
          <a href="#stringgroup">String</a> - <a href="#mathematicalgroup">Math</a> - <a href="#plottinggroup">Plotting</a> - <a href="#linkgroup">Links</a>
          - <a href="#moviegroup">Movie</a> - <a href="#systemgroup">System</a> - <a href="#hubnetgroup">HubNet</a>
        </div>
      </div>
      <div class="block">
        <div class="smallfont centertext tocborder inlineblock">
          Special: <a href="#builtinvariables">Variables</a> - <a href="#Keywords">Keywords</a> - <a href="#Constants">Constants</a>
        </div>
      </div>
    </div>
<!--
NOTE!
</div>
The reason the h2 headers have an extra &nbsp; in them, like this:
<h2><a name="A">A&nbsp;</a></h2>
instead of just:
<h2><a name="A">A</a></h2>
is to work around an extremely obscure bug in Internet Explorer
where without the extra stuff, some of the links from primitives.html
don't always work on every computer.  (On one computer it was just
the "I" link that didn't work; on other computers it was more.)
Go figure! - ST 12/2/04
-->
    <h2>
      Categories
    </h2>
    <p>
      This is an approximate grouping. Remember that a turtle-related
      primitive might still be used by patches or the observer, and vice
      versa. To see which agents (turtles, patches, links, observer) can
      actually run a primitive, consult its dictionary entry.
      <!-- ======================================== -->
    <h3>
      Turtle-related
    </h3>
    <p id="turtlegroup">
      <a href="#back">back</a> (<a href="#back">bk</a>)
      <a href="#turtles-at"><i>&lt;breeds&gt;</i>-at</a>
      <a href="#turtles-here"><i>&lt;breeds&gt;</i>-here</a>
      <a href="#turtles-on"><i>&lt;breeds&gt;</i>-on</a>
      <a href="#can-move">can-move?</a>
      <a href="#clear-turtles">clear-turtles</a> (<a href="#clear-turtles">ct</a>)
      <a href="#create-turtles">create-<i>&lt;breeds&gt;</i></a>
      <a href="#create-ordered-turtles">create-ordered-<i>&lt;breeds&gt;</i></a>
      <a href="#create-ordered-turtles">create-ordered-turtles</a> (<a href="#create-ordered-turtles">cro</a>)
      <a href="#create-turtles">create-turtles</a> (<a href="#create-turtles">crt</a>)
      <a href="#die">die</a>
      <a href="#distance">distance</a>
      <a href="#distancexy">distancexy</a>
      <a href="#downhill">downhill</a>
      <a href="#downhill">downhill4</a>
      <a href="#dxy">dx</a>
      <a href="#dxy">dy</a>
      <a href="#face">face</a>
      <a href="#facexy">facexy</a>
      <a href="#forward">forward</a> (<a href="#forward">fd</a>)
      <a href="#hatch">hatch</a>
      <a href="#hatch">hatch-<i>&lt;breeds&gt;</i></a>
      <a href="#hide-turtle">hide-turtle</a> (<a href="#hide-turtle">ht</a>)
      <a href="#home">home</a>
      <a href="#inspect">inspect</a>
      <a href="#is-of-type">is-<i>&lt;breed&gt;</i>?</a>
      <a href="#is-of-type">is-turtle?</a>
      <a href="#jump">jump</a>
      <a href="#layout-circle">layout-circle</a>
      <a href="#left">left</a> (<a href="#left">lt</a>)
      <a href="#move-to">move-to</a>
      <a href="#myself">myself</a>
      <a href="#nobody">nobody</a>
      <a href="#no-turtles">no-turtles</a>
      <a href="#of">of</a>
      <a href="#other">other</a>
      <a href="#patch-ahead">patch-ahead</a>
      <a href="#patch-at">patch-at</a>
      <a href="#patch-at-heading-and-distance">patch-at-heading-and-distance</a>
      <a href="#patch-here">patch-here</a>
      <a href="#patch-lr-and-ahead">patch-left-and-ahead</a>
      <a href="#patch-lr-and-ahead">patch-right-and-ahead</a>
      <a href="#pen-switch-status">pen-down</a>  (<a href="#pen-switch-status">pd</a>)
      <a href="#pen-switch-status">pen-erase</a> (<a href="#pen-switch-status">pe</a>)
      <a href="#pen-switch-status">pen-up</a>    (<a href="#pen-switch-status">pu</a>)
      <a href="#random-cor">random-xcor</a>
      <a href="#random-cor">random-ycor</a>
      <a href="#right">right</a> (<a href="#right">rt</a>)
      <a href="#self">self</a>
      <a href="#set-default-shape">set-default-shape</a>
      <a href="#set-line-thickness">__set-line-thickness</a>
      <a href="#setxy">setxy</a>
      <a href="#shapes">shapes</a>
      <a href="#show-turtle">show-turtle</a> (<a href="#show-turtle">st</a>)
      <a href="#sprout">sprout</a>
      <a href="#sprout">sprout-<i>&lt;breeds&gt;</i></a>
      <a href="#stamp">stamp</a>
      <a href="#stamperase">stamp-erase</a>
      <a href="#stop-inspecting">stop-inspecting</a>
      <a href="#subject">subject</a>
      <a href="#subtract-headings">subtract-headings</a>
      <a href="#tie">tie</a>
      <a href="#towards">towards</a>
      <a href="#towardsxy">towardsxy</a>
      <a href="#turtle">turtle</a>
      <a href="#turtle-set">turtle-set</a>
      <a href="#turtles">turtles</a>
      <a href="#turtles-at">turtles-at</a>
      <a href="#turtles-here">turtles-here</a>
      <a href="#turtles-on">turtles-on</a>
      <a href="#turtles-own">turtles-own</a>
      <a href="#untie">untie</a>
      <a href="#uphill">uphill</a>
      <a href="#uphill">uphill4</a>
      <!-- ======================================== -->
    <h3>
      Patch-related
    </h3>
    <p id="patchgroup">
      <a href="#clear-patches">clear-patches</a> (<a href="#clear-patches">cp</a>)
      <a href="#diffuse">diffuse</a>
      <a href="#diffuse4">diffuse4</a>
      <a href="#distance">distance</a>
      <a href="#distancexy">distancexy</a>
      <a href="#import-pcolors">import-pcolors</a>
      <a href="#import-pcolors-rgb">import-pcolors-rgb</a>
      <a href="#inspect">inspect</a>
      <a href="#is-of-type">is-patch?</a>
      <a href="#myself">myself</a>
      <a href="#neighbors">neighbors</a>
      <a href="#neighbors">neighbors4</a>
      <a href="#nobody">nobody</a>
      <a href="#no-patches">no-patches</a>
      <a href="#of">of</a>
      <a href="#other">other</a>
      <a href="#patch">patch</a>
      <a href="#patch-at">patch-at</a>
      <a href="#patch-ahead">patch-ahead</a>
      <a href="#patch-at-heading-and-distance">patch-at-heading-and-distance</a>
      <a href="#patch-here">patch-here</a>
      <a href="#patch-lr-and-ahead">patch-left-and-ahead</a>
      <a href="#patch-lr-and-ahead">patch-right-and-ahead</a>
      <a href="#patch-set">patch-set</a>
      <a href="#patches">patches</a>
      <a href="#patches-own">patches-own</a>
      <a href="#random-pcor">random-pxcor</a>
      <a href="#random-pcor">random-pycor</a>
      <a href="#self">self</a>
      <a href="#sprout">sprout</a>
      <a href="#sprout">sprout-<i>&lt;breeds&gt;</i></a>
      <a href="#stop-inspecting">stop-inspecting</a>
      <a href="#subject">subject</a>
      <a href="#turtles-here">turtles-here</a>
      <!-- ======================================== -->
    <h3>
      <a>Agentset</a>
    </h3>
    <p id="agentsetgroup">
      <a href="#all">all?</a>
      <a href="#any">any?</a>
      <a href="#ask">ask</a>
      <a href="#ask-concurrent">ask-concurrent</a>
      <a href="#at-points">at-points</a>
      <a href="#turtles-at"><i>&lt;breeds&gt;</i>-at</a>
      <a href="#turtles-here"><i>&lt;breeds&gt;</i>-here</a>
      <a href="#turtles-on"><i>&lt;breeds&gt;</i>-on</a>
      <a href="#count">count</a>
      <a href="#in-cone">in-cone</a>
      <a href="#in-radius">in-radius</a>
      <a href="#is-of-type">is-agent?</a>
      <a href="#is-of-type">is-agentset?</a>
      <a href="#is-of-type">is-patch-set?</a>
      <a href="#is-of-type">is-turtle-set?</a>
      <a href="#link-set">link-set</a>
      <a href="#max-n-of">max-n-of</a>
      <a href="#max-one-of">max-one-of</a>
      <a href="#member">member?</a>
      <a href="#min-n-of">min-n-of</a>
      <a href="#min-one-of">min-one-of</a>
      <a href="#n-of">n-of</a>
      <a href="#neighbors">neighbors</a>
      <a href="#neighbors">neighbors4</a>
      <a href="#no-links">no-links</a>
      <a href="#no-patches">no-patches</a>
      <a href="#no-turtles">no-turtles</a>
      <a href="#of">of</a>
      <a href="#one-of">one-of</a>
      <a href="#other">other</a>
      <a href="#patch-set">patch-set</a>
      <a href="#patches">patches</a>
      <a href="#sort">sort</a>
      <a href="#sort-by">sort-by</a>
      <a href="#sort-on">sort-on</a>
      <a href="#turtle-set">turtle-set</a>
      <a href="#turtles">turtles</a>
      <a href="#turtles-at">turtles-at</a>
      <a href="#turtles-here">turtles-here</a>
      <a href="#turtles-on">turtles-on</a>
      <a href="#with">with</a>
      <a href="#with-max">with-max</a>
      <a href="#with-min">with-min</a>
      <!-- ======================================== -->
    <h3>
      Color
    </h3>
    <p id="colorgroup">
      <a href="#approximate-hsb">approximate-hsb</a>
      <a href="#approximate-rgb">approximate-rgb</a>
      <a href="#base-colors">base-colors</a>
      <a href="#color">color</a>
      <a href="#extract-hsb">extract-hsb</a>
      <a href="#extract-rgb">extract-rgb</a>
      <a href="#hsb">hsb</a>
      <a href="#import-pcolors">import-pcolors</a>
      <a href="#import-pcolors-rgb">import-pcolors-rgb</a>
      <a href="#pcolor">pcolor</a>
      <a href="#rgb">rgb</a>
      <a href="#scale-color">scale-color</a>
      <a href="#shade-of">shade-of?</a>
      <a href="#wrap-color">wrap-color</a>
      <!-- ======================================== -->
    <h3>
      Control flow and logic
    </h3>
    <p id="controlgroup">
      <a href="#and">and</a>
      <a href="#ask">ask</a>
      <a href="#ask-concurrent">ask-concurrent</a>
      <a href="#carefully">carefully</a>
      <a href="#end">end</a>
      <a href="#error">error</a>
      <a href="#error-message">error-message</a>
      <a href="#every">every</a>
      <a href="#if">if</a>
      <a href="#ifelse">ifelse</a>
      <a href="#ifelse-value">ifelse-value</a>
      <a href="#let">let</a>
      <a href="#loop">loop</a>
      <a href="#not">not</a>
      <a href="#or">or</a>
      <a href="#repeat">repeat</a>
      <a href="#report">report</a>
      <a href="#run">run</a>
      <a href="#run">runresult</a>
      <a href="#semicolon">; (semicolon)</a>
      <a href="#set">set</a>
      <a href="#stop">stop</a>
      <a href="#startup">startup</a>
      <a href="#to">to</a>
      <a href="#to-report">to-report</a>
      <a href="#wait">wait</a>
      <a href="#while">while</a>
      <a href="#with-local-randomness">with-local-randomness</a>
      <a href="#without-interruption">without-interruption</a>
      <a href="#xor">xor</a>
      <!-- ======================================== -->
    <h3>
      Task
    </h3>
    <p id="taskgroup">
      <a href="#filter">filter</a>
      <a href="#foreach">foreach</a>
      <a href="#is-of-type">is-command-task?</a>
      <a href="#is-of-type">is-reporter-task?</a>
      <a href="#map">map</a>
      <a href="#n-values">n-values</a>
      <a href="#reduce">reduce</a>
      <a href="#run">run</a>
      <a href="#run">runresult</a>
      <a href="#sort-by">sort-by</a>
      <a href="#task">task</a>
      <!-- ======================================== -->
    <h3>
      World
    </h3>
    <p id="worldgroup">
      <a href="#clear-all">clear-all</a> (<a href="#clear-all">ca</a>)
      <a href="#clear-drawing">clear-drawing</a> (<a href="#clear-drawing">cd</a>)
      <a href="#clear-patches">clear-patches</a> (<a href="#clear-patches">cp</a>)
      <a href="#clear-ticks">clear-ticks</a>
      <a href="#clear-turtles">clear-turtles</a> (<a href="#clear-turtles">ct</a>)
      <a href="#display">display</a>
      <a href="#import-drawing">import-drawing</a>
      <a href="#import-pcolors">import-pcolors</a>
      <a href="#import-pcolors-rgb">import-pcolors-rgb</a>
      <a href="#no-display">no-display</a>
      <a href="#max-pcor">max-pxcor</a>
      <a href="#max-pcor">max-pycor</a>
      <a href="#min-pcor">min-pxcor</a>
      <a href="#min-pcor">min-pycor</a>
      <a href="#patch-size">patch-size</a>
      <a href="#reset-ticks">reset-ticks</a>
      <a href="#resize-world">resize-world</a>
      <a href="#set-patch-size">set-patch-size</a>
      <a href="#stop-inspecting-dead-agents">stop-inspecting-dead-agents</a>
      <a href="#tick">tick</a>
      <a href="#tick-advance">tick-advance</a>
      <a href="#ticks">ticks</a>
      <a href="#world-dim">world-width</a>
      <a href="#world-dim">world-height</a>
      <!-- ======================================== -->
    <h3>
      Perspective
    </h3>
    <p id="perspectivegroup">
      <a href="#follow">follow</a>
      <a href="#follow-me">follow-me</a>
      <a href="#reset-perspective">reset-perspective</a> (<a href="#reset-perspective">rp</a>)
      <a href="#ride">ride</a>
      <a href="#ride-me">ride-me</a>
      <a href="#subject">subject</a>
      <a href="#watch">watch</a>
      <a href="#watch-me">watch-me</a>
      <!-- ======================================== -->
    <h3>
      <a>HubNet</a>
    </h3>
    <p id="hubnetgroup">
      <a href="#hubnet-broadcast">hubnet-broadcast</a>
      <a href="#hubnet-broadcast-clear-output">hubnet-broadcast-clear-output</a>
      <a href="#hubnet-broadcast-message">hubnet-broadcast-message</a>
      <a href="#hubnet-clear-override">hubnet-clear-override</a>
      <a href="#hubnet-clear-override">hubnet-clear-overrides</a>
      <a href="#hubnet-clients-list">hubnet-clients-list</a>
      <a href="#hubnet-enter-message">hubnet-enter-message?</a>
      <a href="#hubnet-exit-message">hubnet-exit-message?</a>
      <a href="#hubnet-kick-all-clients">hubnet-kick-all-clients</a>
      <a href="#hubnet-kick-client">hubnet-kick-client</a>
      <a href="#hubnet-fetch-message">hubnet-fetch-message</a>
      <a href="#hubnet-message">hubnet-message</a>
      <a href="#hubnet-message-source">hubnet-message-source</a>
      <a href="#hubnet-message-tag">hubnet-message-tag</a>
      <a href="#hubnet-message-waiting">hubnet-message-waiting?</a>
      <a href="#hubnet-reset">hubnet-reset</a>
      <a href="#hubnet-reset-perspective">hubnet-reset-perspective</a>
      <a href="#hubnet-send">hubnet-send</a>
      <a href="#hubnet-send-clear-output">hubnet-send-clear-output</a>
      <a href="#hubnet-send-follow">hubnet-send-follow</a>
      <a href="#hubnet-send-message">hubnet-send-message</a>
      <a href="#hubnet-send-override">hubnet-send-override</a>
      <a href="#hubnet-send-watch">hubnet-send-watch</a>
      <a href="#hubnet-set-client-interface">hubnet-set-client-interface</a>
      <!-- ======================================== -->
    <h3>
      Input/output
    </h3>
    <p id="iogroup">
      <a href="#beep">beep</a>
      <a href="#clear-output">clear-output</a>
      <a href="#date-and-time">date-and-time</a>
      <a href="#export-cmds">export-view</a>
      <a href="#export-cmds">export-interface</a>
      <a href="#export-cmds">export-output</a>
      <a href="#export-cmds">export-plot</a>
      <a href="#export-cmds">export-all-plots</a>
      <a href="#export-cmds">export-world</a>
      <a href="#import-drawing">import-drawing</a>
      <a href="#import-pcolors">import-pcolors</a>
      <a href="#import-pcolors-rgb">import-pcolors-rgb</a>
      <a href="#import-world">import-world</a>
      <a href="#mouse-down">mouse-down?</a>
      <a href="#mouse-inside">mouse-inside?</a>
      <a href="#mouse-cor">mouse-xcor</a>
      <a href="#mouse-cor">mouse-ycor</a>
      <a href="#output-cmds">output-print</a>
      <a href="#output-cmds">output-show</a>
      <a href="#output-cmds">output-type</a>
      <a href="#output-cmds">output-write</a>
      <a href="#print">print</a>
      <a href="#read-from-string">read-from-string</a>
      <a href="#reset-timer">reset-timer</a>
      <a href="#set-current-directory">set-current-directory</a>
      <a href="#show">show</a>
      <a href="#timer">timer</a>
      <a href="#type">type</a>
      <a href="#user-directory">user-directory</a>
      <a href="#user-file">user-file</a>
      <a href="#user-new-file">user-new-file</a>
      <a href="#user-input">user-input</a>
      <a href="#user-message">user-message</a>
      <a href="#user-one-of">user-one-of</a>
      <a href="#user-yes-or-no">user-yes-or-no?</a>
      <a href="#write">write</a>
      <!-- ======================================== -->
    <h3>
      File
    </h3>
    <p id="fileiogroup">
      <a href="#file-at-end">file-at-end?</a>
      <a href="#file-close">file-close</a>
      <a href="#file-close-all">file-close-all</a>
      <a href="#file-delete">file-delete</a>
      <a href="#file-exists">file-exists?</a>
      <a href="#file-flush">file-flush</a>
      <a href="#file-open">file-open</a>
      <a href="#file-print">file-print</a>
      <a href="#file-read">file-read</a>
      <a href="#file-read-characters">file-read-characters</a>
      <a href="#file-read-line">file-read-line</a>
      <a href="#file-show">file-show</a>
      <a href="#file-type">file-type</a>
      <a href="#file-write">file-write</a>
      <a href="#user-directory">user-directory</a>
      <a href="#user-file">user-file</a>
      <a href="#user-new-file">user-new-file</a>
      <!-- ======================================== -->
    <h3>
      List
    </h3>
    <p id="listsgroup">
      <a href="#but-first-and-last">but-first</a>
      <a href="#but-first-and-last">but-last</a>
      <a href="#empty">empty?</a>
      <a href="#filter">filter</a>
      <a href="#first">first</a>
      <a href="#foreach">foreach</a>
      <a href="#fput">fput</a>
      <a href="#histogram">histogram</a>
      <a href="#is-of-type">is-list?</a>
      <a href="#item">item</a>
      <a href="#last">last</a>
      <a href="#length">length</a>
      <a href="#list">list</a>
      <a href="#lput">lput</a>
      <a href="#map">map</a>
      <a href="#member">member?</a>
      <a href="#modes">modes</a>
      <a href="#n-of">n-of</a>
      <a href="#n-values">n-values</a>
      <a href="#of">of</a>
      <a href="#position">position</a>
      <a href="#one-of">one-of</a>
      <a href="#reduce">reduce</a>
      <a href="#remove">remove</a>
      <a href="#remove-duplicates">remove-duplicates</a>
      <a href="#remove-item">remove-item</a>
      <a href="#replace-item">replace-item</a>
      <a href="#reverse">reverse</a>
      <a href="#sentence">sentence</a>
      <a href="#shuffle">shuffle</a>
      <a href="#sort">sort</a>
      <a href="#sort-by">sort-by</a>
      <a href="#sort-on">sort-on</a>
      <a href="#subliststring">sublist</a>
      <!-- ======================================== -->
    <h3>
      String
    </h3>
    <p id="stringgroup">
      <a href="#Symbols">Operators (&lt;, &gt;, =, !=, &lt;=, &gt;=)</a>
      <a href="#but-first-and-last">but-first</a>
      <a href="#but-first-and-last">but-last</a>
      <a href="#empty">empty?</a>
      <a href="#first">first</a>
      <a href="#is-of-type">is-string?</a>
      <a href="#item">item</a>
      <a href="#last">last</a>
      <a href="#length">length</a>
      <a href="#member">member?</a>
      <a href="#position">position</a>
      <a href="#remove">remove</a>
      <a href="#remove-item">remove-item</a>
      <a href="#read-from-string">read-from-string</a>
      <a href="#replace-item">replace-item</a>
      <a href="#reverse">reverse</a>
      <a href="#subliststring">substring</a>
      <a href="#word">word</a>
      <!-- ======================================== -->
    <h3>
      Mathematical
    </h3>
    <p id="mathematicalgroup">
      <a href="#Symbols">Arithmetic Operators (+, *, -, /, ^, &lt;, &gt;, =, !=, &lt;=, &gt;=)</a>
      <a href="#abs">abs</a>
      <a href="#acos">acos</a>
      <a href="#asin">asin</a>
      <a href="#atan">atan</a>
      <a href="#ceiling">ceiling</a>
      <a href="#cos">cos</a>
      <a href="#num-e">e</a>
      <a href="#exp">exp</a>
      <a href="#floor">floor</a>
      <a href="#int">int</a>
      <a href="#is-of-type">is-number?</a>
      <a href="#ln">ln</a>
      <a href="#log">log</a>
      <a href="#max">max</a>
      <a href="#mean">mean</a>
      <a href="#median">median</a>
      <a href="#min">min</a>
      <a href="#mod">mod</a>
      <a href="#modes">modes</a>
      <a href="#new-seed">new-seed</a>
      <a href="#pi">pi</a>
      <a href="#precision">precision</a>
      <a href="#random">random</a>
      <a href="#random-reporters">random-exponential</a>
      <a href="#random-float">random-float</a>
      <a href="#random-reporters">random-gamma</a>
      <a href="#random-reporters">random-normal</a>
      <a href="#random-reporters">random-poisson</a>
      <a href="#random-seed">random-seed</a>
      <a href="#remainder">remainder</a>
      <a href="#round">round</a>
      <a href="#sin">sin</a>
      <a href="#sqrt">sqrt</a>
      <a href="#standard-deviation">standard-deviation</a>
      <a href="#subtract-headings">subtract-headings</a>
      <a href="#sum">sum</a>
      <a href="#tan">tan</a>
      <a href="#variance">variance</a>
      <!-- ======================================== -->
    <h3>
      Plotting
    </h3>
    <p id="plottinggroup">
      <a href="#autoplot">autoplot?</a>
      <a href="#auto-plot-status">auto-plot-off</a>
      <a href="#auto-plot-status">auto-plot-on</a>
      <a href="#clear-all-plots">clear-all-plots</a>
      <a href="#clear-plot">clear-plot</a>
      <a href="#create-temporary-plot-pen">create-temporary-plot-pen</a>
      <a href="#export-cmds">export-plot</a>
      <a href="#export-cmds">export-all-plots</a>
      <a href="#histogram">histogram</a>
      <a href="#plot">plot</a>
      <a href="#plot-name">plot-name</a>
      <a href="#plot-pen-exists">plot-pen-exists?</a>
      <a href="#plot-pen-switch-status">plot-pen-down</a>
      <a href="#plot-pen-reset">plot-pen-reset</a>
      <a href="#plot-pen-switch-status">plot-pen-up</a>
      <a href="#plot-cor-max-or-min">plot-x-max</a>
      <a href="#plot-cor-max-or-min">plot-x-min</a>
      <a href="#plot-cor-max-or-min">plot-y-max</a>
      <a href="#plot-cor-max-or-min">plot-y-min</a>
      <a href="#plotxy">plotxy</a>
      <a href="#set-current-plot">set-current-plot</a>
      <a href="#set-current-plot-pen">set-current-plot-pen</a>
      <a href="#set-histogram-num-bars">set-histogram-num-bars</a>
      <a href="#set-plot-pen-color">set-plot-pen-color</a>
      <a href="#set-plot-pen-interval">set-plot-pen-interval</a>
      <a href="#set-plot-pen-mode">set-plot-pen-mode</a>
      <a href="#set-plot--range">set-plot-x-range</a>
      <a href="#set-plot--range">set-plot-y-range</a>
      <a href="#setup-plots">setup-plots</a>
      <a href="#update-plots">update-plots</a>
      <!-- ======================================== -->
    <h3>
      Links
    </h3>
    <p id="linkgroup">
      <a href="#both-ends">both-ends</a>
      <a href="#clear-links">clear-links</a>
      <a href="#create-link">create-&lt;breed&gt;-from</a>
      <a href="#create-link">create-&lt;breeds&gt;-from</a>
      <a href="#create-link">create-&lt;breed&gt;-to</a>
      <a href="#create-link">create-&lt;breeds&gt;-to</a>
      <a href="#create-link">create-&lt;breed&gt;-with</a>
      <a href="#create-link">create-&lt;breeds&gt;-with</a>
      <a href="#create-link">create-link-from</a>
      <a href="#create-link">create-links-from</a>
      <a href="#create-link">create-link-to</a>
      <a href="#create-link">create-links-to</a>
      <a href="#create-link">create-link-with</a>
      <a href="#create-link">create-links-with</a>
      <a href="#die">die</a>
      <a href="#hide-link">hide-link</a>
      <a href="#in-link-neighbor">in-&lt;breed&gt;-neighbor?</a>
      <a href="#in-link-neighbors">in-&lt;breed&gt;-neighbors</a>
      <a href="#in-link-from">in-&lt;breed&gt;-from</a>
      <a href="#in-link-neighbor">in-link-neighbor?</a>
      <a href="#in-link-neighbors">in-link-neighbors</a>
      <a href="#in-link-from">in-link-from</a>
      <a href="#is-of-type">is-directed-link?</a>
      <a href="#is-of-type">is-link?</a>
      <a href="#is-of-type">is-link-set?</a>
      <a href="#is-of-type">is-undirected-link?</a>
      <a href="#layout-radial">layout-radial</a>
      <a href="#layout-spring">layout-spring</a>
      <a href="#layout-tutte">layout-tutte</a>
      <a href="#link-neighbor">&lt;breed&gt;-neighbor?</a>
      <a href="#link-neighbors">&lt;breed&gt;-neighbors</a>
      <a href="#link-with">&lt;breed&gt;-with</a>
      <a href="#link-heading">link-heading</a>
      <a href="#link-length">link-length</a>
      <a href="#link-neighbor">link-neighbor?</a>
      <a href="#link">link</a>
      <a href="#links">links</a>
      <a href="#links-own">links-own</a>
      <a href="#links-own">&lt;link-breeds&gt;-own</a>
      <a href="#link-neighbors">link-neighbors</a>
      <a href="#link-with">link-with</a>
      <a href="#my-links">my-&lt;breeds&gt;</a>
      <a href="#my-in-links">my-in-&lt;breeds&gt;</a>
      <a href="#my-in-links">my-in-links</a>
      <a href="#my-links">my-links</a>
      <a href="#my-out-links">my-out-&lt;breeds&gt;</a>
      <a href="#my-out-links">my-out-links</a>
      <a href="#no-links">no-links</a>
      <a href="#other-end">other-end</a>
      <a href="#out-link-neighbor">out-&lt;breed&gt;-neighbor?</a>
      <a href="#out-link-neighbors">out-&lt;breed&gt;-neighbors</a>
      <a href="#out-link-to">out-&lt;breed&gt;-to</a>
      <a href="#out-link-neighbor">out-link-neighbor?</a>
      <a href="#out-link-neighbors">out-link-neighbors</a>
      <a href="#out-link-to">out-link-to</a>
      <a href="#show-link">show-link</a>
      <a href="#tie">tie</a>
      <a href="#untie">untie</a>
      <!-- ======================================== -->
    <h3>
      Movie
    </h3>
    <p id="moviegroup">
      <a href="#movie-cancel">movie-cancel</a>
      <a href="#movie-close">movie-close</a>
      <a href="#movie-grab-view">movie-grab-view</a>
      <a href="#movie-grab-view">movie-grab-interface</a>
      <a href="#movie-set-frame-rate">movie-set-frame-rate</a>
      <a href="#movie-start">movie-start</a>
      <a href="#movie-status">movie-status</a>
      <!-- ======================================== -->
    <h3>
      BehaviorSpace
    </h3>
    <p id="behaviorspacegroup">
      <a href="#behaviorspace-experiment-name">behaviorspace-experiment-name</a>
      <a href="#behaviorspace-run-number">behaviorspace-run-number</a>
      <!-- ======================================== -->
    <h3>
      System
    </h3>
    <p id="systemgroup">
      <a href="#netlogo-applet">netlogo-applet?</a>
      <a href="#netlogo-version">netlogo-version</a>
      <a href="#netlogo-web">netlogo-web?</a>
      <!-- ======================================== -->
       <!-- ======================================== -->
       <!-- ======================================== -->
    <h2>
      <a>Built-In Variables</a>
    </h2><!-- ======================================== -->
    <div id="builtinvariables">
      <h3>
        <a>Turtles</a>
      </h3>
      <p id="turtle-variables">
      <a href="#breedvar">breed</a>
      <a href="#color">color</a>
      <a href="#heading">heading</a>
      <a href="#hidden">hidden?</a>
      <a href="#label">label</a>
      <a href="#label-color">label-color</a>
      <a href="#pen-mode">pen-mode</a>
      <a href="#pen-size">pen-size</a>
      <a href="#shape">shape</a>
      <a href="#size">size</a>
      <a href="#who">who</a>
      <a href="#xcor">xcor</a>
      <a href="#ycor">ycor</a>
      <!-- ======================================== -->
      <h3>
        <a>Patches</a>
      </h3>
      <p id="patch-variables">
      <a href="#pcolor">pcolor</a>
      <a href="#plabel">plabel</a>
      <a href="#plabel-color">plabel-color</a>
      <a href="#pcor">pxcor</a>
      <a href="#pcor">pycor</a>
      <!-- ======================================== -->
      <h3>
        <a>Links</a>
      </h3>
      <p id="link-variables">
      <a href="#breed">breed</a>
      <a href="#color">color</a>
      <a href="#end1">end1</a>
      <a href="#end2">end2</a>
      <a href="#hidden">hidden?</a>
      <a href="#label">label</a>
      <a href="#label-color">label-color</a>
      <a href="#shape">shape</a>
      <a href="#thickness">thickness</a>
      <a href="#tie-mode">tie-mode</a>
      <!-- ======================================== -->
      <h3>
        <a>Other</a>
      </h3>
      <p id="other-variables">
      <a href="#ques">?</a>
      <!-- ======================================== -->
      <!-- ======================================== -->
      <!-- ======================================== -->
    </div>
    <h2>
      <a>Keywords</a>
    </h2>
    <p id="Keywords">
      <a href="#breed">breed</a>
      <a href="#directed-link-breed">directed-link-breed</a>
      <a href="#end">end</a>
      <a href="#extensions">extensions</a>
      <a href="#globals">globals</a>
      <a href="#includes">__includes</a>
      <a href="#links-own">links-own</a>
      <a href="#patches-own">patches-own</a>
      <a href="#to">to</a>
      <a href="#to-report">to-report</a>
      <a href="#turtles-own">turtles-own</a>
      <a href="#undirected-link-breed">undirected-link-breed</a>
      <!-- ======================================== -->
       <!-- ======================================== -->
       <!-- ======================================== -->
    <h2>
      <a>Constants</a>
    </h2><!-- ======================================== -->
    <div id="Constants">
      <div class="dict_entry" id="mathconstants" data-constants="e pi">
        <h3>
          Mathematical Constants
        </h3>
        <p>
        <b id="num-e"><a>e</a></b> = 2.718281828459045
        <br>
        <b id="pi"><a>pi</a></b> = 3.141592653589793
      </div><!-- ======================================== -->
      <div class="dict_entry" id="boolconstants" data-constants="false true">
        <h3>
          <a>Boolean Constants</a>
        </h3>
        <p id="false true">
        <b><a>false</a></b>
        <br>
        <b><a>true</a></b>
      </div><!-- ======================================== -->
      <div class="dict_entry" id="colorconstants" data-constants="black gray white red orange brown yellow green lime turquoise cyan sky blue violet magenta pink">
        <h3>
          <a>Color Constants</a>
        </h3>
        <p>
        <b>black</b> = 0
        <br>
        <b>gray</b> = 5
        <br>
        <b>white</b> = 9.9
        <br>
        <b>red</b> = 15
        <br>
        <b>orange</b> = 25
        <br>
        <b>brown</b> = 35
        <br>
        <b>yellow</b> = 45
        <br>
        <b>green</b> = 55
        <br>
        <b>lime</b> = 65
        <br>
        <b>turquoise</b> = 75
        <br>
        <b>cyan</b> = 85
        <br>
        <b>sky</b> = 95
        <br>
        <b>blue</b> = 105
        <br>
        <b>violet</b> = 115
        <br>
        <b>magenta</b> = 125
        <br>
        <b>pink</b> = 135
        <p>
        See the <a href="programming.html#colors">Colors</a> section of the
        Programming Guide for more details.
      </div><!-- ======================================== -->
      <!-- ======================================== -->
      <!-- ======================================== -->
      <!-- ======================================== -->
    </div>
    <h2>
      <a>A&nbsp;</a>
    </h2><!-- ======================================== -->
    <div id="A">
    <div class="dict_entry" id="abs">
      <h3>
        <a>abs<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">abs <i>number</i></span>
      </h4>
      <p>
        Reports the absolute value of <i>number</i>.
      <pre>
show abs -7
=&gt; 7
show abs 5
=&gt; 5
</pre>
    </div>
    <div class="dict_entry" id="acos">
      <h3>
        <a>acos<span class="since">1.3</span></a>
      </h3>
      <h4>
        <span class="prim_example">acos <i>number</i></span>
      </h4>
      <p>
        Reports the arc cosine (inverse cosine) of the given number. The
        input must be in the range -1 to 1. The result is in degrees, and
        lies in the range 0 to 180.
      </div>
    <div class="dict_entry" id="all">
      <h3>
        <a>all?<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">all? <i>agentset</i> [<i>reporter</i>]</span>
      </h4>
      <p>
        Reports true if all of the agents in the agentset report true for
        the given reporter. Otherwise reports false as soon as a
        counterexample is found.
      <p>
        If the agentset is empty, reports true.
      <p>
        The reporter must report a boolean value for every agent (either
        true or false), otherwise an error occurs.
      <pre>
if all? turtles [color = red]
  [ show &quot;every turtle is red!&quot; ]
</pre>
      <p>
        See also <a href="#any">any?</a>.
      </div>
    <div class="dict_entry" id="and">
      <h3>
        <a>and<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>condition1</i> and <i>condition2</i></span>
      </h4>
      <p>
        Reports true if both <i>condition1</i> and <i>condition2</i> are
        true.
      <p>
        Note that if <i>condition1</i> is false, then <i>condition2</i>
        will not be run (since it can't affect the result).
      <pre>
if (pxcor &gt; 0) and (pycor &gt; 0)
  [ set pcolor blue ]  ;; the upper-right quadrant of
                       ;; patches turn blue
</pre>
    </div>
    <div class="dict_entry" id="any">
      <h3>
        <a>any?<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">any? <i>agentset</i></span>
      </h4>
      <p>
        Reports true if the given agentset is non-empty, false otherwise.
      <p>
        Equivalent to &quot;count <i>agentset</i> &gt; 0&quot;, but more
        efficient (and arguably more readable).
      <pre>
if any? turtles with [color = red]
  [ show &quot;at least one turtle is red!&quot; ]
</pre>
      <p>
        Note: nobody is not an agentset. You only get nobody back in
        situations where you were expecting a single agent, not a whole
        agentset. If any? gets nobody as input, an error results.
      <p>
        See also <a href="#all">all?</a>, <a href="#nobody">nobody</a>.
      </div>
    <div class="dict_entry" id="approximate-hsb">
      <h3>
        <a>approximate-hsb<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">approximate-hsb <i>hue saturation brightness</i></span>
      </h4>
      <p>
        Reports a number in the range 0 to 140, not including 140 itself,
        that represents the given color, specified in the HSB spectrum, in
        NetLogo's color space.
      <p>
        The first value (hue) should be in the range of 0 to 360, the second
        and third (saturation and brightness) in the range between 0 and 100.
      <p>
        The color reported may be only an approximation, since the NetLogo
        color space does not include all possible colors.
      <pre>
show approximate-hsb 0 0 0
=&gt; 0  ;; (black)
show approximate-hsb 180 57.143 76.863
=&gt; 85 ;; (cyan)
</pre>
      <p>
        See also <a href="#extract-hsb">extract-hsb</a>, <a href="#approximate-rgb">approximate-rgb</a>, <a href="#extract-rgb">extract-rgb</a>.
      </div>
    <div class="dict_entry" id="approximate-rgb">
      <h3>
        <a>approximate-rgb<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">approximate-rgb <i>red green blue</i></span>
      </h4>
      <p>
        Reports a number in the range 0 to 140, not including 140 itself,
        that represents the given color, specified in the RGB spectrum, in
        NetLogo's color space.
      <p>
        All three inputs should be in the range 0 to 255.
      <p>
        The color reported may be only an approximation, since the NetLogo
        color space does not include all possible colors. (See <a href="#approximate-hsb">approximate-hsb</a> for a description of what
        parts of the HSB color space NetLogo colors cover; this is
        difficult to characterize in RGB terms.)
      <pre>
show approximate-rgb 0 0 0
=&gt; 0  ;; black
show approximate-rgb 0 255 255
=&gt; 85.2 ;; cyan
</pre>
      <p>
        See also <a href="#extract-rgb">extract-rgb</a>, <a href="#approximate-hsb">approximate-hsb</a>, and <a href="#extract-hsb">extract-hsb</a>.
      </div>
    <div class="dict_entry" id="Symbols">
      <h3>
        <a>Arithmetic Operators</a>
        <a>+<span class="since">1.0</span></a>
        <a>*<span class="since">1.0</span></a>
        <a>-<span class="since">1.0</span></a>
        <a>/<span class="since">1.0</span></a>
        <a>^<span class="since">1.0</span></a>
        <a>&lt;<span class="since">1.0</span></a>
        <a>&gt;<span class="since">1.0</span></a>
        <a>=<span class="since">1.0</span></a>
        <a>!=<span class="since">1.0</span></a>
        <a>&lt;=<span class="since">1.0</span></a>
        <a>&gt;=<span class="since">1.0</span></a>
      </h3>
      <p>
        All of these operators take two inputs, and all act as &quot;infix
        operators&quot; (going between the two inputs, as in standard
        mathematical use). NetLogo correctly supports order of operations
        for infix operators.
      <p>
        The operators work as follows: + is addition, * is multiplication,
        - is subtraction, / is division, ^ is exponentiation, &lt; is less
        than, &gt; is greater than, = is equal to, != is not equal to,
        &lt;= is less than or equal, &gt;= is greater than or equal.
      <p>
        Note that the subtraction operator (-) always takes two inputs
        unless you put parentheses around it, in which case it can take one
        input. For example, to take the negative of x, write (- x), with
        the parentheses.
      <p>
        All of the comparison operators also work on strings.
      <p>
        All of the comparison operators work on agents. Turtles are
        compared by who number. Patches are compared top to bottom left to
        right, so patch 0 10 is less than patch 0 9 and patch 9 0 is less
        than patch 10 0. Links are ordered by end points and in case of a
        tie by breed. So link 0 9 is before link 1 10 as the end1 is
        smaller, and link 0 8 is less than link 0 9. If there are multiple
        breeds of links unbreeded links will come before breeded links of
        the same end points and breeded links will be sorted in the order
        they are declared in the Code tab.
      <p>
        Agentsets can be tested for equality or inequality. Two agentsets
        are equal if they are the same type (turtle or patch) and contain
        the same agents.
      <p>
        If you are not sure how NetLogo will interpret your code, you
        should add parentheses.
      <pre>
show 5 * 6 + 6 / 3
=&gt; 32
show 5 * (6 + 6) / 3
=&gt; 20
</pre>
    </div>
    <div class="dict_entry" id="asin">
      <h3>
        <a>asin<span class="since">1.3</span></a>
      </h3>
      <h4>
        <span class="prim_example">asin <i>number</i></span>
      </h4>
      <p>
        Reports the arc sine (inverse sine) of the given number. The input
        must be in the range -1 to 1. The result is in degrees, and lies in
        the range -90 to 90.
      </div>
    <div class="dict_entry" id="ask">
      <h3>
        <a>ask<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">ask <i>agentset</i> [<i>commands</i>]</span>
        <span class="prim_example">ask <i>agent</i> [<i>commands</i>]</span>
      </h4>
      <p>
        The specified agent or agentset runs the given commands.
      <pre>
ask turtles [ fd 1 ]
  ;; all turtles move forward one step
ask patches [ set pcolor red ]
  ;; all patches turn red
ask turtle 4 [ rt 90 ]
  ;; only the turtle with id 4 turns right
</pre>
      <p>
        Note: only the observer can ask all turtles or all patches. This
        prevents you from inadvertently having all turtles ask all turtles
        or all patches ask all patches, which is a common mistake to make
        if you're not careful about which agents will run the code you
        are writing.
      <p>
        Note: Only the agents that are in the agentset <i>at the time the
        ask begins</i> run the commands.
      </div>
    <div class="dict_entry" id="ask-concurrent">
      <h3>
        <a>ask-concurrent<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">ask-concurrent <i>agentset</i> [<i>commands</i>]</span>
      </h4>
      <p>
        This primitive exists only for backwards compatibility. We
        don't recommend using it new models.
      <p>
        The agents in the given agentset run the given commands, using a
        turn-taking mechanism to produce simulated concurrency. See the
        <a href="programming.html#ask-concurrent">Ask-Concurrent</a>
        section of the Programming Guide for details on how this works.
      <p>
        Note: Only the agents that are in the agentset <i>at the time the
        ask begins</i> run the commands.
      <p>
        See also <a href="#without-interruption">without-interruption</a>.
      </div>
    <div class="dict_entry" id="at-points">
      <h3>
        <a>at-points<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>agentset</i> at-points [[<i>x1 y1</i>] [<i>x2 y2</i>] ...]</span>
      </h4>
      <p>
        Reports a subset of the given agentset that includes only the
        agents on the patches the given distances away from this agent. The
        distances are specified as a list of two-item lists, where the two
        items are the x and y offsets.
      <p>
        If the caller is the observer, then the points are measured
        relative to the origin, in other words, the points are taken as
        absolute patch coordinates.
      <p>
        If the caller is a turtle, the points are measured relative to the
        turtle's exact location, and not from the center of the patch
        under the turtle.
      <pre>
ask turtles at-points [[2 4] [1 2] [10 15]]
  [ fd 1 ]  ;; only the turtles on the patches at the
            ;; distances (2,4), (1,2) and (10,15),
            ;; relative to the caller, move
</pre>
    </div>
    <div class="dict_entry" id="atan">
      <h3>
        <a>atan<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">atan <i>x y</i></span>
      </h4>
      <p>
        Converts x and y offsets to a turtle heading in degrees (from 0 to
        360).
      <p>
        Note that this version of atan is designed to conform to the
        geometry of the NetLogo world, where a heading of 0 is straight up,
        90 is to the right, and so on clockwise around the circle.
        (Normally in geometry an angle of 0 is right, 90 is up, and so on,
        counterclockwise around the circle, and atan would be defined
        accordingly.)
      <p>
        When y is 0: if x is positive, it reports 90; if x is negative, it
        reports 270; if x is zero, you get an error.
      <pre>
show atan 1 -1
=&gt; 135
show atan -1 1
=&gt; 315
crt 1 [ set heading 30  fd 1  print atan xcor ycor ]
=&gt; 30
</pre>
      <p>
        In the final example, note that the result of <code>atan</code> equals
        the turtle's heading.
      <p>
        If you ever need to convert a turtle heading (obtained with atan or
        otherwise) to a normal mathematical angle, the following should be
        helpful:
      <pre>
to-report heading-to-angle [ h ]
  report (90 - h) mod 360
end
</pre>
    </div>
    <div class="dict_entry" id="autoplot">
      <h3>
        <a>autoplot?<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">autoplot?</span>
      </h4>
      <p>
        Reports true if auto-plotting is on for the current plot, false
        otherwise.
      </div>
    <div class="dict_entry" id="auto-plot-status">
      <h3>
        <a>auto-plot-off<span class="since">1.0</span></a>
        <a>auto-plot-on<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">auto-plot-off</span>
        <span class="prim_example">auto-plot-on</span>
      </h4>
      <p>
        This pair of commands is used to control the NetLogo feature of
        auto-plotting in the current plot. Auto-plotting will automatically
        update the x and y axes of the plot whenever the current pen
        exceeds these boundaries. It is useful when wanting to show all
        plotted values in the current plot, regardless of the current plot
        ranges.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>B</a>
    </h2><!-- ======================================== -->
    <div id="B">
    <div class="dict_entry" id="back">
      <h3>
        <a>back<span class="since">1.0</span></a>
        <a>bk<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">back <i>number</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle moves backward by <i>number</i> steps. (If <i>number</i>
        is negative, the turtle moves forward.)
      <p>
        Turtles using this primitive can move a maximum of one unit per
        time increment. So <code>bk 0.5</code> and <code>bk 1</code> both take one
        unit of time, but <code>bk 3</code> takes three.
      <p>
        If the turtle cannot move backward <i>number</i> steps because it
        is not permitted by the current topology the turtle will complete
        as many steps of 1 as it can and stop.
      <p>
        See also <a href="#forward">forward</a>, <a href="#jump">jump</a>,
        <a href="#can-move">can-move?</a>.
      </div>
    <div class="dict_entry" id="base-colors">
      <h3>
        <a>base-colors<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">base-colors</span>
      </h4>
      <p>
        Reports a list of the 14 basic NetLogo hues.
      <pre>
print base-colors
=&gt; [5 15 25 35 45 55 65 75 85 95 105 115 125 135]
ask turtles [ set color one-of base-colors ]
;; each turtle turns a random base color
ask turtles [ set color one-of remove gray base-colors ]
;; each turtle turns a random base color except for gray
</pre>
    </div>
    <div class="dict_entry" id="beep">
      <h3>
        <a>beep<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">beep</span>
      </h4>
      <p>
        Emits a beep. Note that the beep sounds immediately, so several
        beep commands in close succession may produce only one audible
        sound.
      <p>
        Example:
      <pre>
beep                       ;; emits one beep
repeat 3 [ beep ]          ;; emits 3 beeps at once,
                           ;; so you only hear one sound
repeat 3 [ beep wait 0.1 ] ;; produces 3 beeps in succession,
                           ;; separated by 1/10th of a second
</pre>
      <p>
        When running headless, this command has no effect.
      </div>
    <div class="dict_entry" id="behaviorspace-experiment-name">
      <h3>
        <a>behaviorspace-experiment-name<span class="since">5.2</span></a>
      </h3>
      <h4>
        <span class="prim_example">behaviorspace-experiment-name</span>
      </h4>
      <p>
        Reports the current experiment name in the current experiment.
      <p>
        If no BehaviorSpace experiment is running, reports &quot;&quot;.
      </div>
    <div class="dict_entry" id="behaviorspace-run-number">
      <h3>
        <a>behaviorspace-run-number<span class="since">4.1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">behaviorspace-run-number</span>
      </h4>
      <p>
        Reports the current run number in the current BehaviorSpace
        experiment, starting at 1.
      <p>
        If no BehaviorSpace experiment is running, reports 0.
      </div>
    <div class="dict_entry" id="both-ends">
      <h3>
        <a>both-ends<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">both-ends</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        Reports the agentset of the 2 nodes connected by this link.
      <pre>
crt 2
ask turtle 0 [ create-link-with turtle 1 ]
ask link 0 1 [
  ask both-ends [ set color red ] ;; turtles 0 and 1 both turn red
]
</pre>
    </div>
    <div class="dict_entry" id="breedvar">
      <h3>
        <a>breed</a>
      </h3>
      <h4>
        <span class="prim_example">breed</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in turtle and link variable. It holds the agentset
        of all turtles or links of the same breed as this turtle or link.
        (For turtles or links that do not have any particular breed, this
        is the <a href="#turtles">turtles</a> agentset of all turtles or
        the <a href="#links">links</a> agentset of all links respectively.)
      <p>
        You can set this variable to change a turtle or link's breed.
        (When a turtle changes breeds, its shape is reset to the default
        shape for that breed. See <a href="#set-default-shape">set-default-shape</a>.)
      <p>
        See also <a href="#breed">breed</a>, <a href="#directed-link-breed">directed-link-breed</a>, <a href="#undirected-link-breed">undirected-link-breed</a>
      <p>
        Example:
      <pre>
breed [cats cat]
breed [dogs dog]
;; turtle code:
if breed = cats [ show &quot;meow!&quot; ]
set breed dogs
show &quot;woof!&quot;
</pre>
      <pre>
directed-link-breed [ roads road ]
;; link code
if breed = roads [ set color gray ]
</pre>
    </div>
    <div class="dict_entry" id="breed">
      <h3>
        <a>breed</a>
      </h3>
      <h4>
        <span class="prim_example">breed [<i>&lt;breeds&gt;</i> <i>&lt;breed&gt;</i>]</span>
      </h4>
      <p>
        This keyword, like the globals, turtles-own, and patches-own
        keywords, can only be used at the beginning of the Code tab, before
        any procedure definitions. It defines a breed. The first input
        defines the name of the agentset associated with the breed. The
        second input defines the name of a single member of the breed.
      <p>
        Any turtle of the given breed:
      <ul>
        <li>is part of the agentset named by the breed name
        <li>has its breed built-in variable set to that agentset
        </ul>
      <p>
        Most often, the agentset is used in conjunction with ask to give
        commands to only the turtles of a particular breed.
      <pre>
breed [mice mouse]
breed [frogs frog]
to setup
  clear-all
  create-mice 50
  ask mice [ set color white ]
  create-frogs 50
  ask frogs [ set color green ]
  show [breed] of one-of mice    ;; prints mice
  show [breed] of one-of frogs   ;; prints frogs
end

show mouse 1
;; prints (mouse 1)
show frog 51
;; prints (frog 51)
show turtle 51
;; prints (frog 51)
</pre>
      <p>
        See also <a href="#globals">globals</a>, <a href="#patches-own">patches-own</a>, <a href="#turtles-own">turtles-own</a>, <a href="#turtles-own"><i>&lt;breeds&gt;</i>-own</a>, <a href="#create-turtles">create-<i>&lt;breeds&gt;</i></a>, <a href="#turtles-at"><i>&lt;breeds&gt;</i>-at</a>, <a href="#turtles-here"><i>&lt;breeds&gt;</i>-here</a>.
      </div>
    <div class="dict_entry" id="but-first-and-last">
      <h3>
        <a>but-first<span class="since">1.0</span></a>
        <a>butfirst<span class="since">1.0</span></a>
        <a>bf<span class="since">1.0</span></a>
        <a>but-last<span class="since">1.0</span></a>
        <a>butlast<span class="since">1.0</span></a>
        <a>bl<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">but-first <i>list</i></span>
        <span class="prim_example">but-first <i>string</i></span>
        <span class="prim_example">but-last <i>list</i></span>
        <span class="prim_example">but-last <i>string</i></span>
      </h4>
      <p>
        When used on a list, but-first reports all of the list items of
        <i>list</i> except the first, and but-last reports all of the list
        items of <i>list</i> except the last.
      <p>
        On strings, but-first and but-last report a shorter string omitting
        the first or last character of the original string.
      <pre>
;; mylist is [2 4 6 5 8 12]
set mylist but-first mylist
;; mylist is now [4 6 5 8 12]
set mylist but-last mylist
;; mylist is now [4 6 5 8]
show but-first &quot;string&quot;
;; prints &quot;tring&quot;
show but-last &quot;string&quot;
;; prints &quot;strin&quot;
</pre><!-- ======================================== -->
    </div>
  </div>
    <h2>
      <a>C</a>
    </h2><!-- ======================================== -->
    <div id="C">
    <div class="dict_entry" id="can-move">
      <h3>
        <a>can-move?<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">can-move? <i>distance</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports true if this turtle can move <i>distance</i> in the
        direction it is facing without violating the topology; reports
        false otherwise.
      <p>
        It is equivalent to:
      <pre>
patch-ahead <i>distance</i> != nobody
</pre>
    </div>
    <div class="dict_entry" id="carefully">
      <h3>
        <a>carefully<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">carefully [ <i>commands1</i> ] [ <i>commands2</i> ]</span>
      </h4>
      <p>
        Runs <i>commands1</i>. If a runtime error occurs inside
        <i>commands1</i>, NetLogo won't stop and alert the user that an
        error occurred. It will suppress the error and run <i>commands2</i>
        instead.
      <p>
        The error-message reporter can be used in <i>commands2</i> to find
        out what error was suppressed in <i>commands1</i>. See <a href="#error-message">error-message</a>.
      <pre>
carefully [ print one-of [1 2 3] ] [ print error-message ]
=&gt; 3
observer&gt; carefully [ print one-of [] ] [ print error-message ]
=&gt; ONE-OF got an empty list as input.
</pre>
    </div>
    <div class="dict_entry" id="ceiling">
      <h3>
        <a>ceiling<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">ceiling <i>number</i></span>
      </h4>
      <p>
        Reports the smallest integer greater than or equal to
        <i>number</i>.
      <pre>
show ceiling 4.5
=&gt; 5
show ceiling -4.5
=&gt; -4
</pre>
      <p>
        See also <a href="#floor">floor</a>, <a href="#round">round</a>,
        <a href="#precision">precision</a>.
      </div>
    <div class="dict_entry" id="clear-all">
      <h3>
        <a>clear-all<span class="since">1.0</span></a>
        <a>ca<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-all</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Combines the effects of clear-globals, clear-ticks,
        clear-turtles, clear-patches, clear-drawing, clear-all-plots, and
        clear-output.
      </div>
    <div class="dict_entry" id="clear-all-plots">
      <h3>
        <a>clear-all-plots<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-all-plots</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Clears every plot in the model. See <a href="#clear-plot">clear-plot</a> for more information.
      </div>
    <div class="dict_entry" id="clear-drawing">
      <h3>
        <a>clear-drawing<span class="since">3.0</span></a>
        <a>cd<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-drawing</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Clears all lines and stamps drawn by turtles.
      </div>
    <div class="dict_entry" id="clear-globals">
      <h3>
        <a>clear-globals<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-globals</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Sets all global variables to 0.
      </div>
    <div class="dict_entry" id="clear-links">
      <h3>
        <a>clear-links<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-links</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Kills all links.
      <p>
        See also <a href="#die">die</a>.
      </div>
    <div class="dict_entry" id="clear-output">
      <h3>
        <a>clear-output<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-output</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Clears all text from the model's output area, if it has one.
        Otherwise does nothing.
      </div>
    <div class="dict_entry" id="clear-patches">
      <h3>
        <a>clear-patches<span class="since">1.0</span></a>
        <a>cp<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-patches</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Clears the patches by resetting all patch variables to their
        default initial values, including setting their color to black.
      </div>
    <div class="dict_entry" id="clear-plot">
      <h3>
        <a>clear-plot</a>
      </h3>
      <h4>
        <span class="prim_example">clear-plot</span>
      </h4>
      <p>
        In the current plot only, resets all plot pens, deletes all
        temporary plot pens, resets the plot to its default values (for x
        range, y range, etc.), and resets all permanent plot pens to their
        default values. The default values for the plot and for the
        permanent plot pens are set in the plot Edit dialog, which is
        displayed when you edit the plot. If there are no plot pens after
        deleting all temporary pens, that is to say if there are no
        permanent plot pens, a default plot pen will be created with the
        following initial settings:
      <ul>
        <li>Pen: down
        <li>Color: black
        <li>Mode: 0 (line mode)
        <li>Name: &quot;default&quot;
        <li>Interval: 1
        </ul>
      <p>
        See also <a href="#clear-all-plots">clear-all-plots</a>.
      </div>
    <div class="dict_entry" id="clear-ticks">
      <h3>
        <a>clear-ticks<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-ticks</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Clears the tick counter.
      <p>
        Does not set the counter to zero. After this command runs, the tick
        counter has no value. Attempting to access or update it is an error
        until <a href="#reset-ticks">reset-ticks</a> is called.
      <p>
        See also <a href="#reset-ticks">reset-ticks</a>.
      </div>
    <div class="dict_entry" id="clear-turtles">
      <h3>
        <a>clear-turtles<span class="since">1.0</span></a>
        <a>ct<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">clear-turtles</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Kills all turtles.
      <p>
        Also resets the who numbering, so the next turtle created will be
        turtle 0.
      <p>
        See also <a href="#die">die</a>.
      </div>
    <div class="dict_entry" id="color">
      <h3>
        <a>color</a>
      </h3>
      <h4>
        <span class="prim_example">color</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in turtle or link variable. It holds the color of
        the turtle or link. You can set this variable to make the turtle or
        link change color. Color can be represented either as a NetLogo
        color (a single number), or an RGB color (a list of 3 numbers). See
        details in the <a href="programming.html#colors">Colors section</a>
        of the Programming Guide.
      <p>
        See also <a href="#pcolor">pcolor</a>.
      </div>
    <div class="dict_entry" id="cos">
      <h3>
        <a>cos<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">cos <i>number</i></span>
      </h4>
      <p>
        Reports the cosine of the given angle. Assumes the angle is given
        in degrees.
      <pre>
show cos 180
=&gt; -1
</pre>
    </div>
    <div class="dict_entry" id="count">
      <h3>
        <a>count<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">count <i>agentset</i></span>
      </h4>
      <p>
        Reports the number of agents in the given agentset.
      <pre>
show count turtles
;; prints the total number of turtles
show count patches with [pcolor = red]
;; prints the total number of red patches
</pre>
    </div>
    <div class="dict_entry" id="create-ordered-turtles">
      <h3>
        <a>create-ordered-turtles<span class="since">4.0</span></a>
        <a>cro<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">create-ordered-turtles <i>number</i></span>
        <span class="prim_example">create-ordered-turtles <i>number</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-ordered<i>&lt;breeds&gt;</i> <i>number</i></span>
        <span class="prim_example">create-ordered<i>&lt;breeds&gt;</i> <i>number</i> [ <i>commands</i> ]</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Creates <i>number</i> new turtles. New turtles start at position
        (0, 0), are created with the 14 primary colors, and have headings
        from 0 to 360, evenly spaced.
      <p>
        If the create-ordered-<i>&lt;breeds&gt;</i> form is used, the new
        turtles are created as members of the given breed.
      <p>
        If <i>commands</i> are supplied, the new turtles immediately run
        them. This is useful for giving the new turtles a different color,
        heading, or whatever. (The new turtles are created all at once then
        run one at a time, in random order.)
      <pre>
cro 100 [ fd 10 ]  ;; makes an evenly spaced circle
</pre>
    </div>
    <div class="dict_entry" id="create-link">
      <h3>
        <a>create-&lt;breed&gt;-to</a>
        <a>create-&lt;breeds&gt;-to</a>
        <a>create-&lt;breed&gt;-from</a>
        <a>create-&lt;breeds&gt;-from</a>
        <a>create-&lt;breed&gt;-with</a>
        <a>create-&lt;breeds&gt;-with</a>
        <a>create-link-to<span class="since">4.0</span></a>
        <a>create-links-to<span class="since">4.0</span></a>
        <a>create-link-from<span class="since">4.0</span></a>
        <a>create-links-from<span class="since">4.0</span></a>
        <a>create-link-with<span class="since">4.0</span></a>
        <a>create-links-with<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">create-&lt;breed&gt;-to <i>turtle</i></span>
        <span class="prim_example">create-&lt;breed&gt;-to <i>turtle</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-&lt;breed&gt;-from <i>turtle</i></span>
        <span class="prim_example">create-&lt;breed&gt;-from <i>turtle</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-&lt;breed&gt;-with <i>turtle</i></span>
        <span class="prim_example">create-&lt;breed&gt;-with <i>turtle</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-&lt;breeds&gt;-to <i>turtleset</i></span>
        <span class="prim_example">create-&lt;breeds&gt;-to <i>turtleset</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-&lt;breeds&gt;-from <i>turtleset</i></span>
        <span class="prim_example">create-&lt;breeds&gt;-from <i>turtleset</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-&lt;breeds&gt;-with <i>turtleset</i></span>
        <span class="prim_example">create-&lt;breeds&gt;-with <i>turtleset</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-link-to <i>turtle</i></span>
        <span class="prim_example">create-link-to <i>turtle</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-link-from <i>turtle</i></span>
        <span class="prim_example">create-link-from <i>turtle</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-link-with <i>turtle</i></span>
        <span class="prim_example">create-link-with <i>turtle</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-links-to <i>turtleset</i></span>
        <span class="prim_example">create-links-to <i>turtleset</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-links-from <i>turtleset</i></span>
        <span class="prim_example">create-links-from <i>turtleset</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-links-with <i>turtleset</i></span>
        <span class="prim_example">create-links-with <i>turtleset</i> [ <i>commands</i> ]</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Used for creating breeded and unbreeded links between turtles.
      <p>
        <code>create-link-with</code> creates an undirected link between the caller and
        <i>agent</i>. <code>create-link-to</code> creates a directed link from the
        caller to <i>agent</i>. <code>create-link-from</code> creates a directed link
        from <i>agent</i> to the caller.
      <p>
        When the plural form of the breed name is used, an <i>agentset</i>
        is expected instead of an agent and links are created between the
        caller and all agents in the agentset.
      <p>
        The optional command block is the set of commands each newly formed
        link runs. (The links are created all at once then run one at a
        time, in random order.)
      <p>
        A node cannot be linked to itself. Also, you cannot have more than
        one undirected link of the same breed between the same two nodes,
        nor can you have more than one directed link of the same breed
        going in the same direction between two nodes.
      <p>
        If you try to create a link where one (of the same breed) already
        exists, nothing happens. If you try to create a link from a turtle
        to itself you get a runtime error.
      <pre>
to setup
  clear-all
  create-turtles 5
  ;; turtle 1 creates links with all other turtles
  ;; the link between the turtle and itself is ignored
  ask turtle 0 [ create-links-with other turtles ]
  show count links ;; shows 4
  ;; this does nothing since the link already exists
  ask turtle 0 [ create-link-with turtle 1 ]
  show count links ;; shows 4 since the previous link already existed
  ask turtle 2 [ create-link-with turtle 1 ]
  show count links ;; shows 5
end
</pre>
      <pre>
directed-link-breed [red-links red-link]
undirected-link-breed [blue-links blue-link]

to setup
  clear-all
  create-turtles 5
  ;; create links in both directions between turtle 0
  ;; and all other turtles
  ask turtle 0 [ create-red-links-to other turtles ]
  ask turtle 0 [ create-red-links-from other turtles ]
  show count links ;; shows 8
  ;; now create undirected links between turtle 0 and other turtles
  ask turtle 0 [ create-blue-links-with other turtles ]
  show count links ;; shows 12
end
</pre>
    </div>
    <div class="dict_entry" id="create-turtles">
      <h3>
        <a>create-turtles<span class="since">1.0</span></a>
        <a>crt<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">create-turtles <i>number</i></span>
        <span class="prim_example">create-turtles <i>number</i> [ <i>commands</i> ]</span>
        <span class="prim_example">create-<i>&lt;breeds&gt;</i> <i>number</i></span>
        <span class="prim_example">create-<i>&lt;breeds&gt;</i> <i>number</i> [ <i>commands</i> ]</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Creates <i>number</i> new turtles at the origin. New turtles have
        random integer headings and the color is randomly selected from the
        14 primary colors.
      <p>
        If the create-<i>&lt;breeds&gt;</i> form is used, the new turtles
        are created as members of the given breed.
      <p>
        If <i>commands</i> are supplied, the new turtles immediately run
        them. This is useful for giving the new turtles a different color,
        heading, or whatever. (The new turtles are created all at once then
        run one at a time, in random order.)
      <pre>
crt 100 [ fd 10 ]     ;; makes a randomly spaced circle
</pre>
      <pre>
breed [canaries canary]
breed [snakes snake]
to setup
  clear-all
  create-canaries 50 [ set color yellow ]
  create-snakes 50 [ set color green ]
end
</pre>
      <p>
        See also <a href="#hatch">hatch</a>, <a href="#sprout">sprout</a>.
      </div>
    <div class="dict_entry" id="create-temporary-plot-pen">
      <h3>
        <a>create-temporary-plot-pen</a>
      </h3>
      <h4>
        <span class="prim_example">create-temporary-plot-pen <i>string</i></span>
      </h4>
      <p>
        A new temporary plot pen with the given name is created in the
        current plot and set to be the current pen.
      <p>
        Few models will want to use this primitive, because all temporary
        pens disappear when clear-plot or clear-all-plots are called. The
        normal way to make a pen is to make a permanent pen in the
        plot's Edit dialog.
      <p>
        If a pen with that name already exists in the current plot, no
        new pen is created, and the existing pen is set to the current
        pen.
      <p>
        The new temporary plot pen has the following initial settings:
      <ul>
        <li>Pen: down
        <li>Color: black
        <li>Mode: 0 (line mode)
        <li>Interval: 1
        </ul>
      <p>
        See: <a href="#clear-plot">clear-plot</a>, <a href="#clear-all-plots">clear-all-plots</a>, and <a href="#set-current-plot-pen">set-current-plot-pen</a>.
        <!-- ======================================== -->
      </div>
    </div>
    <h2>
      <a>D</a>
    </h2><!-- ======================================== -->
    <div id="D">
    <div class="dict_entry" id="date-and-time">
      <h3>
        <a>date-and-time<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">date-and-time</span>
      </h4>
      <p>
        Reports a string containing the current date and time. The format
        is shown below. All fields are fixed width, so they are always at
        the same locations in the string. The potential resolution of the
        clock is milliseconds. (Whether you get resolution that high in
        practice may vary from system to system, depending on the
        capabilities of the underlying Java Virtual Machine.)
      <pre>
show date-and-time
=&gt; &quot;01:19:36.685 PM 19-Sep-2002&quot;
</pre>
    </div>
    <div class="dict_entry" id="die">
      <h3>
        <a>die<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">die</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        The turtle or link dies.
      <pre>
if xcor &gt; 20 [ die ]
;; all turtles with xcor greater than 20 die
ask links with [color = blue] [ die ]
;; all the blue links will die
</pre>
      <p>
        A dead agent ceases to exist. The effects of this include:
      <ul>
        <li>The agent will not execute any further code. So if you write
        <code>ask turtles [ die print &quot;last words?&quot; ]</code>, no last
        words will be printed, because the turtles are already dead before
        they have a chance to print anything.
        <li>The agent will disappear from any agentsets it was in, reducing
        the size of those agentsets by one.
        <li>Any variable that was storing the agent will now instead have
        <code>nobody</code> in it. So for example <code>let x one-of turtles ask
        x [ die ] print x</code> prints <code>nobody</code>.
        <li>If the dead agent was a turtle, every link connected to it also
        dies.
        <li>If the observer was watching or following the agent, the
        observer's perspective resets, as if <code>reset-perspective</code>
        had been run.
        </ul>
      <p>
        See also: <a href="#clear-turtles">clear-turtles</a> <a href="#clear-links">clear-links</a>
      </div>
    <div class="dict_entry" id="diffuse">
      <h3>
        <a>diffuse<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">diffuse <i>patch-variable</i> <i>number</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Tells each patch to give equal shares of (<i>number</i> * 100)
        percent of the value of <i>patch-variable</i> to its eight
        neighboring patches. <i>number</i> should be between 0 and 1.
        Regardless of topology the sum of <i>patch-variable</i> will be
        conserved across the world. (If a patch has fewer than eight
        neighbors, each neighbor still gets an eighth share; the patch
        keeps any leftover shares.)
      <p>
        Note that this is an observer command only, even though you might
        expect it to be a patch command. (The reason is that it acts on all
        the patches at once -- patch commands act on individual patches.)
      <pre>
diffuse chemical 0.5
;; each patch diffuses 50% of its variable
;; chemical to its neighboring 8 patches. Thus,
;; each patch gets 1/8 of 50% of the chemical
;; from each neighboring patch.)
</pre>
    </div>
    <div class="dict_entry" id="diffuse4">
      <h3>
        <a>diffuse4<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">diffuse4 <i>patch-variable</i> <i>number</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Like diffuse, but only diffuses to the four neighboring patches (to
        the north, south, east, and west), not to the diagonal neighbors.
      <pre>
diffuse4 chemical 0.5
;; each patch diffuses 50% of its variable
;; chemical to its neighboring 4 patches. Thus,
;; each patch gets 1/4 of 50% of the chemical
;; from each neighboring patch.)
</pre>
    </div>
    <div class="dict_entry" id="directed-link-breed">
      <h3>
        <a>directed-link-breed</a>
      </h3>
      <h4>
        <span class="prim_example">directed-link-breed [<i>&lt;link-breeds&gt;</i> <i>&lt;link-breed&gt;</i>]</span>
      </h4>
      <p>
        This keyword, like the globals and breeds keywords, can only be
        used at the beginning of the Code tab, before any procedure
        definitions. It defines a directed link breed. Links of a
        particular breed are always all directed or all undirected The
        first input defines the name of the agentset associated with the
        link breed. The second input defines the name of a single member of
        the breed. Directed links can be created using <a href="#create-link">create-link(s)-to</a>, and <a href="#create-link">create-link(s)-from</a>, but not
        <code>create-link(s)-with</code>
      <p>
        Any link of the given link breed:
      <ul>
        <li>is part of the agentset named by the link breed name
        <li>has its built-in variable <code>breed</code> set to that agentset
        <li>is directed or undirected as declared by the keyword
        </ul>
      <p>
        Most often, the agentset is used in conjunction with ask to give
        commands to only the links of a particular breed.
      <pre>
directed-link-breed [streets street]
directed-link-breed [highways highway]
to setup
  clear-all
  crt 2
  ;; create a link from turtle 0 to turtle 1
  ask turtle 0 [ create-street-to turtle 1 ]
  ;; create a link from turtle 1 to turtle 0
  ask turtle 0 [ create-highway-from turtle 1 ]
end

ask turtle 0 [ show one-of my-in-links ]
;; prints (street 0 1)
ask turtle 0 [ show one-of my-out-links ]
;; prints (highway 1 0)
</pre>
      <p>
        See also <a href="#breed">breed</a>, <a href="#undirected-link-breed">undirected-link-breed</a>
      </div>
    <div class="dict_entry" id="display">
      <h3>
        <a>display<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">display</span>
      </h4>
      <p>
        Causes the view to be updated immediately. (Exception: if the user
        is using the speed slider to fast-forward the model, then the
        update may be skipped.)
      <p>
        Also undoes the effect of the no-display command, so that if view
        updates were suspended by that command, they will resume.
      <pre>
no-display
ask turtles [ jump 10 set color blue set size 5 ]
display
;; turtles move, change color, and grow, with none of
;; their intermediate states visible to the user, only
;; their final state
</pre>
      <p>
        Even if no-display was not used, &quot;display&quot; can still be
        useful, because ordinarily NetLogo is free to skip some view
        updates, so that fewer total updates take place, so that models run
        faster. This command lets you force a view update, so whatever
        changes have taken place in the world are visible to the user.
      <pre>
ask turtles [ set color red ]
display
ask turtles [ set color blue]
;; turtles turn red, then blue; use of &quot;display&quot; forces
;; red turtles to appear briefly
</pre>
      <p>
        Note that display and no-display operate independently of the
        switch in the view control strip that freezes the view.
      <p>
        See also <a href="#no-display">no-display</a>.
      </div>
    <div class="dict_entry" id="distance">
      <h3>
        <a>distance<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">distance <i>agent</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Reports the distance from this agent to the given turtle or patch.
      <p>
        The distance to or a from a patch is measured from the center of
        the patch. Turtles and patches use the wrapped distance (around the
        edges of the world) if wrapping is allowed by the topology and the
        wrapped distance is shorter.
      <pre>
ask turtles [ show max-one-of turtles [distance myself] ]
;; each turtle prints the turtle farthest from itself
</pre>
    </div>
    <div class="dict_entry" id="distancexy">
      <h3>
        <a>distancexy<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">distancexy <i>xcor</i> <i>ycor</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Reports the distance from this agent to the point (<i>xcor</i>,
        <i>ycor</i>).
      <p>
        The distance from a patch is measured from the center of the patch.
        Turtles and patches use the wrapped distance (around the edges of
        the world) if wrapping is allowed by the topology and the wrapped
        distance is shorter.
      <pre>
if (distancexy 0 0) &gt; 10
  [ set color green ]
;; all turtles more than 10 units from
;; the center of the world turn green.
</pre>
    </div>
    <div class="dict_entry" id="downhill">
      <h3>
        <a>downhill<span class="since">1.0</span></a>
        <a>downhill4<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">downhill <i>patch-variable</i></span>
        <span class="prim_example">downhill4 <i>patch-variable</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Moves the turtle to the neighboring patch with the lowest value for
        <i>patch-variable</i>. If no neighboring patch has a smaller value
        than the current patch, the turtle stays put. If there are multiple
        patches with the same lowest value, the turtle picks one randomly.
        Non-numeric values are ignored.
      <p>
        downhill considers the eight neighboring patches; downhill4 only
        considers the four neighbors.
      <p>
        Equivalent to the following code (assumes variable values are
        numeric):
      <pre>
move-to patch-here  ;; go to patch center
let p min-one-of neighbors [<i>patch-variable</i>]  ;; or neighbors4
if [<i>patch-variable</i>] of p &lt; <i>patch-variable</i> [
  face p
  move-to p
]
</pre>
      <p>
        Note that the turtle always ends up on a patch center and has a
        heading that is a multiple of 45 (downhill) or 90 (downhill4).
      <p>
        See also <a href="#uphill">uphill</a>, <a href="#uphill">uphill4</a>.
      </div>
    <div class="dict_entry" id="dxy">
      <h3>
        <a>dx<span class="since">1.0</span></a>
        <a>dy<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">dx</span>
        <span class="prim_example">dy</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports the x-increment or y-increment (the amount by which the
        turtle's xcor or ycor would change) if the turtle were to take
        one step forward in its current heading.
      <p>
        Note: dx is simply the sine of the turtle's heading, and dy is
        simply the cosine. (If this is the reverse of what you expected,
        it's because in NetLogo a heading of 0 is north and 90 is east,
        which is the reverse of how angles are usually defined in
        geometry.)
      <p>
        Note: In earlier versions of NetLogo, these primitives were used in
        many situations where the new <code>patch-ahead</code> primitive is now
        more appropriate. <!-- ======================================== -->
      </div>
    </div>
    <h2>
      <a>E</a>
    </h2><!-- ======================================== -->
    <div id="E">
    <div class="dict_entry" id="empty">
      <h3>
        <a>empty?<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">empty? <i>list</i></span>
        <span class="prim_example">empty? <i>string</i></span>
      </h4>
      <p>
        Reports true if the given list or string is empty, false otherwise.
      <p>
        Note: the empty list is written <code>[]</code>. The empty string is
        written <code>&quot;&quot;</code>.
      </div>
    <div class="dict_entry" id="end">
      <h3>
        <a>end</a>
      </h3>
      <h4>
        <span class="prim_example">end</span>
      </h4>
      <p>
        Used to conclude a procedure. See <a href="#to">to</a> and <a href="#to-report">to-report</a>.
      </div>
    <div class="dict_entry" id="end1">
      <h3>
        <a>end1<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">end1</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in link variable. It indicates the first endpoint
        (turtle) of a link. For directed links this will always be the
        source for undirected links it will always be the turtle with the
        lower who number. You cannot set end1.
      <pre>
crt 2
ask turtle 0
[ create-link-to turtle 1 ]
ask links
[ show end1 ] ;; shows turtle 0
</pre>
    </div>
    <div class="dict_entry" id="end2">
      <h3>
        <a>end2<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">end2</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in link variable. It indicates the second endpoint
        (turtle) of a link. For directed links this will always be the
        destination for undirected links it will always be the turtle with
        the higher who number. You cannot set end2.
      <pre>
crt 2
ask turtle 1
[ create-link-with turtle 0 ]
ask links
[ show end2 ] ;; shows turtle 1
</pre>
    </div>
    <div class="dict_entry" id="error">
      <h3>
        <a>error<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">error <i>value</i></span>
      </h4>
      <p>
        Causes a runtime error to occur.
      <p>
        The given value is converted to a string (if it isn't one
        already) and used as the error message.
      <p>
        See also <a href="#error-message">error-message</a>, <a href="#carefully">carefully</a>.
      </div>
    <div class="dict_entry" id="error-message">
      <h3>
        <a>error-message<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">error-message</span>
      </h4>
      <p>
        Reports a string describing the error that was suppressed by
        carefully.
      <p>
        This reporter can only be used in the second block of a carefully
        command.
      <p>
        See also <a href="#error">error</a>, <a href="#carefully">carefully</a>.
      </div>
    <div class="dict_entry" id="every">
      <h3>
        <a>every<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">every <i>number</i> [ <i>commands</i> ]</span>
      </h4>
      <p>
        Runs the given commands only if it's been more than
        <i>number</i> seconds since the last time this agent ran them in
        this context. Otherwise, the commands are skipped.
      <p>
        By itself, every doesn't make commands run over and over again.
        You need to use every inside a loop, or inside a forever button, if
        you want the commands run over and over again. every only limits
        how often the commands run.
      <p>
        Above, &quot;in this context&quot; means during the same ask (or
        button press or command typed in the Command Center). So it
        doesn't make sense to write <code>ask turtles [ every 0.5 [ ... ]
        ]</code>, because when the ask finishes the turtles will all discard
        their timers for the &quot;every&quot;. The correct usage is shown
        below.
      <pre>
every 0.5 [ ask turtles [ fd 1 ] ]
;; twice a second the turtles will move forward 1
every 2 [ set index index + 1 ]
;; every 2 seconds index is incremented
</pre>
      <p>
        See also <a href="#wait">wait</a>.
      </div>
    <div class="dict_entry" id="exp">
      <h3>
        <a>exp<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">exp <i>number</i></span>
      </h4>
      <p>
        Reports the value of e raised to the <i>number</i> power.
      <p>
        Note: This is the same as e ^ <i>number</i>.
      </div>
    <div class="dict_entry" id="export-cmds">
      <h3>
        <a>export-view<span class="since">3.0</span></a>
        <a>export-interface<span class="since">2.0</span></a>
        <a>export-output<span class="since">1.0</span></a>
        <a>export-plot<span class="since">1.0</span></a>
        <a>export-all-plots<span class="since">1.2.1</span></a>
        <a>export-world<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">export-view <i>filename</i></span>
        <span class="prim_example">export-interface <i>filename</i></span>
        <span class="prim_example">export-output <i>filename</i></span>
        <span class="prim_example">export-plot <i>plotname</i> <i>filename</i></span>
        <span class="prim_example">export-all-plots <i>filename</i></span>
        <span class="prim_example">export-world <i>filename</i></span>
      </h4>
      <p>
        export-view writes the current contents of the current view to an
        external file given by the string <i>filename</i>. The file is
        saved in PNG (Portable Network Graphics) format, so it is
        recommended to supply a filename ending in &quot;.png&quot;.
      <p>
        export-interface is similar, but for the whole interface tab.
      <p>
        Note that export-view still works when running NetLogo in headless
        mode, but export-interface doesn't.
      <p>
        export-output writes the contents of the model's output area to
        an external file given by the string <i>filename</i>. (If the model
        does not have a separate output area, the output portion of the
        Command Center is used.)
      <p>
        export-plot writes the x and y values of all points plotted by all
        the plot pens in the plot given by the string <i>plotname</i> to an
        external file given by the string <i>filename</i>. If a pen is in
        bar mode (mode 0) and the y value of the point plotted is greater
        than 0, the upper-left corner point of the bar will be exported. If
        the y value is less than 0, then the lower-left corner point of the
        bar will be exported.
      <p>
        export-all-plots writes every plot in the current model to an
        external file given by the string <i>filename</i>. Each plot is
        identical in format to the output of export-plot.
      <p>
        export-world writes the values of all variables, both built-in and
        user-defined, including all observer, turtle, and patch variables,
        the drawing, the contents of the output area if one exists, the
        contents of any plots and the state of the random number generator,
        to an external file given by the string <i>filename</i>. (The
        result file can be read back into NetLogo with the <a href="#import-world">import-world</a> primitive.) export-world does not
        save the state of open files.
      <p>
        export-plot, export-all-plots and export-world save files in in
        plain-text, &quot;comma-separated values&quot; (<code>.csv</code>)
        format. CSV files can be read by most popular spreadsheet and
        database programs as well as any text editor.
      <p>
        If you wish to export to a file in a location other than the
        model's location, you should include the full path to the file
        you wish to export. (Use the forward-slash &quot;/&quot; as the
        folder separator.)
      <p>
        Note that the functionality of these primitives is also available
        directly from NetLogo's File menu.
      <pre>
export-world &quot;fire.csv&quot;
;; exports the state of the model to the file fire.csv
;; located in the NetLogo folder
export-plot &quot;Temperature&quot; &quot;c:/My Documents/plot.csv&quot;
;; exports the plot named
;; &quot;Temperature&quot; to the file plot.csv located in
;; the C:\My Documents folder
export-all-plots &quot;c:/My Documents/plots.csv&quot;
;; exports all plots to the file plots.csv
;; located in the C:\My Documents folder
</pre>
      <p>
        If the file already exists, it is overwritten. To avoid this you
        may wish to use some method of generating fresh names. Examples:
      <pre>
export-world user-new-file
export-world (word &quot;results &quot; date-and-time &quot;.csv&quot;) ;; Colon characters in the time cause errors on Windows
export-world (word &quot;results &quot; random-float 1.0 &quot;.csv&quot;)
</pre>
    </div>
    <div class="dict_entry" id="extensions">
      <h3>
        <a>extensions</a>
      </h3>
      <h4>
        <span class="prim_example">extensions [<i>name</i> ...]</span>
      </h4>
      <p>
        Allows the model to use primitives from the extensions with the
        given names. See the <a href="extensions.html">Extensions guide</a>
        for more information.
      </div>
    <div class="dict_entry" id="extract-hsb">
      <h3>
        <a>extract-hsb<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">extract-hsb <i>color</i></span>
      </h4>
      <p>
        Reports a list of three values, the first (hue) in the range of
        0 to 360, the second and third (brightness and saturation) in
        the range of in the range 0 to 100, of the given
        NetLogo <i>color</i> in the range 0 to 140, not including 140
        itself.
      <pre>
show extract-hsb red
=&gt; [3.103 80.93 84.314]
show extract-hsb cyan
=&gt; [180 57.143 76.863]
</pre>
      <p>
        See also <a href="#approximate-hsb">approximate-hsb</a>, <a href="#approximate-rgb">approximate-rgb</a>, <a href="#extract-rgb">extract-rgb</a>.
      </div>
    <div class="dict_entry" id="extract-rgb">
      <h3>
        <a>extract-rgb<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">extract-rgb <i>color</i></span>
      </h4>
      <p>
        Reports a list of three values in the range 0 to 255 representing
        the levels of red, green, and blue, respectively, of the given
        NetLogo <i>color</i> in the range 0 to 140, not including 140
        itself.
      <pre>
show extract-rgb red
=&gt; [215 50 41]
show extract-rgb cyan
=&gt; [84 196 196]
</pre>
      <p>
        See also <a href="#approximate-rgb">approximate-rgb</a>, <a href="#approximate-hsb">approximate-hsb</a>, <a href="#extract-hsb">extract-hsb</a>.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>F</a>
    </h2><!-- ======================================== -->
    <div id="F">
    <div class="dict_entry" id="face">
      <h3>
        <a>face<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">face <i>agent</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Set the caller's heading towards <i>agent</i>.
      <p>
        If wrapping is allowed by the topology and the wrapped distance
        (around the edges of the world) is shorter, face will use the
        wrapped path.
      <p>
        If the caller and the agent are at the exact same position, the
        caller's heading won't change.
      </div>
    <div class="dict_entry" id="facexy">
      <h3>
        <a>facexy<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">facexy <i>number</i> <i>number</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Set the caller's heading towards the point (x,y).
      <p>
        If wrapping is allowed by the topology and the wrapped distance
        (around the edges of the world) is shorter and wrapping is allowed,
        facexy will use the wrapped path.
      <p>
        If the caller is on the point (x,y), the caller's heading
        won't change.
      </div>
    <div class="dict_entry" id="file-at-end">
      <h3>
        <a>file-at-end?<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-at-end?</span>
      </h4>
      <p>
        Reports true when there are no more characters left to read in from
        the current file (that was opened previously with <a href="#file-open">file-open</a>). Otherwise, reports false.
      <pre>
file-open &quot;my-file.txt&quot;
print file-at-end?
=&gt; false ;; Can still read in more characters
print file-read-line
=&gt; This is the last line in file
print file-at-end?
=&gt; true ;; We reached the end of the file
</pre>
      <p>
        See also <a href="#file-open">file-open</a>, <a href="#file-close-all">file-close-all</a>.
      </div>
    <div class="dict_entry" id="file-close">
      <h3>
        <a>file-close<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-close</span>
      </h4>
      <p>
        Closes a file that has been opened previously with <a href="#file-open">file-open</a>.
      <p>
        Note that this and file-close-all are the only ways to restart to
        the beginning of an opened file or to switch between file modes.
      <p>
        If no file is open, does nothing.
      <p>
        See also <a href="#file-close-all">file-close-all</a>, <a href="#file-open">file-open</a>.
      </div>
    <div class="dict_entry" id="file-close-all">
      <h3>
        <a>file-close-all<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-close-all</span>
      </h4>
      <p>
        Closes all files (if any) that have been opened previously with
        <a href="#file-open">file-open</a>.
      <p>
        See also <a href="#file-close">file-close</a>, <a href="#file-open">file-open</a>.
      </div>
    <div class="dict_entry" id="file-delete">
      <h3>
        <a>file-delete<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-delete <i>string</i></span>
      </h4>
      <p>
        Deletes the file specified as <i>string</i>
      <p>
        <i>string</i> must be an existing file with writable permission by
        the user. Also, the file cannot be open. Use the command <a href="#file-close">file-close</a> to close an opened file before
        deletion.
      <p>
        Note that the string can either be a file name or an absolute file
        path. If it is a file name, it looks in whatever the current
        directory is. This can be changed using the command <a href="#set-current-directory">set-current-directory</a>. It is defaulted
        to the model's directory.
      </div>
    <div class="dict_entry" id="file-exists">
      <h3>
        <a>file-exists?<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-exists? <i>string</i></span>
      </h4>
      <p>
        Reports true if <i>string</i> is the name of an existing file on
        the system. Otherwise it reports false.
      <p>
        Note that the string can either be a file name or an absolute file
        path. If it is a file name, it looks in whatever the current
        directory is. This can be changed using the command <a href="#set-current-directory">set-current-directory</a>. It defaults to
        to the model's directory.
      </div>
    <div class="dict_entry" id="file-flush">
      <h3>
        <a>file-flush<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-flush</span>
      </h4>
      <p>
        Forces file updates to be written to disk. When you use file-write
        or other output commands, the values may not be immediately written
        to disk. This improves the performance of the file output commands.
        Closing a file ensures that all output is written to disk.
      <p>
        Sometimes you need to ensure that data is written to disk without
        closing the file. For example, you could be using a file to
        communicate with another program on your machine and want the other
        program to be able to see the output immediately.
      </div>
    <div class="dict_entry" id="file-open">
      <h3>
        <a>file-open<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-open <i>string</i></span>
      </h4>
      <p>
        This command will interpret <i>string</i> as a path name to a file
        and open the file. You may then use the reporters <a href="#file-read">file-read</a>, <a href="#file-read-line">file-read-line</a>, and <a href="#file-read-characters">file-read-characters</a> to read in from
        the file, or <a href="#file-write">file-write</a>, <a href="#file-print">file-print</a>, <a href="#file-type">file-type</a>,
        or <a href="#file-show">file-show</a> to write out to the file.
      <p>
        Note that you can only open a file for reading or writing but not
        both. The next file i/o primitive you use after this command
        dictates which mode the file is opened in. To switch modes, you
        need to close the file using <a href="#file-close">file-close</a>.
      <p>
        Also, the file must already exist if opening a file in reading
        mode.
      <p>
        When opening a file in writing mode, all new data will be appended
        to the end of the original file. If there is no original file, a
        new blank file will be created in its place. (You must have write
        permission in the file's directory.) (If you don't want to
        append, but want to replace the file's existing contents, use
        <a href="#file-delete">file-delete</a> to delete it first, perhaps
        inside a <a href="#carefully">carefully</a> if you're not sure
        whether it already exists.)
      <p>
        Note that the string can either be a file name or an absolute file
        path. If it is a file name, it looks in whatever the current
        directory is. This can be changed using the command <a href="#set-current-directory">set-current-directory</a>. It is defaulted
        to the model's directory.
      <pre>
file-open &quot;my-file-in.txt&quot;
print file-read-line
=&gt; First line in file ;; File is in reading mode
file-open &quot;C:\\NetLogo\\my-file-out.txt&quot;
;; assuming Windows machine
file-print &quot;Hello World&quot; ;; File is in writing mode
</pre>
      <p>
        Opening a file does not close previously opened files. You can use
        <code>file-open</code> to switch back and forth between multiple open
        files.
      <p>
        See also <a href="#file-close">file-close</a> See also <a href="#file-close-all">file-close-all</a>.
      </div>
    <div class="dict_entry" id="file-print">
      <h3>
        <a>file-print<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-print <i>value</i></span>
      </h4>
      <p>
        Prints <i>value</i> to an opened file, followed by a carriage
        return.
      <p>
        This agent is <i>not</i> printed before the value, unlike <a href="#file-show">file-show</a>.
      <p>
        Note that this command is the file i/o equivalent of <a href="#print">print</a>, and <a href="#file-open">file-open</a> needs to
        be called before this command can be used.
      <p>
        See also <a href="#file-show">file-show</a>, <a href="#file-type">file-type</a>, and <a href="#file-write">file-write</a>.
      </div>
    <div class="dict_entry" id="file-read">
      <h3>
        <a>file-read<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-read</span>
      </h4>
      <p>
        This reporter will read in the next constant from the opened file
        and interpret it as if it had been typed in the Command Center. It
        reports the resulting value. The result may be a number, list,
        string, boolean, or the special value nobody.
      <p>
        Whitespace separates the constants. Each call to file-read will
        skip past both leading and trailing whitespace.
      <p>
        Note that strings need to have quotes around them. Use the command
        <a href="#file-write">file-write</a> to have quotes included.
      <p>
        Also note that the <a href="#file-open">file-open</a> command must
        be called before this reporter can be used, and there must be data
        remaining in the file. Use the reporter <a href="#file-at-end">file-at-end?</a> to determine if you are at the end
        of the file.
      <pre>
file-open &quot;my-file.data&quot;
print file-read + 5
;; Next value is the number 1
=&gt; 6
print length file-read
;; Next value is the list [1 2 3 4]
=&gt; 4
</pre>
      <p>
        See also <a href="#file-open">file-open</a> and <a href="#file-write">file-write</a>.
      </div>
    <div class="dict_entry" id="file-read-characters">
      <h3>
        <a>file-read-characters<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-read-characters <i>number</i></span>
      </h4>
      <p>
        Reports the given <i>number</i> of characters from an opened file
        as a string. If there are fewer than that many characters left, it
        will report all of the remaining characters.
      <p>
        Note that it will return every character including newlines and
        spaces.
      <p>
        Also note that the <a href="#file-open">file-open</a> command must
        be called before this reporter can be used, and there must be data
        remaining in the file. Use the reporter <a href="#file-at-end">file-at-end?</a> to determine if you are at the end
        of the file.
      <pre>
file-open &quot;my-file.txt&quot;
print file-read-characters 5
;; Current line in file is &quot;Hello World&quot;
=&gt; Hello
</pre>
      <p>
        See also <a href="#file-open">file-open</a>.
      </div>
    <div class="dict_entry" id="file-read-line">
      <h3>
        <a>file-read-line<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-read-line</span>
      </h4>
      <p>
        Reads the next line in the file and reports it as a string. It
        determines the end of the file by a carriage return, an end of file
        character or both in a row. It does not return the line terminator
        characters.
      <p>
        Also note that the <a href="#file-open">file-open</a> command must
        be called before this reporter can be used, and there must be data
        remaining in the file. Use the reporter <a href="#file-at-end">file-at-end?</a> to determine if you are at the end
        of the file.
      <pre>
file-open &quot;my-file.txt&quot;
print file-read-line
=&gt; Hello World
</pre>
      <p>
        See also <a href="#file-open">file-open</a>.
      </div>
    <div class="dict_entry" id="file-show">
      <h3>
        <a>file-show<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-show <i>value</i></span>
      </h4>
      <p>
        Prints <i>value</i> to an opened file, preceded by this agent
        agent, and followed by a carriage return. (This agent is included
        to help you keep track of what agents are producing which lines of
        output.) Also, all strings have their quotes included similar to
        <a href="#file-write">file-write</a>.
      <p>
        Note that this command is the file i/o equivalent of <a href="#show">show</a>, and <a href="#file-open">file-open</a> needs to
        be called before this command can be used.
      <p>
        See also <a href="#file-print">file-print</a>, <a href="#file-type">file-type</a>, and <a href="#file-write">file-write</a>.
      </div>
    <div class="dict_entry" id="file-type">
      <h3>
        <a>file-type<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-type <i>value</i></span>
      </h4>
      <p>
        Prints <i>value</i> to an opened file, <i>not</i> followed by a
        carriage return (unlike <a href="#file-print">file-print</a> and
        <a href="#file-show">file-show</a>). The lack of a carriage return
        allows you to print several values on the same line.
      <p>
        This agent is <i>not</i> printed before the value. unlike <a href="#file-show">file-show</a>.
      <p>
        Note that this command is the file i/o equivalent of <a href="#type">type</a>, and <a href="#file-open">file-open</a> needs to
        be called before this command can be used.
      <p>
        See also <a href="#file-print">file-print</a>, <a href="#file-show">file-show</a>, and <a href="#file-write">file-write</a>.
      </div>
    <div class="dict_entry" id="file-write">
      <h3>
        <a>file-write<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">file-write <i>value</i></span>
      </h4>
      <p>
        This command will output <i>value</i>, which can be a number,
        string, list, boolean, or nobody to an opened file, <i>not</i>
        followed by a carriage return (unlike <a href="#file-print">file-print</a> and <a href="#file-show">file-show</a>).
      <p>
        This agent is <i>not</i> printed before the value, unlike <a href="#file-show">file-show</a>. Its output also includes quotes around
        strings and is prepended with a space. It will output the value in
        such a manner that <a href="#file-read">file-read</a> will be able
        to interpret it.
      <p>
        Note that this command is the file i/o equivalent of <a href="#write">write</a>, and <a href="#file-open">file-open</a> needs to
        be called before this command can be used.
      <pre>
file-open &quot;locations.txt&quot;
ask turtles
  [ file-write xcor file-write ycor ]
</pre>
      <p>
        See also <a href="#file-print">file-print</a>, <a href="#file-show">file-show</a>, and <a href="#file-type">file-type</a>.
      </div>
    <div class="dict_entry" id="filter">
      <h3>
        <a>filter<span class="since">1.3</span></a>
      </h3>
      <h4>
        <span class="prim_example">filter <i>reporter-task</i> <i>list</i></span>
      </h4>
      <p>
        Reports a list containing only those items of <i>list</i> for which
        the task reports true -- in other words, the items satisfying the
        given condition.
      <pre>
show filter is-number? [1 &quot;2&quot; 3]
=&gt; [1 3]
show filter [? &lt; 3] [1 3 2]
=&gt; [1 2]
show filter [first ? != &quot;t&quot;] [&quot;hi&quot; &quot;there&quot; &quot;everyone&quot;]
=&gt; [&quot;hi&quot; &quot;everyone&quot;]
</pre>
      <p>
        See also <a href="#map">map</a>, <a href="#reduce">reduce</a>,
        <a href="#ques">?</a>.
      </div>
    <div class="dict_entry" id="first">
      <h3>
        <a>first<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">first <i>list</i></span>
        <span class="prim_example">first <i>string</i></span>
      </h4>
      <p>
        On a list, reports the first (0th) item in the list.
      <p>
        On a string, reports a one-character string containing only the
        first character of the original string.
      </div>
    <div class="dict_entry" id="floor">
      <h3>
        <a>floor<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">floor <i>number</i></span>
      </h4>
      <p>
        Reports the largest integer less than or equal to <i>number</i>.
      <pre>
show floor 4.5
=&gt; 4
show floor -4.5
=&gt; -5
</pre>
      <p>
        See also <a href="#ceiling">ceiling</a>, <a href="#round">round</a>, <a href="#precision">precision</a>.
      </div>
    <div class="dict_entry" id="follow">
      <h3>
        <a>follow<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">follow <i>turtle</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Similar to ride, but, in the 3D view, the observer's vantage
        point is behind and above <i>turtle</i>.
      <p>
        See also <a href="#follow-me">follow-me</a>, <a href="#ride">ride</a>, <a href="#reset-perspective">reset-perspective</a>, <a href="#watch">watch</a>, <a href="#subject">subject</a>.
      </div>
    <div class="dict_entry" id="follow-me">
      <h3>
        <a>follow-me<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">follow-me</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Asks the observer to follow this turtle.
      <p>
        See also <a href="#follow">follow</a>.
      </div>
    <div class="dict_entry" id="foreach">
      <h3>
        <a>foreach<span class="since">1.3</span></a>
      </h3>
      <h4>
        <span class="prim_example">foreach <i>list</i> <i>command-task</i></span>
        <span class="prim_example">(foreach <i>list1</i> ... <i>command-task</i>)</span>
      </h4>
      <p>
        With a single list, runs the task for each item of <i>list</i>.
      <pre>
foreach [1.1 2.2 2.6] show
=&gt; 1.1
=&gt; 2.2
=&gt; 2.6
foreach [1.1 2.2 2.6] [ show (word ? &quot; -&gt; &quot; round ?) ]
=&gt; 1.1 -&gt; 1
=&gt; 2.2 -&gt; 2
=&gt; 2.6 -&gt; 3
</pre>
      <p>
        With multiple lists, runs <i>command-task</i> for each group of items
        from each list. So, they are run once for the first items, once for
        the second items, and so on. All the lists must be the same length.
      <p>
        Some examples make this clearer:
      <pre>
(foreach [1 2 3] [2 4 6]
   [ show word &quot;the sum is: &quot; (?1 + ?2) ])
=&gt; &quot;the sum is: 3&quot;
=&gt; &quot;the sum is: 6&quot;
=&gt; &quot;the sum is: 9&quot;
(foreach list (turtle 1) (turtle 2) [3 4]
  [ ask ?1 [ fd ?2 ] ])
;; turtle 1 moves forward 3 patches
;; turtle 2 moves forward 4 patches
</pre>
      <p>
        See also <a href="#map">map</a>, <a href="#ques">?</a>.
      </div>
    <div class="dict_entry" id="forward">
      <h3>
        <a>forward<span class="since">1.0</span></a>
        <a>fd<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">forward <i>number</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle moves forward by <i>number</i> steps, one step at a
        time. (If <i>number</i> is negative, the turtle moves backward.)
      <p>
        <code>fd 10</code> is equivalent to <code>repeat 10 [ jump 1 ]</code>.
        <code>fd 10.5</code> is equivalent to <code>repeat 10 [ jump 1 ] jump
        0.5</code>.
      <p>
        If the turtle cannot move forward <i>number</i> steps because it is
        not permitted by the current topology the turtle will complete as
        many steps of 1 as it can, then stop.
      <p>
        See also <a href="#jump">jump</a>, <a href="#can-move">can-move?</a>.
      </div>
    <div class="dict_entry" id="fput">
      <h3>
        <a>fput<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">fput <i>item list</i></span>
      </h4>
      <p>
        Adds <i>item</i> to the beginning of a list and reports the new
        list.
      <pre>
;; suppose mylist is [5 7 10]
set mylist fput 2 mylist
;; mylist is now [2 5 7 10]
</pre>
    </div><!-- ======================================== -->
  </div>
    <h2>
      <a>G</a>
    </h2><!-- ======================================== -->
    <div id="G">
    <div class="dict_entry" id="globals">
      <h3>
        <a>globals</a>
      </h3>
      <h4>
        <span class="prim_example">globals [<i>var1</i> ...]</span>
      </h4>
      <p>
        This keyword, like the breed, <i>&lt;breeds&gt;</i>-own,
        patches-own, and turtles-own keywords, can only be used at the
        beginning of a program, before any function definitions. It defines
        new global variables. Global variables are &quot;global&quot;
        because they are accessible by all agents and can be used anywhere
        in a model.
      <p>
        Most often, globals is used to define variables or constants that
        need to be used in many parts of the program.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>H</a>
    </h2><!-- ======================================== -->
    <div id="H">
    <div class="dict_entry" id="hatch">
      <h3>
        <a>hatch<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">hatch <i>number</i> [ <i>commands</i> ]</span>
        <span class="prim_example">hatch-<i>&lt;breeds&gt;</i> <i>number</i> [ <i>commands</i> ]</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This turtle creates <i>number</i> new turtles. Each new turtle
        inherits of all its variables, including its location, from its
        parent. (Exceptions: each new turtle will have a new <code>who</code>
        number, and it may be of a different breed than its parent if the
        <code>hatch-<i>&lt;breeds&gt;</i></code> form is used.)
      <p>
        The new turtles then run <i>commands</i>. You can use the commands
        to give the new turtles different colors, headings, locations, or
        whatever. (The new turtles are created all at once, then run one at
        a time, in random order.)
      <p>
        If the hatch-<i>&lt;breeds&gt;</i> form is used, the new turtles
        are created as members of the given breed. Otherwise, the new
        turtles are the same breed as their parent.
      <pre>
hatch 1 [ lt 45 fd 1 ]
;; this turtle creates one new turtle,
;; and the child turns and moves away
hatch-sheep 1 [ set color black ]
;; this turtle creates a new turtle
;; of the sheep breed
</pre>
      <p>
        See also <a href="#create-turtles">create-turtles</a>, <a href="#sprout">sprout</a>.
      </div>
    <div class="dict_entry" id="heading">
      <h3>
        <a>heading</a>
      </h3>
      <h4>
        <span class="prim_example">heading</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in turtle variable. It indicates the direction the
        turtle is facing. This is a number greater than or equal to 0 and
        less than 360. 0 is north, 90 is east, and so on. You can set this
        variable to make a turtle turn.
      <p>
        See also <a href="#right">right</a>, <a href="#left">left</a>,
        <a href="#dxy">dx</a>, <a href="#dxy">dy</a>.
      <p>
        Example:
      <pre>
set heading 45      ;; turtle is now facing northeast
set heading heading + 10 ;; same effect as &quot;rt 10&quot;
</pre>
    </div>
    <div class="dict_entry" id="hidden">
      <h3>
        <a>hidden?</a>
      </h3>
      <h4>
        <span class="prim_example">hidden?</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in turtle or link variable. It holds a boolean
        (true or false) value indicating whether the turtle or link is
        currently hidden (i.e., invisible). You can set this variable to
        make a turtle or link disappear or reappear.
      <p>
        See also <a href="#hide-turtle">hide-turtle</a>, <a href="#show-turtle">show-turtle</a>, <a href="#hide-link">hide-link</a>,
        <a href="#show-link">show-link</a>
      <p>
        Example:
      <pre>
set hidden? not hidden?
;; if turtle was showing, it hides, and if it was hiding,
;; it reappears
</pre>
    </div>
    <div class="dict_entry" id="hide-link">
      <h3>
        <a>hide-link<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">hide-link</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        The link makes itself invisible.
      <p>
        Note: This command is equivalent to setting the link variable
        &quot;hidden?&quot; to true.
      <p>
        See also <a href="#show-turtle">show-link</a>.
      </div>
    <div class="dict_entry" id="hide-turtle">
      <h3>
        <a>hide-turtle<span class="since">1.0</span></a>
        <a>ht<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">hide-turtle</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle makes itself invisible.
      <p>
        Note: This command is equivalent to setting the turtle variable
        &quot;hidden?&quot; to true.
      <p>
        See also <a href="#show-turtle">show-turtle</a>.
      </div>
    <div class="dict_entry" id="histogram">
      <h3>
        <a>histogram<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">histogram <i>list</i></span>
      </h4>
      <p>
        Histograms the values in the given list
      <p>
        Draws a histogram showing the frequency distribution of the values
        in the list. The heights of the bars in the histogram represent the
        numbers of values in each subrange.
      <p>
        Before the histogram is drawn, first any previous points drawn by
        the current plot pen are removed.
      <p>
        Any non-numeric values in the list are ignored.
      <p>
        The histogram is drawn on the current plot using the current plot
        pen and pen color. Auto scaling does not affect a histogram's
        horizontal range, so set-plot-x-range should be used to control the
        range, and the pen interval can then be set (either directly with
        set-plot-pen-interval, or indirectly via set-histogram-num-bars) to
        control how many bars that range is split up into.
      <p>
        Be sure that if you want the histogram drawn with bars that the
        current pen is in bar mode (mode 1).
      <p>
        For histogramming purposes the plot's X range is not considered
        to include the maximum X value. Values equal to the maximum X will
        fall outside of the histogram's range.
      <pre>
histogram [color] of turtles
;; draws a histogram showing how many turtles there are
;; of each color
</pre>
    </div>
    <div class="dict_entry" id="home">
      <h3>
        <a>home<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">home</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This turtle moves to the origin (0,0). Equivalent to <code>setxy 0
        0</code>.
      </div>
    <div class="dict_entry" id="hsb">
      <h3>
        <a>hsb<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">hsb <i>hue saturation brightness</i></span>
      </h4>
      <p>
        Reports a RGB list when given three numbers describing an HSB
        color. Hue, saturation, and brightness are integers in the range
        0-360, 0-100, 0-100 respectively. The RGB list contains three
        integers in the range of 0-255.
      <p>
        See also <a href="#rgb">rgb</a>
      </div>
    <div class="dict_entry" id="hubnet-broadcast">
      <h3>
        <a>hubnet-broadcast<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-broadcast <i>tag-name value</i></span>
      </h4>
      <p>
        This broadcasts <i>value</i> from NetLogo to the interface element
        with the name <i>tag-name</i> on the clients.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details and instructions.
      </div>
    <div class="dict_entry" id="hubnet-broadcast-clear-output">
      <h3>
        <a>hubnet-broadcast-clear-output<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-broadcast-clear-output</span>
      </h4>
      <p>
        This clears all messages printed to the text area on every client.
      <p>
        See also: <a href="#hubnet-broadcast-message">hubnet-broadcast-message</a>, <a href="#hubnet-send-clear-output">hubnet-send-clear-output</a>
      </div>
    <div class="dict_entry" id="hubnet-broadcast-message">
      <h3>
        <a>hubnet-broadcast-message<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-broadcast-message <i>value</i></span>
      </h4>
      <p>
        This prints the value in the text area on each client. This is the
        same functionality as the &quot;Broadcast Message&quot; button in
        the HubNet Control Center.
      <p>
        See also: <a href="#hubnet-send-message">hubnet-send-message</a>
      </div>
    <div class="dict_entry" id="hubnet-clear-override">
      <h3>
        <a>hubnet-clear-override<span class="since">4.1</span></a>
        <a>hubnet-clear-overrides<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-clear-override <i>client</i> <i>agent-or-set</i> <i>variable-name</i></span>
        <span class="prim_example">hubnet-clear-overrides <i>client</i></span>
      </h4>
      <p>
        Remove overrides from the override list on <i>client</i>.
        <code>hubnet-clear-override</code> removes only the override for the
        specified variable for the specified agent or agentset.
        <code>hubnet-clear-overrides</code> removes all overrides from the
        specified client.
      <p>
        See also: <a href="#hubnet-send-override">hubnet-send-override</a>
      </div>
    <div class="dict_entry" id="hubnet-clients-list">
      <h3>
        <a>hubnet-clients-list<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-clients-list</span>
      </h4>
      <p>
        Reports a list containing the names of all the clients currently
        connected to the HubNet server.
      </div>
    <div class="dict_entry" id="hubnet-enter-message">
      <h3>
        <a>hubnet-enter-message?<span class="since">1.2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-enter-message?</span>
      </h4>
      <p>
        Reports true if a new client just entered the simulation. Reports
        false otherwise. <a href="#hubnet-message-source">hubnet-message-source</a> will contain the
        user name of the client that just logged on.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details and instructions.
      </div>
    <div class="dict_entry" id="hubnet-exit-message">
      <h3>
        <a>hubnet-exit-message?<span class="since">1.2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-exit-message?</span>
      </h4>
      <p>
        Reports true if a client just exited the simulation. Reports false
        otherwise. <a href="#hubnet-message-source">hubnet-message-source</a> will contain the
        user name of the client that just logged off.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details and instructions.
      </div>
    <div class="dict_entry" id="hubnet-fetch-message">
      <h3>
        <a>hubnet-fetch-message<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-fetch-message</span>
      </h4>
      <p>
        If there is any new data sent by the clients, this retrieves the
        next piece of data, so that it can be accessed by <a href="#hubnet-message">hubnet-message</a>, <a href="#hubnet-message-source">hubnet-message-source</a>, and <a href="#hubnet-message-tag">hubnet-message-tag</a>. This will cause an
        error if there is no new data from the clients.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details.
      </div>
    <div class="dict_entry" id="hubnet-kick-client">
      <h3>
        <a>hubnet-kick-client<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-kick-client <i>client-name</i></span>
      </h4>
      <p>
        Kicks the client with the given client-name. This is equivalent to
        clicking the client name in the HubNet Control Center and pressing
        the Kick button.
      </div>
    <div class="dict_entry" id="hubnet-kick-all-clients">
      <h3>
        <a>hubnet-kick-all-clients<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-kick-all-clients</span>
      </h4>
      <p>
        Kicks out all currently connected HubNet clients. This is
        equivalent to selecting all clients in the HubNet Control Center
        and pressing the Kick button.
      </div>
    <div class="dict_entry" id="hubnet-message">
      <h3>
        <a>hubnet-message<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-message</span>
      </h4>
      <p>
        Reports the message retrieved by <a href="#hubnet-fetch-message">hubnet-fetch-message</a>.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details.
      </div>
    <div class="dict_entry" id="hubnet-message-source">
      <h3>
        <a>hubnet-message-source<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-message-source</span>
      </h4>
      <p>
        Reports the name of the client that sent the message retrieved by
        <a href="#hubnet-fetch-message">hubnet-fetch-message</a>.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details.
      </div>
    <div class="dict_entry" id="hubnet-message-tag">
      <h3>
        <a>hubnet-message-tag<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-message-tag</span>
      </h4>
      <p>
        Reports the tag that is associated with the data that was retrieved
        by <a href="#hubnet-fetch-message">hubnet-fetch-message</a>. The
        tag will be one of the Display Names of the interface elements in
        the client interface.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details.
      </div>
    <div class="dict_entry" id="hubnet-message-waiting">
      <h3>
        <a>hubnet-message-waiting?<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-message-waiting?</span>
      </h4>
      <p>
        This looks for a new message sent by the clients. It reports true
        if there is one, and false if there is not.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details.
      </div>
    <div class="dict_entry" id="hubnet-reset">
      <h3>
        <a>hubnet-reset<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-reset</span>
      </h4>
      <p>
        Starts up the HubNet system. HubNet must be started to use any of
        the other hubnet primitives with the exception of <a href="#hubnet-set-client-interface"><code>hubnet-set-client-interface</code></a>.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details.
      </div>
    <div class="dict_entry" id="hubnet-reset-perspective">
      <h3>
        <a>hubnet-reset-perspective<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-reset-perspective <i>tag-name</i></span>
      </h4>
      <p>
        Clears watch or follow sent directly to the client. The view
        perspective will revert to the server perspective.
      <p>
        See also: <a href="#hubnet-send-watch">hubnet-send-watch</a>
        <a href="#hubnet-send-follow">hubnet-send-follow</a>
      </div>
    <div class="dict_entry" id="hubnet-send">
      <h3>
        <a>hubnet-send<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-send <i>string tag-name value</i></span>
      </h4>
      <h4>
        <span class="prim_example">hubnet-send <i>list-of-strings tag-name value</i></span>
      </h4>
      <p>
        For a <i>string</i>, this sends <i>value</i> from NetLogo to the
        tag <i>tag-name</i> on the client that has <i>string</i> for its
        user name.
      <p>
        For a <i>list-of-strings</i>, this sends <i>value</i> from NetLogo
        to the tag <i>tag-name</i> on all the clients that have a user name
        that is in the <i>list-of-strings</i>.
      <p>
        Sending a message to a non-existent client, using
        <code>hubnet-send</code>, generates a <code>hubnet-exit-message</code>.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details.
      </div>
    <div class="dict_entry" id="hubnet-send-clear-output">
      <h3>
        <a>hubnet-send-clear-output<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-send-clear-output <i>string</i></span>
      </h4>
      <h4>
        <span class="prim_example">hubnet-send-clear-output <i>list-of-strings</i></span>
      </h4>
      <p>
        This clears all messages printed to the text area on the given
        client or clients (specified in the <i>string</i> or
        <i>list-of-strings</i>.
      <p>
        See also: <a href="#hubnet-send-message">hubnet-send-message</a>,
        <a href="#hubnet-broadcast-clear-output">hubnet-broadcast-clear-output</a>
      </div>
    <div class="dict_entry" id="hubnet-send-follow">
      <h3>
        <a>hubnet-send-follow<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-send-follow <i>client-name agent radius</i></span>
      </h4>
      <p>
        Tells the client associated with <i>client-name</i> to follow
        <i>agent</i> showing a <i>radius</i> sized Moore neighborhood
        around the agent.
      <p>
        See also: <a href="#hubnet-send-watch">hubnet-send-watch</a>,
        <a href="#hubnet-reset-perspective">hubnet-reset-perspective</a>
      </div>
    <div class="dict_entry" id="hubnet-send-message">
      <h3>
        <a>hubnet-send-message<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-send-message <i>string</i> <i>value</i></span>
      </h4>
      <p>
        This prints <code>value</code> in the text area on the client specified
        by <code>string</code>.
      <p>
        See also: <a href="#hubnet-broadcast-message">hubnet-broadcast-message</a>
      </div>
    <div class="dict_entry" id="hubnet-send-override">
      <h3>
        <a>hubnet-send-override<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-send-override <i>client-name agent-or-set variable-name</i></span>
        <span class="prim_example">[ <i>reporter</i> ]</span>
      </h4>
      <p>
        Evaluates <i>reporter</i> for the agent or agentset indicated then
        sends the values to the client to &quot;override&quot; the value of
        <i>variable-name</i> only on <i>client-name</i>. This is used to
        change the appearance of agents in the client view, hence, only
        built-in variables that affect the appearance of the agent may be
        selected. For example, you can override the color variable of a
        turtle:
      <pre>
ask turtles [ hubnet-send-override client-name self &quot;color&quot; [ red ] ]
</pre>
      <p>
        In this example assume that there is a turtles-own variable
        client-name which is associated with a logged in client, and all
        the turtles are blue. This code makes the turtle associated with
        each client appear red in his or her own view but not on anyone
        else's or on the server.
      <p>
        See also: <a href="#hubnet-clear-override">hubnet-clear-overrides</a>
      </div>
    <div class="dict_entry" id="hubnet-send-watch">
      <h3>
        <a>hubnet-send-watch<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-send-watch <i>client-name agent</i></span>
      </h4>
      <p>
        Tells the client associated with <i>client-name</i> to watch
        <i>agent</i>.
      <p>
        See also: <a href="#hubnet-send-follow">hubnet-send-follow</a>,
        <a href="#hubnet-reset-perspective">hubnet-reset-perspective</a>
      </div>
    <div class="dict_entry" id="hubnet-set-client-interface">
      <h3>
        <a>hubnet-set-client-interface<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">hubnet-set-client-interface <i>client-type</i> <i>client-info</i></span>
      </h4>
      <p>
        If <i>client-type</i> is &quot;COMPUTER&quot;, <i>client-info</i>
        is ignored.
      <pre>
hubnet-set-client-interface &quot;COMPUTER&quot; []
</pre>
      <p>
        Future versions of HubNet will support other client types. Even for
        computer clients, the meaning of the second input to this command
        may change.
      <p>
        See the <a href="hubnet-authoring.html">HubNet Authoring Guide</a>
        for details.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>I</a>
    </h2><!-- ======================================== -->
    <div id="I">
    <div class="dict_entry" id="if">
      <h3>
        <a>if<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">if <i>condition</i> [ <i>commands</i> ]</span>
      </h4>
      <p>
        Reporter must report a boolean (true or false) value.
      <p>
        If <i>condition</i> reports true, runs <i>commands</i>.
      <p>
        The reporter may report a different value for different agents, so
        some agents may run <i>commands</i> and others don't.
      <pre>
if xcor &gt; 0[ set color blue ]
;; turtles in the right half of the world
;; turn blue
</pre>
      <p>
        See also <a href="#ifelse">ifelse</a>, <a href="#ifelse-value">ifelse-value</a>.
      </div>
    <div class="dict_entry" id="ifelse">
      <h3>
        <a>ifelse<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">ifelse <i>reporter</i> [ <i>commands1</i> ] [ <i>commands2</i> ]</span>
      </h4>
      <p>
        Reporter must report a boolean (true or false) value.
      <p>
        If <i>reporter</i> reports true, runs <i>commands1</i>.
      <p>
        If <i>reporter</i> reports false, runs <i>commands2</i>.
      <p>
        The reporter may report a different value for different agents, so
        some agents may run <i>commands1</i> while others run
        <i>commands2</i>.
      <pre>
ask patches
  [ ifelse pxcor &gt; 0
      [ set pcolor blue ]
      [ set pcolor red ] ]
;; the left half of the world turns red and
;; the right half turns blue
</pre>
      <p>
        See also <a href="#if">if</a>, <a href="#ifelse-value">ifelse-value</a>.
      </div>
    <div class="dict_entry" id="ifelse-value">
      <h3>
        <a>ifelse-value<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">ifelse-value <i>reporter</i> [<i>reporter1</i>] [<i>reporter2</i>]</span>
      </h4>
      <p>
        Reporter must report a boolean (true or false) value.
      <p>
        If <i>reporter</i> reports true, the result is the value of
        <i>reporter1</i>.
      <p>
        If <i>reporter</i> reports false, the result is the value of
        <i>reporter2</i>.
      <p>
        This can be used when a conditional is needed in the context of a
        reporter, where commands (such as <a href="#ifelse">ifelse</a>) are
        not allowed.
      <pre>
ask patches [
  set pcolor ifelse-value (pxcor &gt; 0) [blue] [red]
]
;; the left half of the world turns red and
;; the right half turns blue
show n-values 10 [ifelse-value (? &lt; 5) [0] [1]]
=&gt; [0 0 0 0 0 1 1 1 1 1]
show reduce [ifelse-value (?1 &gt; ?2) [?1] [?2]]
  [1 3 2 5 3 8 3 2 1]
=&gt; 8
</pre>
      <p>
        See also <a href="#if">if</a>, <a href="#ifelse">ifelse</a>.
      </div>
    <div class="dict_entry" id="import-drawing">
      <h3>
        <a>import-drawing<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">import-drawing <i>filename</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Reads an image file into the drawing, scaling it to the size of the
        world, while retaining the original aspect ratio of the image. The
        image is centered in the drawing. The old drawing is not cleared
        first.
      <p>
        Agents cannot sense the drawing, so they cannot interact with or
        process images imported by import-drawing. If you need agents to
        sense an image, use <a href="#import-pcolors">import-pcolors</a> or
        <a href="#import-pcolors-rgb">import-pcolors-rgb</a>.
      <p>
        The following image file formats are supported: BMP, JPG, GIF, and
        PNG. If the image format supports transparency (alpha), that
        information will be imported as well.
      </div>
    <div class="dict_entry" id="import-pcolors">
      <h3>
        <a>import-pcolors<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">import-pcolors <i>filename</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Reads an image file, scales it to the same dimensions as the patch
        grid while maintaining the original aspect ratio of the image, and
        transfers the resulting pixel colors to the patches. The image is
        centered in the patch grid. The resulting patch colors may be
        distorted, since the NetLogo color space does not include all
        possible colors. (See the Color section of the Programming Guide.)
        import-pcolors may be slow for some images, particularly when you
        have many patches and a large image with many different colors.
      <p>
        Since import-pcolors sets the pcolor of patches, agents can sense
        the image. This is useful if agents need to analyze, process, or
        otherwise interact with the image. If you want to simply display a
        static backdrop, without color distortion, see <a href="#import-drawing">import-drawing</a>.
      <p>
        The following image file formats are supported: BMP, JPG, GIF, and
        PNG. If the image format supports transparency (alpha), then all
        fully transparent pixels will be ignored. (Partially transparent
        pixels will be treated as opaque.)
      </div>
    <div class="dict_entry" id="import-pcolors-rgb">
      <h3>
        <a>import-pcolors-rgb<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">import-pcolors-rgb <i>filename</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Reads an image file, scales it to the same dimensions as the patch
        grid while maintaining the original aspect ratio of the image, and
        transfers the resulting pixel colors to the patches. The image is
        centered in the patch grid. Unlike <a href="#import-pcolors">import-pcolors</a> the exact colors in the
        original image are retained. The pcolor variable of all the patches
        will be an RGB list rather than an (approximated) NetLogo color.
      <p>
        The following image file formats are supported: BMP, JPG, GIF, and
        PNG. If the image format supports transparency (alpha), then all
        fully transparent pixels will be ignored. (Partially transparent
        pixels will be treated as opaque.)
      </div>
    <div class="dict_entry" id="import-world">
      <h3>
        <a>import-world<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">import-world <i>filename</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Reads the values of all variables for a model, both built-in and
        user-defined, including all observer, turtle, and patch variables,
        from an external file named by the given string. The file should be
        in the format used by the <a href="#export-cmds">export-world</a>
        primitive.
      <p>
        Note that the functionality of this primitive is also directly
        available from NetLogo's File menu.
      <p>
        When using import-world, to avoid errors, perform these steps in
        the following order:
      <ol>
        <li>Open the model from which you created the export file.
        <li>Press the Setup button, to get the model in a state from which
        it can be run.
        <li>Import the file.
        <li>Re-open any files that the model had opened with the
        <code>file-open</code> command.
        <li>If you want, press Go button to continue running the model from
        the point where it left off.
        </ol>
      <p>
        If you wish to import a file from a location other than the
        model's location, you may include the full path to the file you
        wish to import. See <a href="#export-cmds">export-world</a> for an
        example.
      </div>
    <div class="dict_entry" id="in-cone">
      <h3>
        <a>in-cone<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>agentset</i> in-cone <i>distance</i> <i>angle</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This reporter lets you give a turtle a &quot;cone of vision&quot;
        in front of itself. The cone is defined by the two inputs, the
        vision distance (radius) and the viewing angle. The viewing angle
        may range from 0 to 360 and is centered around the turtle's
        current heading. (If the angle is 360, then in-cone is equivalent
        to in-radius.)
      <p>
        in-cone reports an agentset that includes only those agents from
        the original agentset that fall in the cone. (This can include the
        agent itself.)
      <p>
        The distance to a patch is measured from the center of the patch.
      <pre>
ask turtles
  [ ask patches in-cone 3 60
      [ set pcolor red ] ]
;; each turtle makes a red &quot;splotch&quot; of patches in a 60 degree
;; cone of radius 3 ahead of itself
</pre>
    </div>
    <div class="dict_entry" id="in-link-neighbor">
      <h3>
        <a>in-&lt;breed&gt;-neighbor?</a>
        <a>in-link-neighbor?<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">in-&lt;breed&gt;-neighbor? <i>agent</i></span>
        <span class="prim_example">in-link-neighbor? <i>turtle</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports true if there is a directed link going from <i>turtle</i>
        to the caller.
      <pre>
crt 2
ask turtle 0 [
  create-link-to turtle 1
  show in-link-neighbor? turtle 1  ;; prints false
  show out-link-neighbor? turtle 1 ;; prints true
]
ask turtle 1 [
  show in-link-neighbor? turtle 0  ;; prints true
  show out-link-neighbor? turtle 0 ;; prints false
]
</pre>
    </div>
    <div class="dict_entry" id="in-link-neighbors">
      <h3>
        <a>in-&lt;breed&gt;-neighbors</a>
        <a>in-link-neighbors<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">in-&lt;breed&gt;-neighbors</span>
        <span class="prim_example">in-link-neighbors</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports the agentset of all the turtles that have directed links
        coming from them to the caller.
      <pre>
crt 4
ask turtle 0 [ create-links-to other turtles ]
ask turtle 1 [ ask in-link-neighbors [ set color blue ] ] ;; turtle 0 turns blue
</pre>
    </div>
    <div class="dict_entry" id="in-link-from">
      <h3>
        <a>in-&lt;breed&gt;-from</a>
        <a>in-link-from<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">in-&lt;breed&gt;-from <i>turtle</i></span>
        <span class="prim_example">in-link-from <i>turtle</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Report the directed link from <i>turtle</i> to the caller. If no
        link exists then it reports nobody.
      <pre>
crt 2
ask turtle 0 [ create-link-to turtle 1 ]
ask turtle 1 [ show in-link-from turtle 0 ] ;; shows link 0 1
ask turtle 0 [ show in-link-from turtle 1 ] ;; shows nobody
</pre>
      <p>
        See also: <a href="#out-link-to">out-link-to</a> <a href="#link-with">link-with</a>
      </div>
    <div class="dict_entry" id="includes">
      <h3>
        <a>__includes</a>
      </h3>
      <h4>
        <span class="prim_example">__includes [ <i>filename</i> ... ]</span>
      </h4>
      <p>
        Causes external NetLogo source files (with the <code>.nls</code>
        suffix) to be included in this model. Included files may contain
        breed, variable, and procedure definitions. <code>__includes</code> can
        only be used once per file.
      </div>
    <div class="dict_entry" id="in-radius">
      <h3>
        <a>in-radius<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>agentset</i> in-radius <i>number</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Reports an agentset that includes only those agents from the
        original agentset whose distance from the caller is less than or
        equal to <i>number</i>. (This can include the agent itself.)
      <p>
        The distance to or a from a patch is measured from the center of
        the patch.
      <pre>
ask turtles
  [ ask patches in-radius 3
      [ set pcolor red ] ]
;; each turtle makes a red &quot;splotch&quot; around itself
</pre>
    </div>
    <div class="dict_entry" id="inspect">
      <h3>
        <a>inspect<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">inspect <i>agent</i></span>
      </h4>
      <p>
        Opens an agent monitor for the given agent (turtle or patch).
      <pre>
inspect patch 2 4
;; an agent monitor opens for that patch
inspect one-of sheep
;; an agent monitor opens for a random turtle from
;; the &quot;sheep&quot; breed
</pre>
      <p>
        See <a href="#stop-inspecting">stop-inspecting</a> and <a href="#stop-inspecting-dead-agents">stop-inspecting-dead-agents</a>
    </div>
    <div class="dict_entry" id="int">
      <h3>
        <a>int<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">int <i>number</i></span>
      </h4>
      <p>
        Reports the integer part of number -- any fractional part is
        discarded.
      <pre>
show int 4.7
=&gt; 4
show int -3.5
=&gt; -3
</pre>
    </div>
    <div class="dict_entry" id="is-of-type">
      <h3>
        <a>is-agent?<span class="since">1.2.1</span></a>
        <a>is-agentset?<span class="since">1.2.1</span></a>
        <a>is-boolean?<span class="since">1.2.1</span></a>
        <a>is-command-task?<span class="since">5.0</span></a>
        <a>is-directed-link?<span class="since">4.0</span></a>
        <a>is-link?<span class="since">4.0</span></a>
        <a>is-link-set?<span class="since">4.0</span></a>
        <a>is-list?<span class="since">1.0</span></a>
        <a>is-number?<span class="since">1.2.1</span></a>
        <a>is-patch?<span class="since">1.2.1</span></a>
        <a>is-patch-set?<span class="since">4.0</span></a>
        <a>is-reporter-task?<span class="since">5.0</span></a>
        <a>is-string?<span class="since">1.0</span></a>
        <a>is-turtle?<span class="since">1.2.1</span></a>
        <a>is-turtle-set?<span class="since">4.0</span></a>
        <a>is-undirected-link?<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">is-agent? <i>value</i></span>
        <span class="prim_example">is-agentset? <i>value</i></span>
        <span class="prim_example">is-boolean? <i>value</i></span>
        <span class="prim_example">is-<i>&lt;breed&gt;</i>? <i>value</i></span>
        <span class="prim_example">is-command-task? <i>value</i></span>
        <span class="prim_example">is-directed-link? <i>value</i></span>
        <span class="prim_example">is-link? <i>value</i></span>
        <span class="prim_example">is-link-set? <i>value</i></span>
        <span class="prim_example">is-list? <i>value</i></span>
        <span class="prim_example">is-number? <i>value</i></span>
        <span class="prim_example">is-patch? <i>value</i></span>
        <span class="prim_example">is-patch-set? <i>value</i></span>
        <span class="prim_example">is-reporter-task? <i>value</i></span>
        <span class="prim_example">is-string? <i>value</i></span>
        <span class="prim_example">is-turtle? <i>value</i></span>
        <span class="prim_example">is-turtle-set? <i>value</i></span>
        <span class="prim_example">is-undirected-link? <i>value</i></span>
      </h4>
      <p>
        Reports true if <i>value</i> is of the given type, false otherwise.
      </div>
    <div class="dict_entry" id="item">
      <h3>
        <a>item<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">item <i>index list</i></span>
        <span class="prim_example">item <i>index string</i></span>
      </h4>
      <p>
        On lists, reports the value of the item in the given list with the
        given index.
      <p>
        On strings, reports the character in the given string at the given
        index.
      <p>
        Note that the indices begin from 0, not 1. (The first item is item
        0, the second item is item 1, and so on.)
      <pre>
;; suppose mylist is [2 4 6 8 10]
show item 2 mylist
=&gt; 6
show item 3 &quot;my-shoe&quot;
=&gt; &quot;s&quot;
</pre>
    </div><!-- ======================================== -->
  </div>
    <h2>
      <a>J</a>
    </h2><!-- ======================================== -->
    <div id="J">
    <div class="dict_entry" id="jump">
      <h3>
        <a>jump<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">jump <i>number</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle moves forward by <i>number</i> units all at once (rather
        than one step at a time as with the <code>forward</code> command).
      <p>
        If the turtle cannot jump <i>number</i> units because it is not
        permitted by the current topology the turtle does not move at all.
      <p>
        See also <a href="#forward">forward</a>, <a href="#can-move">can-move?</a>.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>L</a>
    </h2><!-- ======================================== -->
    <div id="L">
    <div class="dict_entry" id="label">
      <h3>
        <a>label</a>
      </h3>
      <h4>
        <span class="prim_example">label</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in turtle or link variable. It may hold a value of
        any type. The turtle or link appears in the view with the given
        value &quot;attached&quot; to it as text. You can set this variable
        to add, change, or remove a turtle or link's label.
      <p>
        See also <a href="#label-color">label-color</a>, <a href="#plabel">plabel</a>, <a href="#plabel-color">plabel-color</a>.
      <p>
        Example:
      <pre>
ask turtles [ set label who ]
;; all the turtles now are labeled with their
;; who numbers
ask turtles [ set label &quot;&quot; ]
;; all turtles now are not labeled
</pre>
    </div>
    <div class="dict_entry" id="label-color">
      <h3>
        <a>label-color</a>
      </h3>
      <h4>
        <span class="prim_example">label-color</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in turtle or link variable. It holds a number
        greater than or equal to 0 and less than 140. This number
        determines what color the turtle or link's label appears in (if
        it has a label). You can set this variable to change the color of a
        turtle or link's label.
      <p>
        See also <a href="#label">label</a>, <a href="#plabel">plabel</a>,
        <a href="#plabel-color">plabel-color</a>.
      <p>
        Example:
      <pre>
ask turtles [ set label-color red ]
;; all the turtles now have red labels
</pre>
    </div>
    <div class="dict_entry" id="last">
      <h3>
        <a>last<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">last <i>list</i></span>
        <span class="prim_example">last <i>string</i></span>
      </h4>
      <p>
        On a list, reports the last item in the list.
      <p>
        On a string, reports a one-character string containing only the
        last character of the original string.
      </div>
    <div class="dict_entry" id="layout-circle">
      <h3>
        <a>layout-circle<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">layout-circle <i>agentset</i> <i>radius</i></span>
        <span class="prim_example">layout-circle <i>list-of-turtles</i> <i>radius</i></span>
      </h4>
      <p>
        Arranges the given turtles in a circle centered on the patch at the
        center of the world with the given radius. (If the world has an
        even size the center of the circle is rounded down to the nearest
        patch.) The turtles point outwards.
      <p>
        If the first input is an agentset, the turtles are arranged in
        random order.
      <p>
        If the first input is a list, the turtles are arranged clockwise in
        the given order, starting at the top of the circle. (Any
        non-turtles in the list are ignored.)
      <pre>
;; in random order
layout-circle turtles 10
;; in order by who number
layout-circle sort turtles 10
;; in order by size
layout-circle sort-by [[size] of ?1 &lt; [size] of ?2] turtles 10
</pre>
    </div>
    <div class="dict_entry" id="layout-radial">
      <h3>
        <a>layout-radial<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">layout-radial <i>turtle-set</i> <i>link-set</i> <i>root-agent</i></span>
      </h4>
      <p>
        Arranges the turtles in <i>turtle-set</i> connected by links in
        <i>link-set</i>, in a radial tree layout, centered around the
        <i>root-agent</i> which is moved to the center of the world view.
      <p>
        Only links in the <i>link-set</i> will be used to determine the
        layout. If links connect turtles that are not in <i>turtle-set</i>
        those turtles will remain stationary.
      <p>
        Even if the network does contain cycles, and is not a true tree
        structure, this layout will still work, although the results will
        not always be pretty.
      <pre>
to make-a-tree
  set-default-shape turtles &quot;circle&quot;
  crt 6
  ask turtle 0 [
    create-link-with turtle 1
    create-link-with turtle 2
    create-link-with turtle 3
  ]
  ask turtle 1 [
    create-link-with turtle 4
    create-link-with turtle 5
  ]
  ; do a radial tree layout, centered on turtle 0
  layout-radial turtles links (turtle 0)
end
</pre>
    </div>
    <div class="dict_entry" id="layout-spring">
      <h3>
        <a>layout-spring<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">layout-spring <i>turtle-set</i> <i>link-set</i>
          <i>spring-constant</i> <i>spring-length</i> <i>repulsion-constant</i></span>
      </h4>
      <p>
        Arranges the turtles in <i>turtle-set</i>, as if the links in
        <i>link-set</i> are springs and the turtles are repelling each
        other. Turtles that are connected by links in <i>link-set</i> but
        not included in <i>turtle-set</i> are treated as anchors and are
        not moved.
      <p>
        <i>spring-constant</i> is a measure of the &quot;tautness&quot; of
        the spring. It is the &quot;resistance&quot; to change in their
        length. spring-constant is the force the spring would exert if
        it's length were changed by 1 unit.
      <p>
        spring-length is the &quot;zero-force&quot; length or the natural
        length of the springs. This is the length which all springs try to
        achieve either by pushing out their nodes or pulling them in.
      <p>
        repulsion-constant is a measure of repulsion between the nodes. It
        is the force that 2 nodes at a distance of 1 unit will exert on
        each other.
      <p>
        The repulsion effect tries to get the nodes as far as possible from
        each other, in order to avoid crowding and the spring effect tries
        to keep them at &quot;about&quot; a certain distance from the nodes
        they are connected to. The result is the laying out of the whole
        network in a way which highlights relationships among the nodes and
        at the same time is crowded less and is visually pleasing.
      <p>
        The layout algorithm is based on the Fruchterman-Reingold layout
        algorithm. More information about this algorithm can be obtained
        <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.13.8444">here</a>.
      <pre>
to make-a-triangle
  set-default-shape turtles &quot;circle&quot;
  crt 3
  ask turtle 0
  [
    create-links-with other turtles
  ]
  ask turtle 1
  [
    create-link-with turtle 2
  ]
  repeat 30 [ layout-spring turtles links 0.2 5 1 ] ;; lays the nodes in a triangle
end
</pre>
    </div>
    <div class="dict_entry" id="layout-tutte">
      <h3>
        <a>layout-tutte<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">layout-tutte <i>turtle-set</i> <i>link-set</i> <i>radius</i></span>
      </h4>
      <p>
        The turtles that are connected by links in <i>link-set</i> but not
        included in <i>turtle-set</i> are placed in a circle layout with
        the given <i>radius</i>. There should be at least 3 agents in this
        agentset.
      <p>
        The turtles in <i>turtle-set</i> are then laid out in the following
        manner: Each turtle is placed at centroid (or barycenter) of the
        polygon formed by its linked neighbors. (The centroid is like a
        2-dimensional average of the coordinates of the neighbors.)
      <p>
        (The purpose of the circle of &quot;anchor agents&quot; is to
        prevent all the turtles from collapsing down to one point.)
      <p>
        After a few iterations of this, the layout will stabilize.
      <p>
        This layout is named after the mathematician William Thomas Tutte,
        who proposed it as a method for graph layout.
      <pre>
to make-a-tree
  set-default-shape turtles &quot;circle&quot;
  crt 6
  ask turtle 0 [
    create-link-with turtle 1
    create-link-with turtle 2
    create-link-with turtle 3
  ]
  ask turtle 1 [
    create-link-with turtle 4
    create-link-with turtle 5
  ]
  ; place all the turtles with just one
  ; neighbor on the perimeter of a circle
  ; and then place the remaining turtles inside
  ; this circle, spread between their neighbors.
  repeat 10 [ layout-tutte (turtles with [link-neighbors = 1]) links 12 ]
end
</pre>
    </div>
    <div class="dict_entry" id="left">
      <h3>
        <a>left<span class="since">1.0</span></a>
        <a>lt<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">left <i>number</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle turns left by <i>number</i> degrees. (If <i>number</i>
        is negative, it turns right.)
      </div>
    <div class="dict_entry" id="length">
      <h3>
        <a>length<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">length <i>list</i></span>
        <span class="prim_example">length <i>string</i></span>
      </h4>
      <p>
        Reports the number of items in the given list, or the number of
        characters in the given string.
      </div>
    <div class="dict_entry" id="let">
      <h3>
        <a>let<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">let <i>variable</i> <i>value</i></span>
      </h4>
      <p>
        Creates a new local variable and gives it the given value. A local
        variable is one that exists only within the enclosing block of
        commands.
      <p>
        If you want to change the value afterwards, use <a href="#set">set</a>.
      <p>
        Example:
      <pre>
let prey one-of sheep-here
if prey != nobody
  [ ask prey [ die ] ]
</pre>
    </div>
    <div class="dict_entry" id="link">
      <h3>
        <a>link<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">link <i>end1</i> <i>end2</i> &lt;breed&gt; <i>end1</i> <i>end2</i></span>
      </h4>
      <p>
        Given the who numbers of the endpoints, reports the link connecting
        the turtles. If there is no such link reports <code>nobody</code>. To
        refer to breeded links you must use the singular breed form with
        the endpoints.
      <pre>
ask link 0 1 [ set color green ]
;; unbreeded link connecting turtle 0 and turtle 1 will turn green
ask directed-link 0 1 [ set color red ]
;; directed link connecting turtle 0 and turtle 1 will turn red
</pre>
      <p>
        See also <a href="#patch-at">patch-at</a>.
      </div>
    <div class="dict_entry" id="link-heading">
      <h3>
        <a>link-heading<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">link-heading</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        Reports the heading in degrees (at least 0, less than 360) from
        <code>end1</code> to <code>end2</code> of the link. Throws a runtime error
        if the endpoints are at the same location.
      <pre>
ask link 0 1 [ print link-heading ]
;; prints [[towards other-end] of end1] of link 0 1
</pre>
      <p>
        See also <a href="#link-length">link-length</a>
      </div>
    <div class="dict_entry" id="link-length">
      <h3>
        <a>link-length<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">link-length</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        Reports the distance between the endpoints of the link.
      <pre>
ask link 0 1 [ print link-length ]
;; prints [[distance other-end] of end1] of link 0 1
</pre>
      <p>
        See also <a href="#link-heading">link-heading</a>
      </div>
    <div class="dict_entry" id="link-set">
      <h3>
        <a>link-set<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">link-set <i>value</i></span>
        <span class="prim_example">(link-set <i>value1</i> <i>value2</i> ...)</span>
      </h4>
      <p>
        Reports an agentset containing all of the links anywhere in any of
        the inputs. The inputs may be individual links, link agentsets,
        nobody, or lists (or nested lists) containing any of the above.
      <pre>
link-set self
link-set [my-links] of nodes with [color = red]
</pre>
      <p>
        See also <a href="#turtle-set">turtle-set</a>, <a href="#patch-set">patch-set</a>.
      </div>
    <div class="dict_entry" id="link-shapes">
      <h3>
        <a>link-shapes<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">link-shapes</span>
      </h4>
      <p>
        Reports a list of strings containing all of the link shapes in the
        model.
      <p>
        New shapes can be created, or imported from other models, in the
        <a href="shapes.html">Link Shapes Editor</a>.
      <pre>
show link-shapes
=&gt; [&quot;default&quot;]
</pre>
    </div>
    <div class="dict_entry" id="links">
      <h3>
        <a>links<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">links</span>
      </h4>
      <p>
        Reports the agentset consisting of all links.
      <pre>
show count links
;; prints the number of links
</pre>
    </div>
    <div class="dict_entry" id="links-own">
      <h3>
        <a>links-own</a>
      </h3>
      <h4>
        <span class="prim_example">links-own [<i>var1</i> ...]</span>
        <span class="prim_example"><i>&lt;link-breeds&gt;</i>-own [<i>var1</i> ...]</span>
      </h4>
      <p>
        The links-own keyword, like the globals, breed,
        <i>&lt;breeds&gt;</i>-own, turtles-own, and patches-own keywords,
        can only be used at the beginning of a program, before any function
        definitions. It defines the variables belonging to each link.
      <p>
        If you specify a breed instead of &quot;links&quot;, only links of
        that breed have the listed variables. (More than one link breed may
        list the same variable.)
      <pre>
undirected-link-breed [sidewalks sidewalk]
directed-link-breed [streets street]
links-own [traffic]   ;; applies to all breeds
sidewalks-own [pedestrians]
streets-own [cars bikes]
</pre>
      <div class="dict_entry" id="list">
        <h3>
          <a>list<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">list <i>value1</i> <i>value2</i></span>
          <span class="prim_example">(list <i>value1</i> ...)</span>
        </h4>
        <p>
          Reports a list containing the given items. The items can be of
          any type, produced by any kind of reporter.
        <pre>
show list (random 10) (random 10)
=&gt; [4 9]  ;; or similar list
show (list 5)
=&gt; [5]
show (list (random 10) 1 2 3 (random 10))
=&gt; [4 1 2 3 9]  ;; or similar list
</pre>
      </div>
      <div class="dict_entry" id="ln">
        <h3>
          <a>ln<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">ln <i>number</i></span>
        </h4>
        <p>
          Reports the natural logarithm of <i>number</i>, that is, the
          logarithm to the base e (2.71828...).
        <p>
          See also <a href="#num-e">e</a>, <a href="#log">log</a>.
        </div>
      <div class="dict_entry" id="log">
        <h3>
          <a>log<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">log <i>number</i> <i>base</i></span>
        </h4>
        <p>
          Reports the logarithm of <i>number</i> in base <i>base</i>.
        <pre>
show log 64 2
=&gt; 6
</pre>
        <p>
          See also <a href="#ln">ln</a>.
        </div>
      <div class="dict_entry" id="loop">
        <h3>
          <a>loop<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">loop [ <i>commands</i> ]</span>
        </h4>
        <p>
          Repeats the commands forever, or until the enclosing procedure
          exits through use of the <a href="#stop">stop</a> or
          <a href="#report">report</a> commands.
          <pre>to move-to-world-edge  ;; turtle procedure
  loop [
    if not can-move? 1 [ stop ]
    fd 1
  ]
end</pre>
        <p>In this example, <code>stop</code> exits not just the loop,
           but the entire procedure.
        <p>
          Note: in many circumstances, it is more appropriate to use
          a forever button to repeat something indefinitely.  See
          <a href="programming.html#buttons">Buttons</a> in the
          Programming Guide.
        </div>
      <div class="dict_entry" id="lput">
        <h3>
          <a>lput<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">lput <i>value list</i></span>
        </h4>
        <p>
          Adds <i>value</i> to the end of a list and reports the new list.
        <pre>
;; suppose mylist is [2 7 10 &quot;Bob&quot;]
set mylist lput 42 mylist
;; mylist now is [2 7 10 &quot;Bob&quot; 42]
</pre>
      </div><!-- ======================================== -->
    </div>
      <h2>
        <a>M</a>
      </h2><!-- ======================================== -->
      <div id="M">
      <div class="dict_entry" id="map">
        <h3>
          <a>map<span class="since">1.3</span></a>
        </h3>
        <h4>
          <span class="prim_example">map <i>reporter-task</i> <i>list</i></span>
          <span class="prim_example">(map <i>reporter-task</i> <i>list1</i> ...)</span>
        </h4>
        <p>
          With a single <i>list</i>, the given task is run for each item in
          the list, and a list of the results is collected and reported.
        <pre>
show map round [1.1 2.2 2.7]
=&gt; [1 2 3]
show map [? * ?] [1 2 3]
=&gt; [1 4 9]
</pre>
        <p>
          With multiple lists, the given reporter is run for each group of
          items from each list. So, it is run once for the first items,
          once for the second items, and so on. All the lists must be the
          same length.
        <p>
          Some examples make this clearer:
        <pre>
show (map + [1 2 3] [2 4 6])
=&gt; [3 6 9]
show (map [?1 + ?2 = ?3] [1 2 3] [2 4 6] [3 5 9])
=&gt; [true false true]
</pre>
        <p>
          See also <a href="#foreach">foreach</a>, <a href="#ques">?</a>.
        </div>
      <div class="dict_entry" id="max">
        <h3>
          <a>max<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">max <i>list</i></span>
        </h4>
        <p>
          Reports the maximum number value in the list. It ignores other
          types of items.
        <pre>
show max [xcor] of turtles
;; prints the x coordinate of the turtle which is
;; farthest right in the world
show max list a b
;; prints the larger of the two variables a and b
show max (list a b c)
;; prints the largest of the three variables a, b, and c
</pre>
      </div>
      <div class="dict_entry" id="max-n-of">
        <h3>
          <a>max-n-of<span class="since">4.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">max-n-of <i>number</i> <i>agentset</i> [<i>reporter</i>]</span>
        </h4>
        <p>
          Reports an agentset containing <i>number</i> agents from
          <i>agentset</i> with the highest values of <i>reporter</i>. The
          agentset is built by finding all the agents with the highest
          value of <i>reporter</i>, if there are not <i>number</i> agents
          with that value then agents with the second highest value are
          found, and so on. At the end, if there is a tie that would make
          the resulting agentset too large, the tie is broken randomly.
        <pre>
;; assume the world is 11 x 11
show max-n-of 5 patches [pxcor]
;; shows 5 patches with pxcor = max-pxcor
show max-n-of 5 patches with [pycor = 0] [pxcor]
;; shows an agentset containing:
;; (patch 1 0) (patch 2 0) (patch 3 0) (patch 4 0) (patch 5 0)
</pre>
        <p>
          See also <a href="#max-one-of">max-one-of</a>, <a href="#with-max">with-max</a>.
        </div>
      <div class="dict_entry" id="max-one-of">
        <h3>
          <a>max-one-of<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">max-one-of <i>agentset</i> [<i>reporter</i>]</span>
        </h4>
        <p>
          Reports the agent in the agentset that has the highest value for
          the given reporter. If there is a tie this command reports one
          random agent with the highest value. If you want all such agents,
          use with-max instead.
        <pre>
show max-one-of patches [count turtles-here]
<br>;; prints the first patch with the most turtles on it
</pre>
        <p>
          See also <a href="#max-n-of">max-n-of</a>, <a href="#with-max">with-max</a>.
        </div>
      <div class="dict_entry" id="max-pcor">
        <h3>
          <a>max-pxcor<span class="since">3.1</span></a>
          <a>max-pycor<span class="since">3.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">max-pxcor</span>
          <span class="prim_example">max-pycor</span>
        </h4>
        <p>
          These reporters give the maximum x-coordinate and maximum
          y-coordinate, (respectively) for patches, which determines the
          size of the world.
        <p>
          Unlike in older versions of NetLogo the origin does not have to
          be at the center of the world. However, the maximum x- and y-
          coordinates must be greater than or equal to zero.
        <p>
          Note: You can set the size of the world only by editing the view
          -- these are reporters which cannot be set.
        <pre>
crt 100 [ setxy random-float max-pxcor
                random-float max-pycor ]
;; distributes 100 turtles randomly in the
;; first quadrant
</pre>
        <p>
          See also <a href="#min-pcor">min-pxcor</a>, <a href="#min-pcor">min-pycor</a>, <a href="#world-dim">world-width</a>, and <a href="#world-dim">world-height</a>
        </div>
      <div class="dict_entry" id="mean">
        <h3>
          <a>mean<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">mean <i>list</i></span>
        </h4>
        <p>
          Reports the statistical mean of the numeric items in the given
          list. Ignores non-numeric items. The mean is the average, i.e.,
          the sum of the items divided by the total number of items.
        <pre>
show mean [xcor] of turtles
;; prints the average of all the turtles' x coordinates
</pre>
      </div>
      <div class="dict_entry" id="median">
        <h3>
          <a>median<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">median <i>list</i></span>
        </h4>
        <p>
          Reports the statistical median of the numeric items of the given
          list. Ignores non-numeric items. The median is the item that
          would be in the middle if all the items were arranged in order.
          (If two items would be in the middle, the median is the average
          of the two.)
        <pre>
show median [xcor] of turtles
;; prints the median of all the turtles' x coordinates
</pre>
      </div>
      <div class="dict_entry" id="member">
        <h3>
          <a>member?<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">member? <i>value list</i></span>
          <span class="prim_example">member? <i>string1 string2</i></span>
          <span class="prim_example">member? <i>agent agentset</i></span>
        </h4>
        <p>
          For a list, reports true if the given value appears in the given
          list, otherwise reports false.
        <p>
          For a string, reports true or false depending on whether
          <i>string1</i> appears anywhere inside <i>string2</i> as a
          substring.
        <p>
          For an agentset, reports true if the given agent is appears in
          the given agentset, otherwise reports false.
        <pre>
show member? 2 [1 2 3]
=&gt; true
show member? 4 [1 2 3]
=&gt; false
show member? &quot;bat&quot; &quot;abate&quot;
=&gt; true
show member? turtle 0 turtles
=&gt; true
show member? turtle 0 patches
=&gt; false
</pre>
        <p>
          See also <a href="#position">position</a>.
        </div>
      <div class="dict_entry" id="min">
        <h3>
          <a>min<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">min <i>list</i></span>
        </h4>
        <p>
          Reports the minimum number value in the list. It ignores other
          types of items.
        <pre>
show min [xcor] of turtles
;; prints the lowest x-coordinate of all the turtles
show min list a b
;; prints the smaller of the two variables a and b
show min (list a b c)
;; prints the smallest of the three variables a, b, and c
</pre>
      </div>
      <div class="dict_entry" id="min-n-of">
        <h3>
          <a>min-n-of<span class="since">4.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">min-n-of <i>number</i> <i>agentset</i> [<i>reporter</i>]</span>
        </h4>
        <p>
          Reports an agentset containing <i>number</i> agents from
          <i>agentset</i> with the lowest values of <i>reporter</i>. The
          agentset is built by finding all the agents with the lowest value
          of <i>reporter</i>, if there are not <i>number</i> agents with
          that value then the agents with the second lowest value are
          found, and so on. At the end, if there is a tie that would make
          the resulting agentset too large, the tie is broken randomly.
        <pre>
;; assume the world is 11 x 11
show min-n-of 5 patches [pxcor]
;; shows 5 patches with pxcor = min-pxcor
show min-n-of 5 patches with [pycor = 0] [pxcor]
;; shows an agentset containing:
;; (patch -5 0) (patch -4 0) (patch -3 0) (patch -2 0) (patch -1 0)
</pre>
        <p>
          See also <a href="#min-one-of">min-one-of</a>, <a href="#with-min">with-min</a>.
        </div>
      <div class="dict_entry" id="min-one-of">
        <h3>
          <a>min-one-of<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">min-one-of <i>agentset</i> [<i>reporter</i>]</span>
        </h4>
        <p>
          Reports a random agent in the agentset that reports the lowest
          value for the given reporter. If there is a tie, this command
          reports one random agent that meets the condition. If you want
          all such agents use with-min instead.
        <pre>
show min-one-of turtles [xcor + ycor]
;; reports the first turtle with the smallest sum of
;; coordinates
</pre>
        <p>
          See also <a href="#with-min">with-min</a>, <a href="#min-n-of">min-n-of</a>.
        </div>
      <div class="dict_entry" id="min-pcor">
        <h3>
          <a>min-pxcor<span class="since">3.1</span></a>
          <a>min-pycor<span class="since">3.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">min-pxcor</span>
          <span class="prim_example">min-pycor</span>
        </h4>
        <p>
          These reporters give the minimum x-coordinate and minimum
          y-coordinate, (respectively) for patches, which determines the
          size of the world.
        <p>
          Unlike in older versions of NetLogo the origin does not have to
          be at the center of the world. However, the minimum x- and y-
          coordinates must be less than or equal to zero.
        <p>
          Note: You can set the size of the world only by editing the view
          -- these are reporters which cannot be set.
        <pre>
crt 100 [ setxy random-float min-pxcor
                random-float min-pycor ]
;; distributes 100 turtles randomly in the
;; third quadrant
</pre>
        <p>
          See also <a href="#max-pcor">max-pxcor</a>, <a href="#max-pcor">max-pycor</a>, <a href="#world-dim">world-width</a>, and <a href="#world-dim">world-height</a>
        </div>
      <div class="dict_entry" id="mod">
        <h3>
          <a>mod<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example"><i>number1</i> mod <i>number2</i></span>
        </h4>
        <p>
          Reports <i>number1</i> modulo <i>number2</i>: that is, the
          residue of <i>number1</i> (mod <i>number2</i>). mod is is
          equivalent to the following NetLogo code:
        <pre>
<i>number1</i> - (floor (<i>number1</i> / <i>number2</i>)) * <i>number2</i>
</pre>
        <p>
          Note that mod is &quot;infix&quot;, that is, it comes between its
          two inputs.
        <pre>
show 62 mod 5
=&gt; 2
show -8 mod 3
=&gt; 1
</pre>
        <p>
          See also <a href="#remainder">remainder</a>. mod and remainder
          behave the same for positive numbers, but differently for
          negative numbers.
        </div>
      <div class="dict_entry" id="modes">
        <h3>
          <a>modes<span class="since">2.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">modes <i>list</i></span>
        </h4>
        <p>
          Reports a list of the most common item or items in <i>list</i>.
        <p>
          The input list may contain any NetLogo values.
        <p>
          If the input is an empty list, reports an empty list.
        <pre>
show modes [1 2 2 3 4]
=&gt; [2]
show modes [1 2 2 3 3 4]
=&gt; [2 3]
show modes [ [1 2 [3]] [1 2 [3]] [2 3 4] ]
=&gt; [[1 2 [3]]]
show modes [pxcor] of turtles
;; shows which columns of patches have the most
;; turtles on them
</pre>
      </div>
      <div class="dict_entry" id="mouse-down">
        <h3>
          <a>mouse-down?<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">mouse-down?</span>
        </h4>
        <p>
          Reports true if the mouse button is down, false otherwise.
        <p>
          Note: If the mouse pointer is outside of the current view ,
          mouse-down? will always report false.
        </div>
      <div class="dict_entry" id="mouse-inside">
        <h3>
          <a>mouse-inside?<span class="since">3.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">mouse-inside?</span>
        </h4>
        <p>
          Reports true if the mouse pointer is inside the current view,
          false otherwise.
        </div>
      <div class="dict_entry" id="mouse-cor">
        <h3>
          <a>mouse-xcor<span class="since">1.0</span></a>
          <a>mouse-ycor<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">mouse-xcor</span>
          <span class="prim_example">mouse-ycor</span>
        </h4>
        <p>
          Reports the x or y coordinate of the mouse in the 2D view. The
          value is in terms of turtle coordinates, so it might not be an
          integer. If you want patch coordinates, use <code>round
          mouse-xcor</code> and <code>round mouse-ycor</code>.
        <p>
          Note: If the mouse is outside of the 2D view, reports the value
          from the last time it was inside.
        <pre>
;; to make the mouse &quot;draw&quot; in red:
if mouse-down?
  [ ask patch mouse-xcor mouse-ycor [ set pcolor red ] ]
</pre>
      </div>
      <div class="dict_entry" id="move-to">
        <h3>
          <a>move-to<span class="since">4.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">move-to <i>agent</i></span>
          <img alt="Turtle Command" src="images/turtle.gif">
        </h4>
        <p>
          The turtle sets its x and y coordinates to be the same as the
          given agent's.
        <p>
          (If that agent is a patch, the effect is to move the turtle to
          the center of that patch.)
        <pre>
move-to turtle 5
;; turtle moves to same point as turtle 5
move-to one-of patches
;; turtle moves to the center of a random patch
move-to max-one-of turtles [size]
;; turtle moves to same point as biggest turtle
</pre>
        <p>
          Note that the turtle's heading is unaltered. You may want to
          use the <a href="#face">face</a> command first to orient the
          turtle in the direction of motion.
        <p>
          See also <a href="#setxy">setxy</a>.
        </div>
      <div class="dict_entry" id="movie-cancel">
        <h3>
          <a>movie-cancel<span class="since">2.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">movie-cancel</span>
        </h4>
        <p>
          Cancels the current movie.
        </div>
      <div class="dict_entry" id="movie-close">
        <h3>
          <a>movie-close<span class="since">2.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">movie-close</span>
        </h4>
        <p>
          Stops the recording of the current movie.
        </div>
      <div class="dict_entry" id="movie-grab-view">
        <h3>
          <a>movie-grab-view<span class="since">3.0</span></a>
          <a>movie-grab-interface<span class="since">2.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">movie-grab-view</span>
          <span class="prim_example">movie-grab-interface</span>
        </h4>
        <p>
          Adds an image of the current view (2D or 3D) or the interface
          panel to the current movie.
        <pre>
;; make a 20-step movie of the current view
setup
movie-start &quot;out.mov&quot;
repeat 20 [
  movie-grab-view
  go
]
movie-close
</pre>
      </div>
      <div class="dict_entry" id="movie-set-frame-rate">
        <h3>
          <a>movie-set-frame-rate<span class="since">2.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">movie-set-frame-rate <i>frame-rate</i></span>
        </h4>
        <p>
          Sets the frame rate of the current movie. The frame rate is
          measured in frames per second. (If you do not explicitly set the
          frame rate, it defaults to 15 frames per second.)
        <p>
          Must be called after <a href="#movie-start">movie-start</a>, but
          before <a href="#movie-grab-view">movie-grab-view</a> or <a href="#movie-grab-view">movie-grab-interface</a>.
        <p>
          See also <a href="#movie-status">movie-status</a>.
        </div>
      <div class="dict_entry" id="movie-start">
        <h3>
          <a>movie-start<span class="since">2.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">movie-start <i>filename</i></span>
        </h4>
        <p>
          Creates a new movie. <i>filename</i> specifies a new QuickTime
          file where the movie will be saved, so it should end with
          &quot;<code>.mov</code>&quot;.
        <p>
          See also <a href="#movie-grab-view">movie-grab-view</a>, <a href="#movie-grab-view">movie-grab-interface</a>, <a href="#movie-cancel">movie-cancel</a>, <a href="#movie-status">movie-status</a>, <a href="#movie-set-frame-rate">movie-set-frame-rate</a>, <a href="#movie-close">movie-close</a>.
        </div>
      <div class="dict_entry" id="movie-status">
        <h3>
          <a>movie-status<span class="since">2.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">movie-status</span>
        </h4>
        <p>
          Reports a string describing the current movie.
        <pre>
print movie-status
=&gt; No movie.
movie-start
print movie-status
=&gt; 0 frames; frame rate = 15.
movie-grab-view
print movie-status
1 frames; frame rate = 15; size = 315x315.
</pre>
      </div>
      <div class="dict_entry" id="my-links">
        <h3>
          <a>my-&lt;breeds&gt;</a>
          <a>my-links<span class="since">4.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">my-&lt;breeds&gt;</span>
          <span class="prim_example">my-links</span>
          <img alt="Turtle Command" src="images/turtle.gif">
        </h4>
        <p>
          Reports an agentset of all undirected links connected to the
          caller.
        <pre>
crt 5
ask turtle 0
[
  create-links-with other turtles
  show my-links ;; prints the agentset containing all links
                ;; (since all the links we created were with turtle 0 )
]
ask turtle 1
[
  show my-links ;; shows an agentset containing the link 0 1
]
end
</pre>
      </div>
      <div class="dict_entry" id="my-in-links">
        <h3>
          <a>my-in-&lt;breeds&gt;</a>
          <a>my-in-links<span class="since">4.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">my-in-&lt;breeds&gt;</span>
          <span class="prim_example">my-in-links</span>
          <img alt="Turtle Command" src="images/turtle.gif">
        </h4>
        <p>
          Reports an agentset of all the directed links coming in from
          other nodes to the caller.
        <pre>
crt 5
ask turtle 0
[
  create-links-to other turtles
  show my-in-links ;; shows an empty agentset
]
ask turtle 1
[
  show my-in-links ;; shows an agentset containing the link 0 1
]
</pre>
      </div>
      <div class="dict_entry" id="my-out-links">
        <h3>
          <a>my-out-&lt;breeds&gt;</a>
          <a>my-out-links<span class="since">4.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">my-out-&lt;breeds&gt;</span>
          <span class="prim_example">my-out-links</span>
          <img alt="Turtle Command" src="images/turtle.gif">
        </h4>
        <p>
          Reports an agentset of all the directed links going out from the
          caller to other nodes.
        <pre>
crt 5
ask turtle 0
[
  create-links-to other turtles
  show my-out-links ;; shows agentset containing all the links
]
ask turtle 1
[
  show my-out-links ;; shows an empty agentset
]
</pre>
      </div>
      <div class="dict_entry" id="myself">
        <h3>
          <a>myself<span class="since">1.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">myself</span>
          <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif"> <img alt="Link Command" src="images/link.gif">
        </h4>
        <p>
          &quot;self&quot; and &quot;myself&quot; are very different.
          &quot;self&quot; is simple; it means &quot;me&quot;.
          &quot;myself&quot; means &quot;the turtle, patch or link who asked me
          to do what I'm doing right now.&quot;
        <p>
          When an agent has been asked to run some code, using myself in
          that code reports the agent (turtle, patch or link) that did the
          asking.
        <p>
          myself is most often used in conjunction with <code>of</code> to read
          or set variables in the asking agent.
        <p>
          myself can be used within blocks of code not just in the ask
          command, but also hatch, sprout, of, with, all?, with-min,
          with-max, min-one-of, max-one-of, min-n-of, max-n-of.
        <pre>
ask turtles
  [ ask patches in-radius 3
      [ set pcolor [color] of myself ] ]
;; each turtle makes a colored &quot;splotch&quot; around itself
</pre>
        <p>
          See the &quot;Myself Example&quot; code example for more
          examples.
        <p>
          See also <a href="#self">self</a>.
        </div><!-- ======================================== -->
      </div>
      <h2>
        <a>N</a>
      </h2><!-- ======================================== -->
      <div id="N">
      <div class="dict_entry" id="n-of">
        <h3>
          <a>n-of<span class="since">3.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">n-of <i>size</i> <i>agentset</i></span>
          <span class="prim_example">n-of <i>size</i> <i>list</i></span>
        </h4>
        <p>
          From an agentset, reports an agentset of size <i>size</i>
          randomly chosen from the input set, with no repeats.
        <p>
          From a list, reports a list of size <i>size</i> randomly chosen
          from the input set, with no repeats. The items in the result
          appear in the same order that they appeared in the input list.
          (If you want them in random order, use shuffle on the result.)
        <p>
          It is an error for <i>size</i> to be greater than the size of the
          input.
        <pre>
ask n-of 50 patches [ set pcolor green ]
;; 50 randomly chosen patches turn green
</pre>
        <p>
          See also <a href="#one-of">one-of</a>.
        </div>
      <div class="dict_entry" id="n-values">
        <h3>
          <a>n-values<span class="since">2.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">n-values <i>size</i> <i>reporter-task</i></span>
        </h4>
        <p>
          Reports a list of length <i>size</i> containing values computed
          by repeatedly running the task.
        <p>
          If the task accepts inputs, the input will be the number of the
          item currently being computed, starting from zero.
        <pre>
show n-values 5 [1]
=&gt; [1 1 1 1 1]
show n-values 5 [?]
=&gt; [0 1 2 3 4]
show n-values 3 turtle
=&gt; [(turtle 0) (turtle 1) (turtle 2)]
show n-values 5 [? * ?]
=&gt; [0 1 4 9 16]
</pre>
        <p>
          See also <a href="#reduce">reduce</a>, <a href="#filter">filter</a>, <a href="#ques">?</a>.
        </div>
      <div class="dict_entry" id="neighbors">
        <h3>
          <a>neighbors<span class="since">1.1</span></a>
          <a>neighbors4<span class="since">1.1</span></a>
        </h3>
        <h4>
          <span class="prim_example">neighbors</span>
          <span class="prim_example">neighbors4</span>
          <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
        </h4>
        <p>
          Reports an agentset containing the 8 surrounding patches
          (neighbors) or 4 surrounding patches (neighbors4).
        <pre>
show sum [count turtles-here] of neighbors
  ;; prints the total number of turtles on the eight
  ;; patches around this turtle or patch
show count turtles-on neighbors
  ;; a shorter way to say the same thing
ask neighbors4 [ set pcolor red ]
  ;; turns the four neighboring patches red
</pre>
      </div>
      <div class="dict_entry" id="link-neighbors">
        <h3>
          <a>&lt;breed&gt;-neighbors</a>
          <a>link-neighbors<span class="since">4.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">&lt;breed&gt;-neighbors</span>
          <span class="prim_example">link-neighbors</span>
          <img alt="Turtle Command" src="images/turtle.gif">
        </h4>
        <p>
          Reports the agentset of all turtles found at the other end of
          undirected links connected to this turtle.
        <pre>
crt 3
ask turtle 0
[
  create-links-with other turtles
  ask link-neighbors [ set color red ] ;; turtles 1 and 2 turn red
]
ask turtle 1
[
  ask link-neighbors [ set color blue ] ;; turtle 0 turns blue
]
end
</pre>
      </div>
      <div class="dict_entry" id="link-neighbor">
        <h3>
          <a>&lt;breed&gt;-neighbor?</a>
          <a>link-neighbor?<span class="since">4.0</span></a>
        </h3>
        <h4>
          <span class="prim_example">&lt;breed&gt;-neighbor? <i>turtle</i></span>
          <span class="prim_example">link-neighbor? <i>turtle</i></span>
          <img alt="Turtle Command" src="images/turtle.gif">
        </h4>
        <p>
          Reports true if there is an undirected link between <i>turtle</i>
          and the caller.
        <pre>
crt 2
ask turtle 0
[
  create-link-with turtle 1
  show link-neighbor? turtle 1  ;; prints true
]
ask turtle 1
[
  show link-neighbor? turtle 0     ;; prints true
]
</pre>
      </div>
    </div>
    <div class="dict_entry" id="netlogo-applet">
      <h3>
        <a>netlogo-applet?<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">netlogo-applet?</span>
      </h4>
      <p>
        Reports true if the model is running as an applet.
      </div>
    <div class="dict_entry" id="netlogo-version">
      <h3>
        <a>netlogo-version<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">netlogo-version</span>
      </h4>
      <p>
        Reports a string containing the version number of the NetLogo you
        are running.
      <pre>
show netlogo-version
=&gt; &quot;{{version}}&quot;
</pre>
    </div>
    <div class="dict_entry" id="netlogo-web">
      <h3>
        <a>netlogo-web?<span class="since">5.2</span></a>
      </h3>
      <h4>
        <span class="prim_example">netlogo-web?</span>
      </h4>
      <p>
        Reports true if the model is running in NetLogo Web.
      </div>
    <div class="dict_entry" id="new-seed">
      <h3>
        <a>new-seed<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">new-seed</span>
      </h4>
      <p>
        Reports a number suitable for seeding the random number generator.
      <p>
        The numbers reported by new-seed are based on the current date and
        time in milliseconds and lie in the generator's usable range of
        seeds, -2147483648 to 2147483647.
      <p>
        new-seed never reports the same number twice in succession. (This
        is accomplished by waiting a millisecond if the seed for the
        current millisecond was already used.)
      <p>
        See also <a href="#random-seed">random-seed</a>.
      </div>
    <div class="dict_entry" id="no-display">
      <h3>
        <a>no-display<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">no-display</span>
      </h4>
      <p>
        Turns off all updates to the current view until the display command
        is issued. This has two major uses.
      <p>
        One, you can control when the user sees view updates. You might
        want to change lots of things on the view behind the user's
        back, so to speak, then make them visible to the user all at once.
      <p>
        Two, your model will run faster when view updating is off, so if
        you're in a hurry, this command will let you get results
        faster. (Note that normally you don't need to use no-display
        for this, since you can also use the on/off switch in view control
        strip to freeze the view.)
      <p>
        Note that display and no-display operate independently of the
        switch in the view control strip that freezes the view.
      <p>
        See also <a href="#display">display</a>.
      </div>
    <div class="dict_entry" id="nobody">
      <h3>
        <a>nobody</a>
      </h3>
      <h4>
        <span class="prim_example">nobody</span>
      </h4>
      <p>
        This is a special value which some primitives such as turtle,
        one-of, max-one-of, etc. report to indicate that no agent was
        found. Also, when a turtle dies, it becomes equal to nobody.
      <p>
        Note: Empty agentsets are not equal to nobody. If you want to test
        for an empty agentset, use <a href="#any">any?</a>. You only get
        nobody back in situations where you were expecting a single agent,
        not a whole agentset.
      <pre>
set target one-of other turtles-here
if target != nobody
  [ ask target [ set color red ] ]
</pre>
    </div>
    <div class="dict_entry" id="no-links">
      <h3>
        <a>no-links<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">no-links</span>
      </h4>
      <p>
        Reports an empty link agentset.
    </div>
    <div class="dict_entry" id="no-patches">
      <h3>
        <a>no-patches<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">no-patches</span>
      </h4>
      <p>
        Reports an empty patch agentset.
    </div>
    <div class="dict_entry" id="not">
      <h3>
        <a>not<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">not <i>boolean</i></span>
      </h4>
      <p>
        Reports true if <i>boolean</i> is false, otherwise reports false.
      <pre>
if not any? turtles [ crt 10 ]
</pre>
    </div>
    <div class="dict_entry" id="no-turtles">
      <h3>
        <a>no-turtles<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">no-turtles</span>
      </h4>
      <p>
        Reports an empty turtle agentset.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>O</a>
    </h2><!-- ======================================== -->
    <div id="O">
    <div class="dict_entry" id="of">
      <h3>
        <a>of<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">[<i>reporter</i>] of <i>agent</i></span>
        <span class="prim_example">[<i>reporter</i>] of <i>agentset</i></span>
      </h4>
      <p>
        For an agent, reports the value of the reporter for that agent
        (turtle or patch).
      <pre>
show [pxcor] of patch 3 5
;; prints 3
show [pxcor] of one-of patches
;; prints the value of a random patch's pxcor variable
show [who * who] of turtle 5
=&gt; 25
show [count turtles in-radius 3] of patch 0 0
;; prints the number of turtles located within a
;; three-patch radius of the origin
</pre>
      <p>
        For an agentset, reports a list that contains the value of the
        reporter for each agent in the agentset (in random order).
      <pre>
crt 4
show sort [who] of turtles
=&gt; [0 1 2 3]
show sort [who * who] of turtles
=&gt; [0 1 4 9]
</pre>
    </div>
    <div class="dict_entry" id="one-of">
      <h3>
        <a>one-of<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">one-of <i>agentset</i></span>
        <span class="prim_example">one-of <i>list</i></span>
      </h4>
      <p>
        From an agentset, reports a random agent. If the agentset is empty,
        reports <a href="#nobody">nobody</a>.
      <p>
        From a list, reports a random list item. It is an error for the
        list to be empty.
      <pre>
ask one-of patches [ set pcolor green ]
;; a random patch turns green
ask patches with [any? turtles-here]
  [ show one-of turtles-here ]
;; for each patch containing turtles, prints one of
;; those turtles

;; suppose mylist is [1 2 3 4 5 6]
show one-of mylist
;; prints a value randomly chosen from the list
</pre>
      <p>
        See also <a href="#n-of">n-of</a>.
      </div>
    <div class="dict_entry" id="or">
      <h3>
        <a>or<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>boolean1</i> or <i>boolean2</i></span>
      </h4>
      <p>
        Reports true if either <i>boolean1</i> or <i>boolean2</i>, or both,
        is true.
      <p>
        Note that if <i>condition1</i> is true, then <i>condition2</i> will
        not be run (since it can't affect the result).
      <pre>
if (pxcor &gt; 0) or (pycor &gt; 0) [ set pcolor red ]
;; patches turn red except in lower-left quadrant
</pre>
    </div>
    <div class="dict_entry" id="other">
      <h3>
        <a>other<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">other <i>agentset</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Reports an agentset which is the same as the input agentset but
        omits this agent.
      <pre>
show count turtles-here
=&gt; 10
show count other turtles-here
=&gt; 9
</pre>
    </div>
    <div class="dict_entry" id="other-end">
      <h3>
        <a>other-end<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">other-end</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        If run by a turtle, reports the turtle at the other end of the
        asking link.
      <p>
        If run by a link, reports the turtle at the end of the link that
        isn't the asking turtle.
      <p>
        These definitions are difficult to understand in the abstract, but
        the following examples should help:
      <pre>
ask turtle 0 [ create-link-with turtle 1 ]
ask turtle 0 [ ask link 0 1 [ show other-end ] ] ;; prints turtle 1
ask turtle 1 [ ask link 0 1 [ show other-end ] ] ;; prints turtle 0
ask link 0 1 [ ask turtle 0 [ show other-end ] ] ;; prints turtle 1
</pre>
      <p>
        As these examples hopefully make plain, the &quot;other&quot; end
        is the end that is neither asking nor being asked.
      </div>
    <div class="dict_entry" id="out-link-neighbor">
      <h3>
        <a>out-&lt;breed&gt;-neighbor?</a>
        <a>out-link-neighbor?<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">out-&lt;breed&gt;-neighbor? <i>turtle</i></span>
        <span class="prim_example">out-link-neighbor? <i>turtle</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports true if there is a directed link going from the caller to
        <i>turtle</i>.
      <pre>
crt 2
ask turtle 0 [
  create-link-to turtle 1
  show in-link-neighbor? turtle 1  ;; prints false
  show out-link-neighbor? turtle 1 ;; prints true
]
ask turtle 1 [
  show in-link-neighbor? turtle 0  ;; prints true
  show out-link-neighbor? turtle 0 ;; prints false
]
</pre>
    </div>
    <div class="dict_entry" id="out-link-neighbors">
      <h3>
        <a>out-&lt;breed&gt;-neighbors</a>
        <a>out-link-neighbors<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">out-&lt;breed&gt;-neighbors</span>
        <span class="prim_example">out-link-neighbors</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports the agentset of all the turtles that have directed links
        from the caller.
      <pre>
crt 4
ask turtle 0
[
  create-links-to other turtles
  ask out-link-neighbors [ set color pink ] ;; turtles 1-3 turn pink
]
ask turtle 1
[
  ask out-link-neighbors [ set color orange ]  ;; no turtles change colors
                                               ;; since turtle 1 only has in-links
]
end
</pre>
    </div>
    <div class="dict_entry" id="out-link-to">
      <h3>
        <a>out-&lt;breed&gt;-to</a>
        <a>out-link-to<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">out-&lt;breed&gt;-to <i>turtle</i></span>
        <span class="prim_example">out-link-to <i>turtle</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports the directed link from the caller to <i>turtle</i>. If no
        link exists then it reports nobody.
      <pre>
crt 2
ask turtle 0 [
  create-link-to turtle 1
  show out-link-to turtle 1 ;; shows link 0 1
]
ask turtle 1
[
  show out-link-to turtle 0 ;; shows nobody
]
</pre>
      <p>
        See also: <a href="#in-link-from">in-link-from</a> <a href="#link-with">link-with</a>
      </div>
    <div class="dict_entry" id="output-cmds">
      <h3>
        <a>output-print<span class="since">2.1</span></a>
        <a>output-show<span class="since">2.1</span></a>
        <a>output-type<span class="since">2.1</span></a>
        <a>output-write<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">output-print <i>value</i></span>
        <span class="prim_example">output-show <i>value</i></span>
        <span class="prim_example">output-type <i>value</i></span>
        <span class="prim_example">output-write <i>value</i></span>
      </h4>
      <p>
        These commands are the same as the <a href="#print">print</a>,
        <a href="#show">show</a>, <a href="#type">type</a>, and <a href="#write">write</a> commands except that <i>value</i> is printed in
        the model's output area, instead of in the Command Center. (If
        the model does not have a separate output area, then the Command
        Center is used.)
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>P</a>
    </h2><!-- ======================================== -->
    <div id="P">
    <div class="dict_entry" id="patch">
      <h3>
        <a>patch<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">patch <i>xcor</i> <i>ycor</i></span>
      </h4>
      <p>
        Given the x and y coordinates of a point, reports the patch
        containing that point. (The coordinates are absolute coordinates;
        they are not computed relative to this agent, as with patch-at.)
      <p>
        If x and y are integers, the point is the center of a patch. If x
        or y is not an integer, rounding to the nearest integer is used to
        determine which patch contains the point.
      <p>
        If wrapping is allowed by the topology, the given coordinates will
        be wrapped to be within the world. If wrapping is not allowed and
        the given coordinates are outside the world, reports nobody.
      <pre>
ask patch 3 -4 [ set pcolor green ]
;; patch with pxcor of 3 and pycor of -4 turns green
show patch 1.2 3.7
;; prints (patch 1 4); note rounding
show patch 18 19
;; supposing min-pxcor and min-pycor are -17
;; and max-pxcor and max-pycor are 17,
;; in a wrapping topology, prints (patch -17 -16);
;; in a non-wrapping topology, prints nobody
</pre>
      <p>
        See also <a href="#patch-at">patch-at</a>.
      </div>
    <div class="dict_entry" id="patch-ahead">
      <h3>
        <a>patch-ahead<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">patch-ahead <i>distance</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports the single patch that is the given distance
        &quot;ahead&quot; of this turtle, that is, along the turtle's
        current heading. Reports nobody if the patch does not exist because
        it is outside the world.
      <pre>
ask patch-ahead 1 [ set pcolor green ]
;; turns the patch 1 in front of this turtle
;;   green; note that this might be the same patch
;;   the turtle is standing on
</pre>
      <p>
        See also <a href="#patch-at">patch-at</a>, <a href="#patch-lr-and-ahead">patch-left-and-ahead</a>, <a href="#patch-lr-and-ahead">patch-right-and-ahead</a>, <a href="#patch-at-heading-and-distance">patch-at-heading-and-distance</a>.
      </div>
    <div class="dict_entry" id="patch-at">
      <h3>
        <a>patch-at<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">patch-at <i>dx</i> <i>dy</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Reports the patch at (dx, dy) from the caller, that is, the patch
        containing the point dx east and dy patches north of this agent.
      <p>
        Reports nobody if there is no such patch because that point is
        beyond a non-wrapping world boundary.
      <pre>
ask patch-at 1 -1 [ set pcolor green ]
;; if caller is a turtle or patch, turns the
;;   patch just southeast of the caller green
</pre>
      <p>
        See also <a href="#patch">patch</a>, <a href="#patch-ahead">patch-ahead</a>, <a href="#patch-lr-and-ahead">patch-left-and-ahead</a>, <a href="#patch-lr-and-ahead">patch-right-and-ahead</a>, <a href="#patch-at-heading-and-distance">patch-at-heading-and-distance</a>.
      </div>
    <div class="dict_entry" id="patch-at-heading-and-distance">
      <h3>
        <a>patch-at-heading-and-distance<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">patch-at-heading-and-distance <i>heading</i> <i>distance</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        patch-at-heading-and-distance reports the single patch that is the
        given distance from this turtle or patch, along the given absolute
        heading. (In contrast to patch-left-and-ahead and
        patch-right-and-ahead, this turtle's current heading is not
        taken into account.) Reports nobody if the patch does not exist
        because it is outside the world.
      <pre>
ask patch-at-heading-and-distance -90 1 [ set pcolor green ]
;; turns the patch 1 to the west of this patch green
</pre>
      <p>
        See also <a href="#patch">patch</a>, <a href="#patch-at">patch-at</a>, <a href="#patch-lr-and-ahead">patch-left-and-ahead</a>, <a href="#patch-lr-and-ahead">patch-right-and-ahead</a>.
      </div>
    <div class="dict_entry" id="patch-here">
      <h3>
        <a>patch-here<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">patch-here</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        patch-here reports the patch under the turtle.
      <p>
        Note that this reporter isn't available to a patch because a
        patch can just say &quot;self&quot;.
      </div>
    <div class="dict_entry" id="patch-lr-and-ahead">
      <h3>
        <a>patch-left-and-ahead<span class="since">2.0</span></a>
        <a>patch-right-and-ahead<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">patch-left-and-ahead <i>angle</i> <i>distance</i></span>
        <span class="prim_example">patch-right-and-ahead <i>angle</i> <i>distance</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Reports the single patch that is the given distance from this
        turtle, in the direction turned left or right the given angle (in
        degrees) from the turtle's current heading. Reports nobody if
        the patch does not exist because it is outside the world.
      <p>
        (If you want to find a patch in a given absolute heading, rather
        than one relative to the current turtle's heading, use
        patch-at-heading-and-distance instead.)
      <pre>
ask patch-right-and-ahead 30 1 [ set pcolor green ]
;; this turtle &quot;looks&quot; 30 degrees right of its
;;   current heading at the patch 1 unit away, and turns
;;   that patch green; note that this might be the same
;;   patch the turtle is standing on
</pre>
      <p>
        See also <a href="#patch">patch</a>, <a href="#patch-at">patch-at</a>, <a href="#patch-at-heading-and-distance">patch-at-heading-and-distance</a>.
      </div>
    <div class="dict_entry" id="patch-set">
      <h3>
        <a>patch-set<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">patch-set <i>value1</i></span>
        <span class="prim_example">(patch-set <i>value1</i> <i>value2</i> ...)</span>
      </h4>
      <p>
        Reports an agentset containing all of the patches anywhere in any
        of the inputs. The inputs may be individual patches, patch
        agentsets, nobody, or lists (or nested lists) containing any of the
        above.
      <pre>
patch-set self
patch-set patch-here
(patch-set self neighbors)
(patch-set patch-here neighbors)
(patch-set patch 0 0 patch 1 3 patch 4 -2)
(patch-set patch-at -1 1 patch-at 0 1 patch-at 1 1)
patch-set [patch-here] of turtles
patch-set [neighbors] of turtles
</pre>
      <p>
        See also <a href="#turtle-set">turtle-set</a>, <a href="#link-set">link-set</a>.
      </div>
    <div class="dict_entry" id="patch-size">
      <h3>
        <a>patch-size<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">patch-size</span>
      </h4>
      <p>
        Reports the size of the patches in the view in pixels. The size is
        typically an integer, but may also be a floating point number.
      <p>
        See also <a href="#set-patch-size">set-patch-size</a>.
      </div>
    <div class="dict_entry" id="patches">
      <h3>
        <a>patches<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">patches</span>
      </h4>
      <p>
        Reports the agentset consisting of all patches.
      </div>
    <div class="dict_entry" id="patches-own">
      <h3>
        <a>patches-own</a>
      </h3>
      <h4>
        <span class="prim_example">patches-own [<i>var1</i> ...]</span>
      </h4>
      <p>
        This keyword, like the globals, breed, <i>&lt;breed&gt;</i>-own,
        and turtles-own keywords, can only be used at the beginning of a
        program, before any function definitions. It defines the variables
        that all patches can use.
      <p>
        All patches will then have the given variables and be able to use
        them.
      <p>
        All patch variables can also be directly accessed by any turtle
        standing on the patch.
      <p>
        See also <a href="#globals">globals</a>, <a href="#turtles-own">turtles-own</a>, <a href="#breed">breed</a>,
        <a href="#turtles-own"><i>&lt;breeds&gt;</i>-own</a>.
      </div>
    <div class="dict_entry" id="pcolor">
      <h3>
        <a>pcolor</a>
      </h3>
      <h4>
        <span class="prim_example">pcolor</span>
        <img alt="Patch Command" src="images/patch.gif"> <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in patch variable. It holds the color of the patch.
        You can set this variable to make the patch change color.
      <p>
        All patch variables can be directly accessed by any turtle standing
        on the patch. Color can be represented either as a NetLogo color (a
        single number) or an RGB color (a list of 3 numbers). See details
        in the <a href="programming.html#colors">Colors section</a> of the
        Programming Guide.
      <p>
        See also <a href="#color">color</a>.
      </div>
    <div class="dict_entry" id="pen-switch-status">
      <h3>
        <a>pen-down<span class="since">1.0</span></a>
        <a>pd<span class="since">1.0</span></a>
        <a>pen-erase<span class="since">3.0</span></a>
        <a>pe<span class="since">3.0</span></a>
        <a>pen-up<span class="since">1.0</span></a>
        <a>pu<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">pen-down</span>
        <span class="prim_example">pen-erase</span>
        <span class="prim_example">pen-up</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle changes modes between drawing lines, removing lines or
        neither. The lines will always be displayed on top of the patches
        and below the turtles. To change the color of the pen set the color
        of the turtle using <code>set color</code>.
      <p>
        Note: When a turtle's pen is down, all movement commands cause
        lines to be drawn, including jump, setxy, and move-to.
      <p>
        Note: These commands are equivalent to setting the turtle variable
        &quot;pen-mode&quot; to &quot;down&quot; , &quot;up&quot;, and
        &quot;erase&quot;.
      <p>
        Note: On Windows drawing and erasing a line might not erase every
        pixel.
      </div>
    <div class="dict_entry" id="pen-mode">
      <h3>
        <a>pen-mode</a>
      </h3>
      <h4>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in turtle variable. It holds the state of the
        turtle's pen. You set the variable to draw lines, erase lines
        or stop either of these actions. Possible values are
        &quot;up&quot;, &quot;down&quot;, and &quot;erase&quot;.
      </div>
    <div class="dict_entry" id="pen-size">
      <h3>
        <a>pen-size</a>
      </h3>
      <h4>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in turtle variable. It holds the width of the line,
        in pixels, that the turtle will draw (or erase) when the pen is
        down (or erasing).
      </div>
    <div class="dict_entry" id="plabel">
      <h3>
        <a>plabel</a>
      </h3>
      <h4>
        <span class="prim_example">plabel</span>
        <img alt="Patch Command" src="images/patch.gif"> <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in patch variable. It may hold a value of any type.
        The patch appears in the view with the given value
        &quot;attached&quot; to it as text. You can set this variable to
        add, change, or remove a patch's label.
      <p>
        All patch variables can be directly accessed by any turtle standing
        on the patch.
      <p>
        See also <a href="#plabel-color">plabel-color</a>, <a href="#label">label</a>, <a href="#label-color">label-color</a>.
      </div>
    <div class="dict_entry" id="plabel-color">
      <h3>
        <a>plabel-color</a>
      </h3>
      <h4>
        <span class="prim_example">plabel-color</span>
        <img alt="Patch Command" src="images/patch.gif"> <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in patch variable. It holds a number greater than
        or equal to 0 and less than 140. This number determines what color
        the patch's label appears in (if it has a label). You can set
        this variable to change the color of a patch's label.
      <p>
        All patch variables can be directly accessed by any turtle standing
        on the patch.
      <p>
        See also <a href="#plabel">plabel</a>, <a href="#label">label</a>,
        <a href="#label-color">label-color</a>.
      </div>
    <div class="dict_entry" id="plot">
      <h3>
        <a>plot<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">plot <i>number</i></span>
      </h4>
      <p>
        Increments the x-value of the plot pen by plot-pen-interval, then
        plots a point at the updated x-value and a y-value of
        <i>number</i>. (The first time the command is used on a plot, the
        point plotted has an x-value of 0.)
      </div>
    <div class="dict_entry" id="plot-name">
      <h3>
        <a>plot-name<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">plot-name</span>
      </h4>
      <p>
        Reports the name of the current plot (a string)
      </div>
    <div class="dict_entry" id="plot-pen-exists">
      <h3>
        <a>plot-pen-exists?<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">plot-pen-exists? <i>string</i></span>
      </h4>
      <p>
        Reports true if a plot pen with the given name is defined in the
        current plot. Otherwise reports false.
      </div>
    <div class="dict_entry" id="plot-pen-switch-status">
      <h3>
        <a>plot-pen-down<span class="since">1.0</span></a>
        <a>plot-pen-up<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">plot-pen-down</span>
        <span class="prim_example">plot-pen-up</span>
      </h4>
      <p>
        Puts down (or up) the current plot-pen, so that it draws (or
        doesn't). (By default, all pens are down initially.)
      </div>
    <div class="dict_entry" id="plot-pen-reset">
      <h3>
        <a>plot-pen-reset<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">plot-pen-reset</span>
      </h4>
      <p>
        Clears everything the current plot pen has drawn, moves it to
        (0,0), and puts it down. If the pen is a permanent pen, the color,
        mode, and interval are reset to the default values from the plot
        Edit dialog.
      </div>
    <div class="dict_entry" id="plotxy">
      <h3>
        <a>plotxy<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">plotxy <i>number1 number2</i></span>
      </h4>
      <p>
        Moves the current plot pen to the point with coordinates
        (<i>number1</i>, <i>number2</i>). If the pen is down, a line, bar,
        or point will be drawn (depending on the pen's mode).
      </div>
    <div class="dict_entry" id="plot-cor-max-or-min">
      <h3>
        <a>plot-x-min<span class="since">1.0</span></a>
        <a>plot-x-max<span class="since">1.0</span></a>
        <a>plot-y-min<span class="since">1.0</span></a>
        <a>plot-y-max<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">plot-x-min</span>
        <span class="prim_example">plot-x-max</span>
        <span class="prim_example">plot-y-min</span>
        <span class="prim_example">plot-y-max</span>
      </h4>
      <p>
        Reports the minimum or maximum value on the x or y axis of the
        current plot.
      <p>
        These values can be set with the commands set-plot-x-range and
        set-plot-y-range. (Their default values are set from the plot Edit
        dialog.)
      </div>
    <div class="dict_entry" id="position">
      <h3>
        <a>position<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">position <i>item</i> <i>list</i></span>
        <span class="prim_example">position <i>string1</i> <i>string2</i></span>
      </h4>
      <p>
        On a list, reports the first position of <i>item</i> in
        <i>list</i>, or false if it does not appear.
      <p>
        On strings, reports the position of the first appearance
        <i>string1</i> as a substring of <i>string2</i>, or false if it
        does not appear.
      <p>
        Note: The positions are numbered beginning with 0, not with 1.
      <pre>
;; suppose mylist is [2 7 4 7 &quot;Bob&quot;]
show position 7 mylist
=&gt; 1
show position 10 mylist
=&gt; false
show position &quot;in&quot; &quot;string&quot;
=&gt; 3
</pre>
      <p>
        See also <a href="#member">member?</a>.
      </div>
    <div class="dict_entry" id="precision">
      <h3>
        <a>precision<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">precision <i>number places</i></span>
      </h4>
      <p>
        Reports <i>number</i> rounded to <i>places</i> decimal places.
      <p>
        If <i>places</i> is negative, the rounding takes place to the left
        of the decimal point.
      <pre>
show precision 1.23456789 3
=&gt; 1.235
show precision 3834 -3
=&gt; 4000
</pre>
      <p>
        See also <a href="#round">round</a>, <a href="#ceiling">ceiling</a>, <a href="#floor">floor</a>.
      </div>
    <div class="dict_entry" id="print">
      <h3>
        <a>print<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">print <i>value</i></span>
      </h4>
      <p>
        Prints <i>value</i> in the Command Center, followed by a carriage
        return.
      <p>
        This agent is <i>not</i> printed before the value, unlike <a href="#show">show</a>.
      <p>
        See also <a href="#show">show</a>, <a href="#type">type</a>, and
        <a href="#write">write</a>.
      <p>
        See also <a href="#output-cmds">output-print</a>.
      </div>
    <div class="dict_entry" id="pcor">
      <h3>
        <a>pxcor</a>
        <a>pycor</a>
      </h3>
      <h4>
        <span class="prim_example">pxcor</span>
        <span class="prim_example">pycor</span>
        <img alt="Patch Command" src="images/patch.gif"> <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        These are built-in patch variables. They hold the x and y
        coordinate of the patch. They are always integers. You cannot set
        these variables, because patches don't move.
      <p>
        pxcor is greater than or equal to min-pxcor and less than or equal
        to max-pxcor; similarly for pycor and min-pycor and max-pycor.
      <p>
        All patch variables can be directly accessed by any turtle standing
        on the patch.
      <p>
        See also <a href="#xcor">xcor</a>, <a href="#ycor">ycor</a>.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>R</a>
    </h2><!-- ======================================== -->
    <div id="R">
    <div class="dict_entry" id="random">
      <h3>
        <a>random<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">random <i>number</i></span>
      </h4>
      <p>
        If <i>number</i> is positive, reports a random integer greater than
        or equal to 0, but strictly less than <i>number</i>.
      <p>
        If <i>number</i> is negative, reports a random integer less than or
        equal to 0, but strictly greater than <i>number</i>.
      <p>
        If <i>number</i> is zero, the result is always 0 as well.
      <p>
        Note: In versions of NetLogo prior to version 2.0, this primitive
        reported a floating point number if given a non-integer input. This
        is no longer the case. If you want a floating point answer, you
        must now use <a href="#random-float">random-float</a> instead.
      <pre>
show random 3
;; prints 0, 1,  or 2
show random -3
;; prints 0, -1, or -2
show random 3.5
;; prints 0, 1, 2, or 3
</pre>
      <p>
        See also <a href="#random-float">random-float</a>.
      </div>
    <div class="dict_entry" id="random-float">
      <h3>
        <a>random-float<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">random-float <i>number</i></span>
      </h4>
      <p>
        If <i>number</i> is positive, reports a random floating point
        number greater than or equal to 0 but strictly less than
        <i>number</i>.
      <p>
        If <i>number</i> is negative, reports a random floating point
        number less than or equal to 0, but strictly greater than
        <i>number</i>.
      <p>
        If <i>number</i> is zero, the result is always 0.
      <pre>
show random-float 3
;; prints a number at least 0 but less than 3,
;; for example 2.589444906014774
show random-float 2.5
;; prints a number at least 0 but less than 2.5,
;; for example 1.0897423196760796
</pre>
    </div>
    <div class="dict_entry" id="random-reporters">
      <h3>
        <a>random-exponential<span class="since">1.2.1</span></a>
        <a>random-gamma<span class="since">2.0</span></a>
        <a>random-normal<span class="since">1.2.1</span></a>
        <a>random-poisson<span class="since">1.2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">random-exponential <i>mean</i></span>
        <span class="prim_example">random-gamma <i>alpha lambda</i></span>
        <span class="prim_example">random-normal <i>mean standard-deviation</i></span>
        <span class="prim_example">random-poisson <i>mean</i></span>
      </h4>
      <p>
        Reports an accordingly distributed random number with the
        <i>mean</i> and, in the case of the normal distribution, the
        <i>standard-deviation</i>. (The standard deviation may not be
        negative.)
      <p>
        random-exponential reports an exponentially distributed random
        floating point number. It is equivalent to <code>(- <i>mean</i>) * ln
        random-float 1.0</code>.
      <p>
        random-gamma reports a gamma-distributed random floating point
        number as controlled by the floating point alpha and lambda
        parameters. Both inputs must be greater than zero. (Note: for
        results with a given mean and variance, use inputs as follows:
        alpha = mean * mean / variance; lambda = 1 / (variance / mean).)
      <p>
        random-normal reports a normally distributed random floating point
        number.
      <p>
        random-poisson reports a Poisson-distributed random integer.
      <pre>
show random-exponential 2
;; prints an exponentially distributed random floating
;; point number with a mean of 2
show random-normal 10.1 5.2
;; prints a normally distributed random floating point
;; number with a mean of 10.1 and a standard deviation
;; of 5.2
show random-poisson 3.4
;; prints a Poisson-distributed random integer with a
;; mean of 3.4
</pre>
    </div>
    <div class="dict_entry" id="random-pcor">
      <h3>
        <a>random-pxcor<span class="since">3.1</span></a>
        <a>random-pycor<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">random-pxcor</span>
        <span class="prim_example">random-pycor</span>
      </h4>
      <p>
        Reports a random integer ranging from min-pxcor (or -y) to
        max-pxcor (or -y) inclusive.
      <pre>
ask turtles [
  ;; move each turtle to the center of a random patch
  setxy random-pxcor random-pycor
]
</pre>
      <p>
        See also <a href="#random-cor">random-xcor</a>, <a href="#random-cor">random-ycor</a>.
      </div>
    <div class="dict_entry" id="random-seed">
      <h3>
        <a>random-seed<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">random-seed <i>number</i></span>
      </h4>
      <p>
        Sets the seed of the pseudo-random number generator to the integer
        part of <i>number</i>. The seed must be in the range -2147483648 to
        2147483647; note that this is smaller than the full range of
        integers supported by NetLogo (-9007199254740992 to
        9007199254740992).
      <p>
        See the <a href="programming.html#random">Random Numbers</a>
        section of the Programming Guide for more details.
      <pre>
random-seed 47822
show random 100
=&gt; 50
show random 100
=&gt; 35
random-seed 47822
show random 100
=&gt; 50
show random 100
=&gt; 35
</pre>
    </div>
    <div class="dict_entry" id="random-cor">
      <h3>
        <a>random-xcor<span class="since">3.1</span></a>
        <a>random-ycor<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">random-xcor</span>
        <span class="prim_example">random-ycor</span>
      </h4>
      <p>
        Reports a random floating point number from the allowable range of
        turtle coordinates along the given axis, x or y.
      <p>
        Turtle coordinates range from min-pxcor - 0.5 (inclusive) to
        max-pxcor + 0.5 (exclusive) horizontally; vertically, substitute -y
        for -x.
      <pre>
ask turtles [
  ;; move each turtle to a random point
  setxy random-xcor random-ycor
]
</pre>
      <p>
        See also <a href="#random-pcor">random-pxcor</a>, <a href="#random-pcor">random-pycor</a>.
      </div>
    <div class="dict_entry" id="read-from-string">
      <h3>
        <a>read-from-string<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">read-from-string <i>string</i></span>
      </h4>
      <p>
        Interprets the given string as if it had been typed in the Command
        Center, and reports the resulting value. The result may be a
        number, list, string, or boolean value, or the special value
        &quot;nobody&quot;.
      <p>
        Useful in conjunction with the <a href="#user-input">user-input</a>
        primitive for converting the user's input into usable form.
      <pre>
show read-from-string &quot;3&quot; + read-from-string &quot;5&quot;
=&gt; 8
show length read-from-string &quot;[1 2 3]&quot;
=&gt; 3
crt read-from-string user-input &quot;Make how many turtles?&quot;
;; the number of turtles input by the user
;; are created
</pre>
    </div>
    <div class="dict_entry" id="reduce">
      <h3>
        <a>reduce<span class="since">1.3</span></a>
      </h3>
      <h4>
        <span class="prim_example">reduce <i>reporter-task</i> <i>list</i></span>
      </h4>
      <p>
        Reduces a list from left to right using the given task, resulting
        in a single value. This means, for example, that <code>reduce [?1 +
        ?2] [1 2 3 4]</code> is equivalent to <i>(((1 + 2) + 3) + 4)</i>. If
        <i>list</i> has a single item, that item is reported. It is an
        error to reduce an empty list.
      <p>
        The first input passed to the task is the result so far, and the
        second input is the next item in the list.
      <p>
        Since it can be difficult to develop an intuition about what
        <code>reduce</code> does, here are some simple examples which, while
        not useful in themselves, may give you a better understanding of
        this primitive:
      <pre>
show reduce + [1 2 3]
=&gt; 6
show reduce - [1 2 3]
=&gt; -4
show reduce [?2 - ?1] [1 2 3]
=&gt; 2
show reduce [?1] [1 2 3]
=&gt; 1
show reduce [?2] [1 2 3]
=&gt; 3
show reduce sentence [[1 2] [3 [4]] 5]
=&gt; [1 2 3 [4] 5]
show reduce [fput ?2 ?1] (fput [] [1 2 3 4 5])
=&gt; [5 4 3 2 1]
</pre>
      <p>
        Here are some more useful examples:
      <pre>
;; find the longest string in a list
to-report longest-string [strings]
  report reduce
    [ifelse-value (length ?1 &gt;= length ?2) [?1] [?2]]
    strings
end

show longest-string [&quot;hi&quot; &quot;there&quot; &quot;!&quot;]
=&gt; &quot;there&quot;

;; count the number of occurrences of an item in a list
to-report occurrences [x the-list]
  report reduce
    [ifelse-value (?2 = x) [?1 + 1] [?1]] (fput 0 the-list)
end

show occurrences 1 [1 2 1 3 1 2 3 1 1 4 5 1]
=&gt; 6

;; evaluate the polynomial, with given coefficients, at x
to-report evaluate-polynomial [coefficients x]
  report reduce [(x * ?1) + ?2] coefficients
end

;; evaluate 3x^2 + 2x + 1 at x = 4
show evaluate-polynomial [3 2 1] 4
=&gt; 57
</pre>
    </div>
    <div class="dict_entry" id="remainder">
      <h3>
        <a>remainder<span class="since">1.2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">remainder <i>number1</i> <i>number2</i></span>
      </h4>
      <p>
        Reports the remainder when <i>number1</i> is divided by
        <i>number2</i>. This is equivalent to the following NetLogo code:
      <pre>
<i>number1</i> - (int (<i>number1</i> / <i>number2</i>)) * <i>number2</i>
</pre>
      <pre>
show remainder 62 5
=&gt; 2
show remainder -8 3
=&gt; -2
</pre>
      <p>
        See also <a href="#mod">mod</a>. mod and remainder behave the same
        for positive numbers, but differently for negative numbers.
      </div>
    <div class="dict_entry" id="remove">
      <h3>
        <a>remove<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">remove <i>item</i> <i>list</i></span>
        <span class="prim_example">remove <i>string1</i> <i>string2</i></span>
      </h4>
      <p>
        For a list, reports a copy of <i>list</i> with all instances of
        <i>item</i> removed.
      <p>
        For strings, reports a copy of <i>string2</i> with all the
        appearances of <i>string1</i> as a substring removed.
      <pre>
set mylist [2 7 4 7 &quot;Bob&quot;]
set mylist remove 7 mylist
;; mylist is now [2 4 &quot;Bob&quot;]
show remove &quot;to&quot; &quot;phototonic&quot;
=&gt; &quot;phonic&quot;
</pre>
    </div>
    <div class="dict_entry" id="remove-duplicates">
      <h3>
        <a>remove-duplicates<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">remove-duplicates <i>list</i></span>
      </h4>
      <p>
        Reports a copy of <i>list</i> with all duplicate items removed. The
        first of each item remains in place.
      <pre>
set mylist [2 7 4 7 &quot;Bob&quot; 7]
set mylist remove-duplicates mylist
;; mylist is now [2 7 4 &quot;Bob&quot;]
</pre>
    </div>
    <div class="dict_entry" id="remove-item">
      <h3>
        <a>remove-item<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">remove-item <i>index</i> <i>list</i></span>
        <span class="prim_example">remove-item <i>index</i> <i>string</i></span>
      </h4>
      <p>
        For a list, reports a copy of <i>list</i> with the item at the
        given index removed.
      <p>
        For strings, reports a copy of <i>string2</i> with the character at
        the given index removed.
      <p>
        Note that the indices begin from 0, not 1. (The first item is item
        0, the second item is item 1, and so on.)
      <pre>
set mylist [2 7 4 7 &quot;Bob&quot;]
set mylist remove-item 2 mylist
;; mylist is now [2 7 7 &quot;Bob&quot;]
show remove-item 2 &quot;string&quot;
=&gt; &quot;sting&quot;
</pre>
    </div>
    <div class="dict_entry" id="repeat">
      <h3>
        <a>repeat<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">repeat <i>number</i> [ <i>commands</i> ]</span>
      </h4>
      <p>
        Runs <i>commands</i> <i>number</i> times.
      <pre>

 pd repeat 36 [ fd 1 rt 10 ]
 ;; the turtle draws a circle

</pre>
    </div>
    <div class="dict_entry" id="replace-item">
      <h3>
        <a>replace-item<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">replace-item <i>index list value</i></span>
        <span class="prim_example">replace-item <i>index string1 string2</i></span>
      </h4>
      <p>
        On a list, replaces an item in that list. <i>index</i> is the index
        of the item to be replaced, starting with 0. (The 6th item in a
        list would have an index of 5.) Note that &quot;replace-item&quot;
        is used in conjunction with &quot;set&quot; to change a list.
      <p>
        Likewise for a string, but the given character of <i>string1</i>
        removed and the contents of <i>string2</i> spliced in instead.
      <pre>
show replace-item 2 [2 7 4 5] 15
=&gt; [2 7 15 5]
show replace-item 1 &quot;cat&quot; &quot;are&quot;
=&gt; &quot;caret&quot;
</pre>
    </div>
    <div class="dict_entry" id="report">
      <h3>
        <a>report<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">report <i>value</i></span>
      </h4>
      <p>
        Immediately exits from the current to-report procedure and reports
        <i>value</i> as the result of that procedure. report and to-report
        are always used in conjunction with each other. See <a href="#to-report">to-report</a> for a discussion of how to use them.
      </div>
    <div class="dict_entry" id="reset-perspective">
      <h3>
        <a>reset-perspective<span class="since">3.0</span></a>
        <a>rp<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">reset-perspective</span>
      </h4>
      <p>
        The observer stops watching, following, or riding any turtles (or
        patches). (If it wasn't watching, following, or riding anybody,
        nothing happens.) In the 3D view, the observer also returns to its
        default position (above the origin, looking straight down).
      <p>
        See also <a href="#follow">follow</a>, <a href="#ride">ride</a>,
        <a href="#watch">watch</a>.
      </div>
    <div class="dict_entry" id="reset-ticks">
      <h3>
        <a>reset-ticks<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">reset-ticks</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Resets the tick counter to zero, sets up all plots, then updates
        all plots (so that the initial state of the world is plotted).
      <p>
        Normally <code>reset-ticks</code> goes at the end of a setup procedure.
      <p>
        See also <a href="#clear-ticks">clear-ticks</a>, <a href="#tick">tick</a>, <a href="#ticks">ticks</a>, <a href="#tick-advance">tick-advance</a>, <a href="#setup-plots">setup-plots</a>. <a href="#update-plots">update-plots</a>.
      </div>
    <div class="dict_entry" id="reset-timer">
      <h3>
        <a>reset-timer<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">reset-timer</span>
      </h4>
      <p>
        Resets the timer to zero seconds. See also <a href="#timer">timer</a>.
      <p>
        Note that the timer is different from the tick counter. The timer
        measures elapsed real time in seconds; the tick counter measures
        elapsed model time in ticks.
      </div>
    <div class="dict_entry" id="resize-world">
      <h3>
        <a>resize-world<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">resize-world <i>min-pxcor</i> <i>max-pxcor</i> <i>min-pycor</i> <i>max-pycor</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Changes the size of the patch grid.
      <p>
        As a side effect, all turtles and links die, and the existing patch
        grid is discarded and new patches created.
      <p>
        Retaining references to old patches or patch sets is inadvisable
        and may subsequently cause runtime errors or other unexpected
        behavior.
      <p>
        See also <a href="#set-patch-size">set-patch-size</a>.
      </div>
    <div class="dict_entry" id="reverse">
      <h3>
        <a>reverse<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">reverse <i>list</i></span>
        <span class="prim_example">reverse <i>string</i></span>
      </h4>
      <p>
        Reports a reversed copy of the given list or string.
      <pre>
show mylist
;; mylist is [2 7 4 &quot;Bob&quot;]
set mylist reverse mylist
;; mylist now is [&quot;Bob&quot; 4 7 2]
show reverse &quot;live&quot;
=&gt; &quot;evil&quot;
</pre>
    </div>
    <div class="dict_entry" id="rgb">
      <h3>
        <a>rgb<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">rgb <i>red green blue</i></span>
      </h4>
      <p>
        Reports a RGB list when given three numbers describing an RGB
        color. The numbers are range checked to be between 0 and 255.
      <p>
        See also <a href="#hsb">hsb</a>
      </div>
    <div class="dict_entry" id="ride">
      <h3>
        <a>ride<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">ride <i>turtle</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Set the perspective to <i>turtle</i>.
      <p>
        Every time <i>turtle</i> moves the observer also moves. Thus, in
        the 2D View the turtle will stay at the center of the view. In the
        3D view it is as if looking through the eyes of the turtle. If the
        turtle dies, the perspective resets to the default.
      <p>
        See also <a href="#reset-perspective">reset-perspective</a>,
        <a href="#watch">watch</a>, <a href="#follow">follow</a>, <a href="#subject">subject</a>.
      </div>
    <div class="dict_entry" id="ride-me">
      <h3>
        <a>ride-me<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">ride-me</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Asks the observer to ride this turtle.
      <p>
        See also <a href="#ride">ride</a>.
      </div>
    <div class="dict_entry" id="right">
      <h3>
        <a>right<span class="since">1.0</span></a>
        <a>rt<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">right <i>number</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle turns right by <i>number</i> degrees. (If <i>number</i>
        is negative, it turns left.)
      </div>
    <div class="dict_entry" id="round">
      <h3>
        <a>round<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">round <i>number</i></span>
      </h4>
      <p>
        Reports the integer nearest to <i>number</i>.
      <p>
        If the decimal portion of <i>number</i> is exactly .5, the number
        is rounded in the <b>positive</b> direction.
      <p>
        Note that rounding in the positive direction is not always how
        rounding is done in other software programs. (In particular, it
        does not match the behavior of StarLogoT, which always rounded
        numbers ending in 0.5 to the nearest even integer.) The rationale
        for this behavior is that it matches how turtle coordinates relate
        to patch coordinates in NetLogo. For example, if a turtle's
        xcor is -4.5, then it is on the boundary between a patch whose
        pxcor is -4 and a patch whose pxcor is -5, but the turtle must be
        considered to be in one patch or the other, so the turtle is
        considered to be in the patch whose pxcor is -4, because we round
        towards the positive numbers.
      <pre>
show round 4.2
=&gt; 4
show round 4.5
=&gt; 5
show round -4.5
=&gt; -4
</pre>
      <p>
        See also <a href="#precision">precision</a>, <a href="#ceiling">ceiling</a>, <a href="#floor">floor</a>.
      </div>
    <div class="dict_entry" id="run">
      <h3>
        <a>run<span class="since">1.3</span></a>
        <a>runresult<span class="since">1.3</span></a>
      </h3>
      <h4>
        <span class="prim_example">run <i>command-task</i></span>
        <span class="prim_example">(run <i>command-task</i> <i>input1</i> ...)</span>
        <span class="prim_example">run <i>string</i></span>
        <span class="prim_example">runresult <i>reporter-task</i></span>
        <span class="prim_example">(runresult <i>reporter-task</i> <i>input1</i> ...)</span>
        <span class="prim_example">runresult <i>string</i></span>
      </h4>
      <p>
        The <code>run</code> form expects a command task or a string containing
        commands. This agent then runs them.
      <p>
        The <code>runresult</code> form expects a reporter task or a string
        containing a reporter. This agent runs it and reports the result.
      <p>
        Note that you can't use <code>run</code> to define or redefine
        procedures. If you care about performance, note that the code must
        be compiled first which takes time. However, compiled bits of code
        are cached by NetLogo and thus using <code>run</code> on the same
        string over and over is much faster than running different strings.
        The first run, though, will be many times slower than
        running the same code directly, or in a command task.
      <p>
        Tasks are recommended over strings whenever possible. (An example
        of when you must use strings is if you accept pieces of code from
        the user of your model.)
      <p>
        Tasks may freely read and/or set local variables and procedure
        inputs. Trying to do the same with strings may or may not work and
        should not be relied on.
      <p>
        When using tasks, you can provide them with inputs, if you surround
        the entire call with parentheses. For example:
      <pre>
(run task [ crt ?1 [ fd ?2 ] ] 10 5)
;; creates 10 turtles and move them forward 5 steps
show (runresult task [ ?1 + ?2 ] 10 5)
=&gt; 15
;; adds 10 and 5
</pre>
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>S</a>
    </h2><!-- ======================================== -->
    <div id="S">
    <div class="dict_entry" id="scale-color">
      <h3>
        <a>scale-color<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">scale-color <i>color number range1 range2</i></span>
      </h4>
      <p>
        Reports a shade of <i>color</i> proportional to the value of
        <i>number</i>.
      <p>
        If <i>range1</i> is less than <i>range2</i>, then the larger the
        number, the lighter the shade of <i>color</i>. But if <i>range2</i>
        is less than <i>range1</i>, the color scaling is inverted.
      <p>
        If <i>number</i> is less than <i>range1</i>, then the darkest shade
        of <i>color</i> is chosen.
      <p>
        If <i>number</i> is greater than <i>range2</i>, then the lightest
        shade of <i>color</i> is chosen.
      <p>
        Note: for <i>color</i> shade is irrelevant, e.g. green and green +
        2 are equivalent, and the same spectrum of colors will be used.
      <pre>
ask turtles [ set color scale-color red age 0 50 ]
;; colors each turtle a shade of red proportional
;; to its value for the age variable
</pre>
    </div>
    <div class="dict_entry" id="self">
      <h3>
        <a>self<span class="since">1.3</span></a>
      </h3>
      <h4>
        <span class="prim_example">self</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        Reports this turtle, patch, or link.
      <p>
        &quot;self&quot; and &quot;myself&quot; are very different.
        &quot;self&quot; is simple; it means &quot;me&quot;.
        &quot;myself&quot; means &quot;the agent who asked me to do what
        I'm doing right now.&quot;
      <p>
        Note that it is always redundant to write <code>[foo] of self</code>.
        This is always equivalent to simply writing <code>foo</code>.
      <p>
        See also <a href="#myself">myself</a>.
      </div>
    <div class="dict_entry" id="semicolon">
      <h3>
        <a>; (semicolon)</a>
      </h3>
      <h4>
        <span class="prim_example">; <i>comments</i></span>
      </h4>
      <p>
        After a semicolon, the rest of the line is ignored. This is useful
        for adding &quot;comments&quot; to your code -- text that explains
        the code to human readers. Extra semicolons can be added for visual
        effect.
      <p>
        NetLogo's Edit menu has items that let you comment or uncomment
        whole sections of code.
      </div>
    <div class="dict_entry" id="sentence">
      <h3>
        <a>sentence<span class="since">1.0</span></a>
        <a>se<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">sentence <i>value1</i> <i>value2</i></span>
        <span class="prim_example">(sentence <i>value1</i> ...)</span>
      </h4>
      <p>
        Makes a list out of the values. If any value is a list, its items
        are included in the result directly, rather than being included as
        a sublist. Examples make this clearer:
      <pre>
show sentence 1 2
=&gt; [1 2]
show sentence [1 2] 3
=&gt; [1 2 3]
show sentence 1 [2 3]
=&gt; [1 2 3]
show sentence [1 2] [3 4]
=&gt; [1 2 3 4]
show sentence [[1 2]] [[3 4]]
=&gt; [[1 2] [3 4]]
show (sentence [1 2] 3 [4 5] (3 + 3) 7)
=&gt; [1 2 3 4 5 6 7]
</pre>
    </div>
    <div class="dict_entry" id="set">
      <h3>
        <a>set<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set <i>variable</i> <i>value</i></span>
      </h4>
      <p>
        Sets <i>variable</i> to the given value.
      <p>
        Variable can be any of the following:
      <ul>
        <li>A global variable declared using &quot;globals&quot;
        <li>The global variable associated with a slider, switch, chooser,
        or input box.
        <li>A variable belonging to this agent
        <li>If this agent is a turtle, a variable belonging to the patch
        under the turtle.
        <li>A local variable created by the <a href="#let">let</a> command.
        <li>An input to the current procedure.
        </ul>
    </div>
    <div class="dict_entry" id="set-current-directory">
      <h3>
        <a>set-current-directory<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-current-directory <i>string</i></span>
      </h4>
      <p>
        Sets the current directory that is used by the primitives <a href="#file-delete">file-delete</a>, <a href="#file-exists">file-exists?</a>, and <a href="#file-open">file-open</a>.
      <p>
        The current directory is not used if the above commands are given
        an absolute file path. This is defaulted to the user's home
        directory for new models, and is changed to the model's
        directory when a model is opened.
      <p>
        Note that in Windows file paths the backslash needs to be escaped
        within a string by using another backslash &quot;C:\\&quot;
      <p>
        The change is temporary and is not saved with the model.
      <p>
        Note: in applets, this command has no effect, since applets are
        only allowed to read files from the same directory on the server
        where the model is stored.
      <pre>
set-current-directory &quot;C:\\NetLogo&quot;
;; Assume it is a Windows Machine
file-open &quot;my-file.txt&quot;
;; Opens file &quot;C:\\NetLogo\\my-file.txt&quot;
</pre>
    </div>
    <div class="dict_entry" id="set-current-plot">
      <h3>
        <a>set-current-plot<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-current-plot <i>plotname</i></span>
      </h4>
      <p>
        Sets the current plot to the plot with the given name (a string).
        Subsequent plotting commands will affect the current plot.
      </div>
    <div class="dict_entry" id="set-current-plot-pen">
      <h3>
        <a>set-current-plot-pen<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-current-plot-pen <i>penname</i></span>
      </h4>
      <p>
        The current plot's current pen is set to the pen named
        <i>penname</i> (a string). If no such pen exists in the current
        plot, a runtime error occurs.
      </div>
    <div class="dict_entry" id="set-default-shape">
      <h3>
        <a>set-default-shape<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-default-shape turtles <i>string</i></span>
        <span class="prim_example">set-default-shape links <i>string</i></span>
        <span class="prim_example">set-default-shape <i>breed</i> <i>string</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Specifies a default initial shape for all turtles or links, or for
        a particular breed of turtles or links. When a turtle or link is
        created, or it changes breeds, it shape is set to the given shape.
      <p>
        This command doesn't affect existing agents, only agents you
        create afterwards.
      <p>
        The given breed must be either turtles, links, or the name of a
        breed. The given string must be the name of a currently defined
        shape.
      <p>
        In new models, the default shape for all turtles is
        &quot;default&quot;.
      <p>
        Note that specifying a default shape does not prevent you from
        changing an agent's shape later. Agents don't have to be
        stuck with their breed's default shape.
      <pre>
create-turtles 1 ;; new turtle's shape is &quot;default&quot;
create-cats 1    ;; new turtle's shape is &quot;default&quot;

set-default-shape turtles &quot;circle&quot;
create-turtles 1 ;; new turtle's shape is &quot;circle&quot;
create-cats 1    ;; new turtle's shape is &quot;circle&quot;

set-default-shape cats &quot;cat&quot;
set-default-shape dogs &quot;dog&quot;
create-cats 1   ;; new turtle's shape is &quot;cat&quot;
ask cats [ set breed dogs ]
  ;; all cats become dogs, and automatically
  ;; change their shape to &quot;dog&quot;
</pre>
      <p>
        See also <a href="#shape">shape</a>.
      </div>
    <div class="dict_entry" id="set-histogram-num-bars">
      <h3>
        <a>set-histogram-num-bars<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-histogram-num-bars <i>number</i></span>
      </h4>
      <p>
        Set the current plot pen's plot interval so that, given the
        current x range for the plot, there would be <i>number</i> number
        of bars drawn if the histogram command is called.
      <p>
        See also <a href="#histogram">histogram</a>.
      </div>
    <div class="dict_entry" id="set-line-thickness">
      <h3>
        <a>__set-line-thickness</a>
      </h3>
      <h4>
        <span class="prim_example">__set-line-thickness <i>number</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Specifies the thickness of lines and outlined elements in the
        turtle's shape.
      <p>
        The default value is 0. This always produces lines one pixel thick.
      <p>
        Non-zero values are interpreted as thickness in patches. A
        thickness of 1, for example, produces lines which appear one patch
        thick. (It's common to use a smaller value such as 0.5 or 0.2.)
      <p>
        Lines are always at least one pixel thick.
      <p>
        This command is experimental and may change in later releases.
      </div>
    <div class="dict_entry" id="set-patch-size">
      <h3>
        <a>set-patch-size<span class="since">4.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-patch-size <i>size</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Sets the size of the patches of the view in pixels. The size is
        typically an integer, but may also be a floating point number.
      <p>
        See also <a href="#patch-size">patch-size</a>, <a href="#resize-world">resize-world</a>.
      </div>
    <div class="dict_entry" id="set-plot-pen-color">
      <h3>
        <a>set-plot-pen-color<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-plot-pen-color <i>number</i></span>
      </h4>
      <p>
        Sets the color of the current plot pen to <i>number</i>.
      </div>
    <div class="dict_entry" id="set-plot-pen-interval">
      <h3>
        <a>set-plot-pen-interval<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-plot-pen-interval <i>number</i></span>
      </h4>
      <p>
        Tells the current plot pen to move a distance of <i>number</i> in
        the x direction during each use of the plot command. (The plot pen
        interval also affects the behavior of the histogram command.)
      </div>
    <div class="dict_entry" id="set-plot-pen-mode">
      <h3>
        <a>set-plot-pen-mode<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-plot-pen-mode <i>number</i></span>
      </h4>
      <p>
        Sets the mode the current plot pen draws in to <i>number</i>. The
        allowed plot pen modes are:
      <ul>
        <li>0 (line mode) the plot pen draws a line connecting two points
        together.
        <li>1 (bar mode): the plot pen draws a bar of width
        plot-pen-interval with the point plotted as the upper (or lower, if
        you are plotting a negative number) left corner of the bar.
        <li>2 (point mode): the plot pen draws a point at the point
        plotted. Points are not connected.
        </ul>
      <p>
        The default mode for new pens is 0 (line mode).
      </div>
    <div class="dict_entry" id="setup-plots">
      <h3>
        <a>setup-plots<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">setup-plots</span>
      </h4>
      <p>
        For each plot, runs that plot's setup commands, including the
        setup code for any pens in the plot.
      <p>
        <a href="#reset-ticks">reset-ticks</a> has the same effect, so in
        models that use the tick counter, this primitive is not normally
        used.
      <p>
        See the <a href="programming.html#plotting">Plotting section</a> of
        the Programming Guide for more details.
      <p>
        See also <a href="#update-plots">update-plots</a>.
      </div>
    <div class="dict_entry" id="set-plot--range">
      <h3>
        <a>set-plot-x-range<span class="since">1.0</span></a>
        <a>set-plot-y-range<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">set-plot-x-range <i>min max</i></span>
        <span class="prim_example">set-plot-y-range <i>min max</i></span>
      </h4>
      <p>
        Sets the minimum and maximum values of the x or y axis of the
        current plot.
      <p>
        The change is temporary and is not saved with the model. When the
        plot is cleared, the ranges will revert to their default values as
        set in the plot's Edit dialog.
      </div>
    <div class="dict_entry" id="setxy">
      <h3>
        <a>setxy<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">setxy <i>x y</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle sets its x-coordinate to <i>x</i> and its y-coordinate
        to <i>y</i>.
      <p>
        Equivalent to <code>set xcor x set ycor y</code>, except it happens in
        one time step instead of two.
      <p>
        If <i>x</i> or <i>y</i> is outside the world, NetLogo will throw a
        runtime error, unless wrapping is turned on in the relevant
        dimensions. For example, with wrapping turned on in both dimensions
        and the default world size where <code>min-pxcor = -16</code>,
        <code>max-pxcor = 16</code>, <code>min-pycor = -16</code> and <code>max-pycor
        = 16</code>, asking a turtle to <code>setxy 17 17</code> will move it to
        the center of patch (-16, -16).
      <pre>
setxy 0 0
;; turtle moves to the middle of the center patch
setxy random-xcor random-ycor
;; turtle moves to a random point
setxy random-pxcor random-pycor
;; turtle moves to the center of a random patch
</pre>
      <p>
        See also <a href="#move-to">move-to</a>.
      </div>
    <div class="dict_entry" id="shade-of">
      <h3>
        <a>shade-of?<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">shade-of? <i>color1</i> <i>color2</i></span>
      </h4>
      <p>
        Reports true if both colors are shades of one another, false
        otherwise.
      <pre>
show shade-of? blue red
=&gt; false
show shade-of? blue (blue + 1)
=&gt; true
show shade-of? gray white
=&gt; true
</pre>
    </div>
    <div class="dict_entry" id="shape">
      <h3>
        <a>shape</a>
      </h3>
      <h4>
        <span class="prim_example">shape</span>
        <img alt="Turtle Command" src="images/turtle.gif">
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in turtle and link variable. It holds a string that
        is the name of the turtle or link's current shape. You can set
        this variable to change the shape. New turtles and links have the
        shape &quot;default&quot; unless the a different shape has been
        specified using <a href="#set-default-shape">set-default-shape</a>.
      <p>
        Example:
      <pre>
ask turtles [ set shape &quot;wolf&quot; ]
;; assumes you have made a &quot;wolf&quot;
;; shape in NetLogo's <a href="shapes.html">Turtle Shapes Editor</a>
ask links [ set shape &quot;link 1&quot; ]
;; assumes you have made a &quot;link 1&quot; shape in
;; the Link Shapes Editor
</pre>
      <p>
        See also <a href="#set-default-shape">set-default-shape</a>,
        <a href="#shapes">shapes</a>.
      </div>
    <div class="dict_entry" id="shapes">
      <h3>
        <a>shapes<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">shapes</span>
      </h4>
      <p>
        Reports a list of strings containing all of the turtle shapes in
        the model.
      <p>
        New shapes can be created, or imported from the shapes library or
        from other models, in the <a href="shapes.html">Shapes Editor</a>.
      <pre>
show shapes
=&gt; [&quot;default&quot; &quot;airplane&quot; &quot;arrow&quot; &quot;box&quot; &quot;bug&quot; ...
ask turtles [ set shape one-of shapes ]
</pre>
    </div>
    <div class="dict_entry" id="show">
      <h3>
        <a>show<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">show <i>value</i></span>
      </h4>
      <p>
        Prints <i>value</i> in the Command Center, preceded by this agent,
        and followed by a carriage return. (This agent is included to help
        you keep track of what agents are producing which lines of output.)
        Also, all strings have their quotes included similar to <a href="#write">write</a>.
      <p>
        See also <a href="#print">print</a>, <a href="#type">type</a>, and
        <a href="#write">write</a>.
      <p>
        See also <a href="#output-cmds">output-show</a>.
      </div>
    <div class="dict_entry" id="show-turtle">
      <h3>
        <a>show-turtle<span class="since">1.0</span></a>
        <a>st<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">show-turtle</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        The turtle becomes visible again.
      <p>
        Note: This command is equivalent to setting the turtle variable
        &quot;hidden?&quot; to false.
      <p>
        See also <a href="#hide-turtle">hide-turtle</a>.
      </div>
    <div class="dict_entry" id="show-link">
      <h3>
        <a>show-link<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">show-link</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        The link becomes visible again.
      <p>
        Note: This command is equivalent to setting the link variable
        &quot;hidden?&quot; to false.
      <p>
        See also <a href="#hide-link">hide-link</a>.
      </div>
    <div class="dict_entry" id="shuffle">
      <h3>
        <a>shuffle<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">shuffle <i>list</i></span>
      </h4>
      <p>
        Reports a new list containing the same items as the input list, but
        in randomized order.
      <pre>
show shuffle [1 2 3 4 5]
=&gt; [5 2 4 1 3]
show shuffle [1 2 3 4 5]
=&gt; [1 3 5 2 4]
</pre>
    </div>
    <div class="dict_entry" id="sin">
      <h3>
        <a>sin<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">sin <i>number</i></span>
      </h4>
      <p>
        Reports the sine of the given angle. Assumes angle is given in
        degrees.
      <pre>
show sin 270
=&gt; -1
</pre>
    </div>
    <div class="dict_entry" id="size">
      <h3>
        <a>size</a>
      </h3>
      <h4>
        <span class="prim_example">size</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in turtle variable. It holds a number that is the
        turtle's apparent size. The default size is 1, which means that
        the turtle is the same size as a patch. You can set this variable
        to change a turtle's size.
      </div>
    <div class="dict_entry" id="sort">
      <h3>
        <a>sort<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">sort <i>list</i></span>
        <span class="prim_example">sort <i>agentset</i></span>
      </h4>
      <p>
        Reports a sorted list of numbers, strings, or agents.
      <p>
        If the input contains no numbers, strings, or agents, the result is
        the empty list.
      <p>
        If the input contains at least one number, the numbers in the list
        are sorted in ascending order and a new list reported; non-numbers
        are ignored.
      <p>
        Or, if the input contains at least one string, the strings in the
        list are sorted in ascending order and a new list reported;
        non-strings are ignored.
      <p>
        Or, if the input is an agentset or a list containing at least one
        agent, a sorted list of agents (never an agentset) is reported;
        non-agents are ignored. Agents are sorted in the same order the
        &lt; operator uses.
      <pre>
show sort [3 1 4 2]
=&gt; [1 2 3 4]
let n 0
foreach sort patches [
  ask ? [
    set plabel n
    set n n + 1
  ]
]
;; patches are labeled with numbers in left-to-right,
;; top-to-bottom order
</pre>
      <p>
        See also <a href="#sort-by">sort-by</a>, <a href="#sort-on">sort-on</a>.
      </div>
    <div class="dict_entry" id="sort-by">
      <h3>
        <a>sort-by<span class="since">1.3</span></a>
      </h3>
      <h4>
        <span class="prim_example">sort-by <i>reporter-task</i> <i>list</i></span>
        <span class="prim_example">sort-by <i>reporter-task</i> <i>agentset</i></span>
      </h4>
      <p>
        If the input is a list, reports a new list containing the same
        items as the input list, in a sorted order defined by the boolean
        reporter task.
      <p>
        The two inputs to the reporter task are the values being compared.
        The task should report true if <code>?1</code> comes strictly before
        <code>?2</code> in the desired sort order, and false otherwise.
      <p>
        If the input is an agentset or a list of agents, reports a list
        (never an agentset) of agents.
      <p>
        If the input is a list, the sort is stable, that is, the order of
        items considered equal by the reporter is not disturbed. If the
        input is an agentset, ties are broken randomly.
      <pre>
show sort-by &lt; [3 1 4 2]
=&gt; [1 2 3 4]
show sort-by &gt; [3 1 4 2]
=&gt; [4 3 2 1]
show sort-by [length ?1 &lt; length ?2] [&quot;Grumpy&quot; &quot;Doc&quot; &quot;Happy&quot;]
=&gt; [&quot;Doc&quot; &quot;Happy&quot; &quot;Grumpy&quot;]
</pre>
      <p>
        See also <a href="#sort">sort</a>, <a href="#sort-on">sort-on</a>.
      </div>
    <div class="dict_entry" id="sort-on">
      <h3>
        <a>sort-on<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">sort-on [<i>reporter</i>] <i>agentset</i></span>
      </h4>
      <p>
        Reports a list of agents, sorted according to each agent's
        value for <i>reporter</i>. Ties are broken randomly.
      <p>
        The values must be all numbers, all strings, or all agents of the
        same type.
      <pre>
crt 3
show sort-on [who] [turtles]
=&gt; [(turtle 0) (turtle 1) (turtle 2)]
show sort-on [(- who)] [turtles]
=&gt; [(turtle 2) (turtle 1) (turtle 0)]
foreach sort-on [size] turtles
  [ ask ? [ do-something ] ]
;; turtles run &quot;do-something&quot; one at a time, in
;; ascending order by size
</pre>
      <p>
        See also <a href="#sort">sort</a>, <a href="#sort-by">sort-by</a>.
      </div>
    <div class="dict_entry" id="sprout">
      <h3>
        <a>sprout<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">sprout <i>number</i> [ <i>commands</i> ]</span>
        <span class="prim_example">sprout-<i>&lt;breeds&gt;</i> <i>number</i> [ <i>commands</i> ]</span>
        <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Creates <i>number</i> new turtles on the current patch. The new
        turtles have random integer headings and the color is randomly
        selected from the 14 primary colors. The turtles immediately run
        <i>commands</i>. This is useful for giving the new turtles
        different colors, headings, or whatever. (The new turtles are
        created all at once then run one at a time, in random order.)
      <p>
        If the sprout-<i>&lt;breeds&gt;</i> form is used, the new turtles
        are created as members of the given breed.
      <pre>
sprout 5
sprout-wolves 10
sprout 1 [ set color red ]
sprout-sheep 1 [ set color black ]
</pre>
      <p>
        See also <a href="#create-turtles">create-turtles</a>, <a href="#hatch">hatch</a>.
      </div>
    <div class="dict_entry" id="sqrt">
      <h3>
        <a>sqrt<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">sqrt <i>number</i></span>
      </h4>
      <p>
        Reports the square root of <i>number</i>.
      </div>
    <div class="dict_entry" id="stamp">
      <h3>
        <a>stamp<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">stamp</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This turtle or link leaves an image of its shape in the drawing at
        its current location.
      <p>
        Note: The shapes made by stamp may not be pixel-for-pixel identical
        from computer to computer.
      </div>
    <div class="dict_entry" id="stamperase">
      <h3>
        <a>stamp-erase<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">stamp-erase</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This turtle or link removes any pixels below it in the drawing
        inside the bounds of its shape.
      <p>
        Note: The shapes made by stamp-erase may not be pixel-for-pixel
        identical from computer to computer.
      </div>
    <div class="dict_entry" id="standard-deviation">
      <h3>
        <a>standard-deviation<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">standard-deviation <i>list</i></span>
      </h4>
      <p>
        Reports the sample standard deviation of a <i>list</i> of numbers.
        Ignores other types of items.
      <p>
        (Note that this estimates the standard deviation for a
        <i>sample</i>, rather than for a whole <i>population</i>, using
        Bessel's correction.)
      <pre>
show standard-deviation [1 2 3 4 5 6]
=&gt; 1.8708286933869707
show standard-deviation [energy] of turtles
;; prints the standard deviation of the variable &quot;energy&quot;
;; from all the turtles
</pre>
    </div>
    <div class="dict_entry" id="startup">
      <h3>
        <a>startup</a>
      </h3>
      <h4>
        <span class="prim_example">startup</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        User-defined procedure which, if it exists, will be called when a
        model is first loaded in the NetLogo application.
      <pre>
to startup
  setup
end
</pre>
      <p>
        <code>startup</code> does not run when a model is run headless from the
        command line, or by parallel BehaviorSpace.
      </div>
    <div class="dict_entry" id="stop">
      <h3>
        <a>stop<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">stop</span>
      </h4>
      <p>
        This agent exits immediately from the enclosing procedure, ask, or
        ask-like construct (e.g. crt, hatch, sprout). Only the enclosing
        procedure or construct stops, not all execution for the agent.
      <pre>
if not any? turtles [ stop ]
;; exits if there are no more turtles
</pre>
      <p>
        Note: <code>stop</code> can also be used to stop a forever button. See
        <a href="programming.html#buttons">Buttons</a> in the
        Programming Guide for details.
      <p>
        <code>stop</code> can also be used to stop a BehaviorSpace model run. If the go
        commands directly call a procedure, then when that procedure calls <i>stop</i>,
        the run ends.
      </div>
    <div class="dict_entry" id="stop-inspecting">
      <h3>
        <a>stop-inspecting<span class="since">5.2</span></a>
      </h3>
      <h4>
        <span class="prim_example">stop-inspecting <i>agent</i></span>
      </h4>
      <p>
        Closes the agent monitor for the given agent (turtle or patch).
        In the case that no agent monitor is open, <code>stop-inspecting</code> does
        nothing.
      <pre>
stop-inspecting patch 2 4
;; the agent monitor for that patch closes
ask sheep [ stop-inspecting self ]
;; close all agent monitors for sheep
</pre>
      <p>
        See <a href="#inspect">inspect</a> and <a href="#stop-inspecting-dead-agents">stop-inspecting-dead-agents</a>.
    </div>
    <div class="dict_entry" id="stop-inspecting-dead-agents">
      <h3>
        <a>stop-inspecting-dead-agents<span class="since">5.2</span></a>
      </h3>
      <h4>
        <span class="prim_example">stop-inspecting-dead-agents</span>
      </h4>
      <p>
        Closes all agent monitors for dead agents.
        See <a href="#inspect">inspect</a> and <a href="#stop-inspecting">stop-inspecting</a>.
    </div>
    <div class="dict_entry" id="subject">
      <h3>
        <a>subject<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">subject</span>
      </h4>
      <p>
        Reports the turtle (or patch) that the observer is currently
        watching, following, or riding. Reports <a href="#nobody">nobody</a> if there is no such turtle (or patch).
      <p>
        See also <a href="#watch">watch</a>, <a href="#follow">follow</a>,
        <a href="#ride">ride</a>.
      </div>
    <div class="dict_entry" id="subliststring">
      <h3>
        <a>sublist<span class="since">2.1</span></a>
        <a>substring<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">sublist <i>list position1 position2</i></span>
        <span class="prim_example">substring <i>string position1 position2</i></span>
      </h4>
      <p>
        Reports just a section of the given list or string, ranging between
        the first position (inclusive) and the second position (exclusive).
      <p>
        Note: The positions are numbered beginning with 0, not with 1.
      <pre>
show sublist [99 88 77 66] 1 3
=&gt; [88 77]
show substring &quot;apartment&quot; 1 5
=&gt; &quot;part&quot;
</pre>
    </div>
    <div class="dict_entry" id="subtract-headings">
      <h3>
        <a>subtract-headings<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">subtract-headings <i>heading1 heading2</i></span>
      </h4>
      <p>
        Computes the difference between the given headings, that is, the
        number of degrees in the smallest angle by which heading2 could be
        rotated to produce heading1. A positive answer means a clockwise
        rotation, a negative answer counterclockwise. The result is always
        in the range -180 to 180, but is never exactly -180.
      <p>
        Note that simply subtracting the two headings using the - (minus)
        operator wouldn't work. Just subtracting corresponds to always
        rotating clockwise from heading2 to heading1; but sometimes the
        counterclockwise rotation is shorter. For example, the difference
        between 5 degrees and 355 degrees is 10 degrees, not -350 degrees.
      <pre>
show subtract-headings 80 60
=&gt; 20
show subtract-headings 60 80
=&gt; -20
show subtract-headings 5 355
=&gt; 10
show subtract-headings 355 5
=&gt; -10
show subtract-headings 180 0
=&gt; 180
show subtract-headings 0 180
=&gt; 180
</pre>
    </div>
    <div class="dict_entry" id="sum">
      <h3>
        <a>sum<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">sum <i>list</i></span>
      </h4>
      <p>
        Reports the sum of the items in the list.
      <pre>
show sum [energy] of turtles
;; prints the total of the variable &quot;energy&quot;
;; from all the turtles
</pre>
    </div><!-- ======================================== -->
  </div>
    <h2>
      <a>T</a>
    </h2><!-- ======================================== -->
    <div id="T">
    <div class="dict_entry" id="tan">
      <h3>
        <a>tan<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">tan <i>number</i></span>
      </h4>
      <p>
        Reports the tangent of the given angle. Assumes the angle is given
        in degrees.
      </div>
    <div class="dict_entry" id="task">
      <h3>
        <a>task<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">task [ <i>commands</i> ]</span>
        <span class="prim_example">task [ <i>reporter</i> ]</span>
        <span class="prim_example">task <i>command-name</i></span>
        <span class="prim_example">task <i>reporter-name</i></span>
      </h4>
      <p>
        Creates and reports a task, either a command task or a reporter
        task, depending on the input.
      <p>
        See the <a href="programming.html#tasks">Tasks section</a> of the
        Programming Guide for details.
      </div>
    <div class="dict_entry" id="thickness">
      <h3>
        <a>thickness</a>
      </h3>
      <h4>
        <span class="prim_example">thickness</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in link variable. It holds a number that is the
        link's apparent size as a fraction of the patch size. The
        default thickness is 0, which means that regardless of patch-size
        the links will always appear 1 pixel wide. You can set this
        variable to change a link's thickness.
      </div>
    <div class="dict_entry" id="tick">
      <h3>
        <a>tick<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">tick</span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Advances the tick counter by one and updates all plots.
      <p>
        If the tick counter has not been started yet with
        <code>reset-ticks</code>, an error results.
      <p>
        Normally <code>tick</code> goes at the end of a go procedure.
      <p>
        See also <a href="#ticks">ticks</a>, <a href="#tick-advance">tick-advance</a>, <a href="#reset-ticks">reset-ticks</a>, <a href="#clear-ticks">clear-ticks</a>, <a href="#update-plots">update-plots</a>.
      </div>
    <div class="dict_entry" id="tick-advance">
      <h3>
        <a>tick-advance<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">tick-advance <i>number</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Advances the tick counter by <i>number</i>. The input may be an
        integer or a floating point number. (Some models divide ticks more
        finely than by ones.) The input may not be negative.
      <p>
        When using <a href="programming.html#updates">tick-based view
        updates</a>, the view is normally updated every 1.0 ticks, so using
        <code>tick-advance</code> with a number less then 1.0 may not always
        trigger an update. If you want to make sure that the view is
        updated, you can use the <code>display</code> command.
      <p>
        If the tick counter has not been started yet with
        <code>reset-ticks</code>, an error results.
      <p>
        Does not update plots.
      <p>
        See also <a href="#tick">tick</a>, <a href="#ticks">ticks</a>,
        <a href="#reset-ticks">reset-ticks</a>, <a href="#clear-ticks">clear-ticks</a>.
      </div>
    <div class="dict_entry" id="ticks">
      <h3>
        <a>ticks<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">ticks</span>
      </h4>
      <p>
        Reports the current value of the tick counter. The result is always
        a number and never negative.
      <p>
        If the tick counter has not been started yet with
        <code>reset-ticks</code>, an error results.
      <p>
        Most models use the <code>tick</code> command to advance the tick
        counter, in which case <code>ticks</code> will always report an
        integer. If the <code>tick-advance</code> command is used, then
        <code>ticks</code> may report a floating point number.
      <p>
        See also <a href="#tick">tick</a>, <a href="#tick-advance">tick-advance</a>, <a href="#reset-ticks">reset-ticks</a>, <a href="#clear-ticks">clear-ticks</a>.
      </div>
    <div class="dict_entry" id="tie">
      <h3>
        <a>tie<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">tie</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        Ties <i>end1</i> and <i>end2</i> of the link together. If the link
        is a directed link <i>end1</i> is the <i>root turtle</i> and
        <i>end2</i> is the <i>leaf turtle</i>. The movement of the <i>root
        turtle</i> affects the location and heading of the <i>leaf
        turtle</i>. If the link is undirected the tie is reciprocal so both
        turtles can be considered <i>root turtles</i> and <i>leaf
        turtles</i>. Movement or change in heading of either turtle affects
        the location and heading of the other turtle.
      <p>
        When the root turtle moves, the leaf turtles moves the same
        distance, in the same direction. The heading of the leaf turtle is
        not affected. This works with forward, jump, and setting the xcor
        or ycor of the root turtle.
      <p>
        When the root turtle turns right or left, the leaf turtle is
        rotated around the root turtle the same amount. The heading of the
        leaf turtle is also changed by the same amount.
      <p>
        If the link dies, the tie relation is removed.
      <pre>
      crt 2 [ fd 3 ]
      ;; creates a link and ties turtle 1 to turtle 0
      ask turtle 0 [ create-link-to turtle 1 [ tie ] ]
</pre>
      <p>
        See also <a href="#untie">untie</a>
      </div>
    <div class="dict_entry" id="tie-mode">
      <h3>
        <a>tie-mode</a>
      </h3>
      <h4>
        <span class="prim_example">tie-mode</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        This is a built-in link variable. It holds a string that is the
        name of the tie mode the link is currently in. Using the <a href="#tie">tie</a> and <a href="#untie">untie</a> commands changes the
        mode of the link. You can also set tie-mode to &quot;free&quot; to
        create a non-rigid joint between two turtles (see the <a href="programming.html#tie">Tie section</a> of the Programming Guide for
        details). By default links are not tied.
      <p>
        See also: <a href="#tie">tie</a>, <a href="#untie">untie</a>
      </div>
    <div class="dict_entry" id="timer">
      <h3>
        <a>timer<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">timer</span>
      </h4>
      <p>
        Reports how many seconds have passed since the command <a href="#reset-timer">reset-timer</a> was last run (or since NetLogo
        started). The potential resolution of the clock is milliseconds.
        (Whether you get resolution that high in practice may vary from
        system to system, depending on the capabilities of the underlying
        Java Virtual Machine.)
      <p>
        See also <a href="#reset-timer">reset-timer</a>.
      <p>
        Note that the timer is different from the tick counter. The timer
        measures elapsed real time in seconds; the tick counter measures
        elapsed model time in ticks.
      </div>
    <div class="dict_entry" id="to">
      <h3>
        <a>to</a>
      </h3>
      <h4>
        <span class="prim_example">to <i>procedure-name</i></span>
        <span class="prim_example">to <i>procedure-name</i> [<i>input1</i> ...]</span>
      </h4>
      <p>
        Used to begin a command procedure.
      <pre>
to setup
  clear-all
  crt 500
end

to circle [radius]
  crt 100 [ fd radius ]
end
</pre>
    </div>
    <div class="dict_entry" id="to-report">
      <h3>
        <a>to-report</a>
      </h3>
      <h4>
        <span class="prim_example">to-report <i>procedure-name</i></span>
        <span class="prim_example">to-report <i>procedure-name</i> [<i>input1</i> ...]</span>
      </h4>
      <p>
        Used to begin a reporter procedure.
      <p>
        The body of the procedure should use <code>report</code> to report a
        value for the procedure. See <a href="#report">report</a>.
      <pre>
to-report average [a b]
  report (a + b) / 2
end

to-report absolute-value [number]
  ifelse number &gt;= 0
    [ report number ]
    [ report (- number) ]
end

to-report first-turtle?
  report who = 0  ;; reports true or false
end
</pre>
    </div>
    <div class="dict_entry" id="towards">
      <h3>
        <a>towards<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">towards <i>agent</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Reports the heading from this agent to the given agent.
      <p>
        If wrapping is allowed by the topology and the wrapped distance
        (around the edges of the world) is shorter, towards will use the
        wrapped path.
      <p>
        Note: asking for the heading from an agent to itself, or an agent
        on the same location, will cause a runtime error.
      <pre>
set heading towards turtle 1
;; same as &quot;face turtle 1&quot;
</pre>
      <p>
        See also <a href="#face">face</a>.
      </div>
    <div class="dict_entry" id="towardsxy">
      <h3>
        <a>towardsxy<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">towardsxy <i>x</i> <i>y</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Reports the heading from the turtle or patch towards the point
        (<i>x</i>,<i>y</i>).
      <p>
        If wrapping is allowed by the topology and the wrapped distance
        (around the edges of the world) is shorter, towardsxy will use the
        wrapped path.
      <p>
        Note: asking for the heading to the point the agent is already
        standing on will cause a runtime error.
      <p>
        See also <a href="#facexy">facexy</a>.
      </div>
    <div class="dict_entry" id="turtle">
      <h3>
        <a>turtle<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">turtle <i>number</i> &lt;breed&gt; <i>number</i></span>
      </h4>
      <p>
        Reports the turtle with the given who number, or <a href="#nobody">nobody</a> if there is no such turtle. For breeded
        turtles you may also use the single breed form to refer to them.
      <pre>
ask turtle 5 [ set color red ]
;; turtle with who number 5 turns red
</pre>
    </div>
    <div class="dict_entry" id="turtle-set">
      <h3>
        <a>turtle-set<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">turtle-set <i>value1</i></span>
        <span class="prim_example">(turtle-set <i>value1</i> <i>value2</i> ...)</span>
      </h4>
      <p>
        Reports an agentset containing all of the turtles anywhere in any
        of the inputs. The inputs may be individual turtles, turtle
        agentsets, nobody, or lists (or nested lists) containing any of the
        above.
      <pre>
turtle-set self
(turtle-set self turtles-on neighbors)
(turtle-set turtle 0 turtle 2 turtle 9)
(turtle-set frogs mice)
</pre>
      <p>
        See also <a href="#patch-set">patch-set</a>, <a href="#link-set">link-set</a>.
      </div>
    <div class="dict_entry" id="turtles">
      <h3>
        <a>turtles<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">turtles</span>
      </h4>
      <p>
        Reports the agentset consisting of all turtles.
      <pre>
show count turtles
;; prints the number of turtles
</pre>
    </div>
    <div class="dict_entry" id="turtles-at">
      <h3>
        <a>turtles-at<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">turtles-at <i>dx</i> <i>dy</i></span>
        <span class="prim_example"><i>&lt;breeds&gt;</i>-at <i>dx</i> <i>dy</i></span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Reports an agentset containing the turtles on the patch (dx, dy)
        from the caller. (The result may include the caller itself if the
        caller is a turtle.)
      <pre>
create-turtles 5 [ setxy 2 3 ]
show count [turtles-at 1 1] of patch 1 2
=&gt; 5
</pre>
      <p>
        If the name of a breed is substituted for &quot;turtles&quot;, then
        only turtles of that breed are included.
      </div>
    <div class="dict_entry" id="turtles-here">
      <h3>
        <a>turtles-here<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">turtles-here</span>
        <span class="prim_example"><i>&lt;breeds&gt;</i>-here</span>
      </h4>
      <p>
        Reports an agentset containing all the turtles on the caller's
        patch (including the caller itself if it's a turtle).
      <pre>
crt 10
ask turtle 0 [ show count turtles-here ]
=&gt; 10
</pre>
      <p>
        If the name of a breed is substituted for &quot;turtles&quot;, then
        only turtles of that breed are included.
      <pre>
breed [cats cat]
breed [dogs dog]
create-cats 5
create-dogs 1
ask dogs [ show count cats-here ]
=&gt; 5
</pre>
    </div>
    <div class="dict_entry" id="turtles-on">
      <h3>
        <a>turtles-on<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">turtles-on <i>agent</i></span>
        <span class="prim_example">turtles-on <i>agentset</i></span>
        <span class="prim_example"><i>&lt;breeds&gt;</i>-on <i>agent</i></span>
        <span class="prim_example"><i>&lt;breeds&gt;</i>-on <i>agentset</i></span>
      </h4>
      <p>
        Reports an agentset containing all the turtles that are on the
        given patch or patches, or standing on the same patch as the given
        turtle or turtles.
      <pre>
ask turtles [
  if not any? turtles-on patch-ahead 1
    [ fd 1 ]
]
ask turtles [
  if not any? turtles-on neighbors [
    die-of-loneliness
  ]
]
</pre>
      <p>
        If the name of a breed is substituted for &quot;turtles&quot;, then
        only turtles of that breed are included.
      </div>
    <div class="dict_entry" id="turtles-own">
      <h3>
        <a>turtles-own</a>
      </h3>
      <h4>
        <span class="prim_example">turtles-own [<i>var1</i> ...]</span>
        <span class="prim_example"><i>&lt;breeds&gt;</i>-own [<i>var1</i> ...]</span>
      </h4>
      <p>
        The turtles-own keyword, like the globals, breed,
        <i>&lt;breeds&gt;</i>-own, and patches-own keywords, can only be
        used at the beginning of a program, before any function
        definitions. It defines the variables belonging to each turtle.
      <p>
        If you specify a breed instead of &quot;turtles&quot;, only turtles
        of that breed have the listed variables. (More than one turtle
        breed may list the same variable.)
      <pre>
breed [cats cat ]
breed [dogs dog]
breed [hamsters hamster]
turtles-own [eyes legs]   ;; applies to all breeds
cats-own [fur kittens]
hamsters-own [fur cage]
dogs-own [hair puppies]
</pre>
      <p>
        See also <a href="#globals">globals</a>, <a href="#patches-own">patches-own</a>, <a href="#breed">breed</a>,
        <a href="#turtles-own"><i>&lt;breeds&gt;</i>-own</a>.
      </div>
    <div class="dict_entry" id="type">
      <h3>
        <a>type<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">type <i>value</i></span>
      </h4>
      <p>
        Prints <i>value</i> in the Command Center, <i>not</i> followed by a
        carriage return (unlike <a href="#print">print</a> and <a href="#show">show</a>). The lack of a carriage return allows you to
        print several values on the same line.
      <p>
        This agent is <i>not</i> printed before the value. unlike <a href="#show">show</a>.
      <pre>
type 3 type &quot; &quot; print 4
=&gt; 3 4
</pre>
      <p>
        See also <a href="#print">print</a>, <a href="#show">show</a>, and
        <a href="#write">write</a>.
      <p>
        See also <a href="#output-cmds">output-type</a>.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>U</a>
    </h2><!-- ======================================== -->
    <div id="U">
    <div class="dict_entry" id="undirected-link-breed">
      <h3>
        <a>undirected-link-breed</a>
      </h3>
      <h4>
        <span class="prim_example">undirected-link-breed [<i>&lt;link-breeds&gt;</i> <i>&lt;link-breed&gt;</i>]</span>
      </h4>
      <p>
        This keyword, like the globals and breeds keywords, can only be
        used at the beginning of the Code tab, before any procedure
        definitions. It defines an undirected link breed. Links of a
        particular breed are always either all directed or all undirected.
        The first input defines the name of the agentset associated with
        the link breed. The second input defines the name of a single
        member of the breed.
      <p>
        Any link of the given link breed:
      <ul>
        <li>is part of the agentset named by the link breed name
        <li>has its built-in variable <code>breed</code> set to that agentset
        <li>is directed or undirected as declared by the keyword
        </ul>
      <p>
        Most often, the agentset is used in conjunction with ask to give
        commands to only the links of a particular breed.
      <pre>
undirected-link-breed [streets street]
undirected-link-breed [highways highway]
to setup
  clear-all
  crt 2
  ask turtle 0 [ create-street-with turtle 1 ]
  ask turtle 0 [ create-highway-with turtle 1 ]
end

ask turtle 0 [ show sort my-links ]
;; prints [(street 0 1) (highway 0 1)]
</pre>
      <p>
        See also <a href="#breed">breed</a>, <a href="#directed-link-breed">directed-link-breed</a>
      </div>
    <div class="dict_entry" id="untie">
      <h3>
        <a>untie<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">untie</span>
        <img alt="Link Command" src="images/link.gif">
      </h4>
      <p>
        Unties <i>end2</i> from <i>end1</i> (sets <a href="#tie-mode">tie-mode</a> to &quot;none&quot;) if they were
        previously tied together. If the link is an undirected link, then
        it will untie <i>end1</i> from <i>end2</i> as well. It does
        <b>not</b> remove the link between the two turtles.
      <p>
        See also <a href="#tie">tie</a>
      <p>
        See the <a href="programming.html#tie">Tie</a> section of the
        Programming Guide for more details.
      </div>
    <div class="dict_entry" id="update-plots">
      <h3>
        <a>update-plots<span class="since">5.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">update-plots</span>
      </h4>
      <p>
        For each plot, runs that plot's update commands, including the
        update code for any pens in the plot.
      <p>
        <a href="#tick">tick</a> has the same effect, so in models that use
        the tick counter, this primitive is not normally used. Models that
        use fractional ticks may need <code>update-plots</code>, since <a href="#tick-advance">tick-advance</a> does not update the plots.
      <p>
        See the <a href="programming.html#plotting">Plotting section</a> of
        the Programming Guide for more details.
      <p>
        See also <a href="#setup-plots">setup-plots</a>.
      </div>
    <div class="dict_entry" id="uphill">
      <h3>
        <a>uphill<span class="since">1.0</span></a>
        <a>uphill4<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">uphill <i>patch-variable</i></span>
        <span class="prim_example">uphill4 <i>patch-variable</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Moves the turtle to the neighboring patch with the highest value
        for <i>patch-variable</i>. If no neighboring patch has a higher
        value than the current patch, the turtle stays put. If there are
        multiple patches with the same highest value, the turtle picks one
        randomly. Non-numeric values are ignored.
      <p>
        uphill considers the eight neighboring patches; uphill4 only
        considers the four neighbors.
      <p>
        Equivalent to the following code (assumes variable values are
        numeric):
      <pre>
move-to patch-here  ;; go to patch center
let p max-one-of neighbors [<i>patch-variable</i>]  ;; or neighbors4
if [<i>patch-variable</i>] of p &gt; <i>patch-variable</i> [
  face p
  move-to p
]
</pre>
      <p>
        Note that the turtle always ends up on a patch center and has a
        heading that is a multiple of 45 (uphill) or 90 (uphill4).
      <p>
        See also <a href="#downhill">downhill</a>, <a href="#downhill">downhill4</a>.
      </div>
    <div class="dict_entry" id="user-directory">
      <h3>
        <a>user-directory<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">user-directory</span>
      </h4>
      <p>
        Opens a dialog that allows the user to choose an existing directory
        on the system.
      <p>
        It reports a string with the absolute path or false if the user
        cancels.
      <pre>
set-current-directory user-directory
;; Assumes the user will choose a directory
</pre>
    </div>
    <div class="dict_entry" id="user-file">
      <h3>
        <a>user-file<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">user-file</span>
      </h4>
      <p>
        Opens a dialog that allows the user to choose an existing file on
        the system.
      <p>
        It reports a string with the absolute file path or false if the
        user cancels.
      <pre>
file-open user-file
;; Assumes the user will choose a file
</pre>
    </div>
    <div class="dict_entry" id="user-new-file">
      <h3>
        <a>user-new-file<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">user-new-file</span>
      </h4>
      <p>
        Opens a dialog that allows the user to choose a location and name
        of a new file to be created. It reports a string with the absolute
        file path or false if the user cancels.
      <pre>
file-open user-new-file
;; Assumes the user will choose a file
</pre>
      <p>
        Note that this reporter doesn't actually create the file;
        normally you would create the file using <code>file-open</code>, as in
        the example.
      <p>
        If the user chooses an existing file, they will be asked if they
        wish to replace it or not, but the reporter itself doesn't
        cause the file to be replaced. To do that you would use
        <code>file-delete</code>.
      </div>
    <div class="dict_entry" id="user-input">
      <h3>
        <a>user-input<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">user-input <i>value</i></span>
      </h4>
      <p>
        Reports the string that a user types into an entry field in a
        dialog with title <i>value</i>.
      <p>
        <i>value</i> may be of any type, but is typically a string.
      <pre>
show user-input &quot;What is your name?&quot;
</pre>
    </div>
    <div class="dict_entry" id="user-message">
      <h3>
        <a>user-message<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">user-message <i>value</i></span>
      </h4>
      <p>
        Opens a dialog with <i>value</i> displayed as the message.
      <p>
        <i>value</i> may be of any type, but is typically a string.
      <pre>
user-message (word &quot;There are &quot; count turtles &quot; turtles.&quot;)
</pre>
    </div>
    <div class="dict_entry" id="user-one-of">
      <h3>
        <a>user-one-of<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">user-one-of <i>value</i> <i>list-of-choices</i></span>
      </h4>
      <p>
        Opens a dialog with <i>value</i> displayed as the message and
        <i>list-of-choices</i> displayed as a popup menu for the user to
        select from.
      <p>
        Reports the item in <i>list-of-choices</i> selected by the user.
      <p>
        <i>value</i> may be of any type, but is typically a string.
      <pre>
if &quot;yes&quot; = user-one-of &quot;Set up the model?&quot; [&quot;yes&quot; &quot;no&quot;]
  [ setup ]
</pre>
    </div>
    <div class="dict_entry" id="user-yes-or-no">
      <h3>
        <a>user-yes-or-no?<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">user-yes-or-no? <i>value</i></span>
      </h4>
      <p>
        Reports true or false based on the user's response to
        <i>value</i>.
      <p>
        <i>value</i> may be of any type, but is typically a string.
      <pre>
if user-yes-or-no? &quot;Set up the model?&quot;
  [ setup ]
</pre>
    </div><!-- ======================================== -->
  </div>
    <h2>
      <a>V</a>
    </h2><!-- ======================================== -->
    <div id="V">
    <div class="dict_entry" id="variance">
      <h3>
        <a>variance<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">variance <i>list</i></span>
      </h4>
      <p>
        Reports the sample variance of a <i>list</i> of numbers. Ignores
        other types of items.
      <p>
        (Note that this computes an unbiased estimate of the variance for a
        <i>sample</i>, rather than for a whole <i>population</i>, using
        Bessel's correction.)
      <p>
        The sample variance is the sum of the squares of the deviations of
        the numbers from their mean, divided by one less than the number of
        numbers in the list.
      <pre>
show variance [2 7 4 3 5]
=&gt; 3.7
</pre>
    </div><!-- ======================================== -->
  </div>
    <h2>
      <a>W</a>
    </h2><!-- ======================================== -->
    <div id="W">
    <div class="dict_entry" id="wait">
      <h3>
        <a>wait<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">wait <i>number</i></span>
      </h4>
      <p>
        Wait the given number of seconds. (This needn't be an integer;
        you can specify fractions of seconds.) Note that you can't
        expect complete precision; the agent will never wait less than the
        given amount, but might wait slightly more.
      <pre>
repeat 10 [ fd 1 wait 0.5 ]
</pre>
      <p>
        While the agent is waiting, no other agents can do anything.
        Everything stops until the agent is done.
      <p>
        See also <a href="#every">every</a>.
      </div>
    <div class="dict_entry" id="watch">
      <h3>
        <a>watch<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">watch <i>agent</i></span>
        <img alt="Observer Command" src="images/observer.gif">
      </h4>
      <p>
        Puts a spotlight on <i>agent</i>. In the 3D view the observer will
        also turn to face the subject.
      <p>
        See also <a href="#follow">follow</a>, <a href="#subject">subject</a>, <a href="#reset-perspective">reset-perspective</a>, <a href="#watch-me">watch-me</a>.
      </div>
    <div class="dict_entry" id="watch-me">
      <h3>
        <a>watch-me<span class="since">3.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">watch-me</span>
        <img alt="Turtle Command" src="images/turtle.gif"> <img alt="Patch Command" src="images/patch.gif">
      </h4>
      <p>
        Asks the observer to watch this agent.
      <p>
        See also <a href="#watch">watch</a>.
      </div>
    <div class="dict_entry" id="while">
      <h3>
        <a>while<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">while [<i>reporter</i>] [ <i>commands</i> ]</span>
      </h4>
      <p>
        If <i>reporter</i> reports false, exit the loop. Otherwise run
        <i>commands</i> and repeat.
      <p>
        The reporter may have different values for different agents, so
        some agents may run <i>commands</i> a different number of times
        than other agents.
      <pre>
while [any? other turtles-here]
  [ fd 1 ]
;; turtle moves until it finds a patch that has
;; no other turtles on it
</pre>
    </div>
    <div class="dict_entry" id="who">
      <h3>
        <a>who</a>
      </h3>
      <h4>
        <span class="prim_example">who</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in turtle variable. It holds the turtle's
        &quot;who number&quot; or ID number, an integer greater than or
        equal to zero. You cannot set this variable; a turtle's who
        number never changes.
      <p>
        Who numbers start at 0. A dead turtle's number will not be
        reassigned to a new turtle until you use the <a href="#clear-turtles">clear-turtles</a> or <a href="#clear-all">clear-all</a> commands, at which time who numbering
        starts over again at 0.
      <p>
        Example:
      <pre>
show [who] of turtles with [color = red]
;; prints a list of the who numbers of all red turtles
;; in the Command Center, in random order
crt 100
  [ ifelse who &lt; 50
      [ set color red ]
      [ set color blue ] ]
;; turtles 0 through 49 are red, turtles 50
;; through 99 are blue
</pre>
      <p>
        You can use the turtle reporter to retrieve a turtle with a given
        who number. See also <a href="#turtle">turtle</a>.
      <p>
        Note that who numbers aren't breed-specific. No two turtles can
        have the same who number, even if they are different breeds:
      <pre>
clear-turtles
create-frogs 1
create-mice 1
ask turtles [ print who ]
;; prints (in some random order):
;; (frog 0): 0
;; (mouse 1): 1
</pre>
      <p>
        Even though we only have one mouse, it is <code>mouse 1</code> not
        <code>mouse 0</code>, because the who number 0 was already taken by the
        frog.
      </div>
    <div class="dict_entry" id="with">
      <h3>
        <a>with<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>agentset</i> with [<i>reporter</i>]</span>
      </h4>
      <p>
        Takes two inputs: on the left, an agentset (usually
        &quot;turtles&quot; or &quot;patches&quot;). On the right, a
        boolean reporter. Reports a new agentset containing only those
        agents that reported true -- in other words, the agents satisfying
        the given condition.
      <pre>
show count patches with [pcolor = red]
;; prints the number of red patches
</pre>
    </div>
    <div class="dict_entry" id="link-with">
      <h3>
        <a>&lt;breed&gt;-with</a>
        <a>link-with<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">&lt;breed&gt;-with <i>turtle</i></span>
        <span class="prim_example">link-with <i>turtle</i></span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        Report the undirected link between <i>turtle</i> and the caller. If
        no link exists then it reports nobody.
      <pre>
crt 2
ask turtle 0 [
  create-link-with turtle 1
  show link-with turtle 1 ;; prints link 0 1
]
</pre>
      <p>
        See also: <a href="#in-link-from">in-link-from</a>, <a href="#out-link-to">out-link-to</a>
      </div>
    <div class="dict_entry" id="with-max">
      <h3>
        <a>with-max<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>agentset</i> with-max [<i>reporter</i>]</span>
      </h4>
      <p>
        Takes two inputs: on the left, an agentset (usually
        &quot;turtles&quot; or &quot;patches&quot;). On the right, a
        reporter. Reports a new agentset containing all agents reporting
        the maximum value of the given reporter.
      <pre>
show count patches with-max [pxcor]
;; prints the number of patches on the right edge
</pre>
      <p>
        See also <a href="#max-one-of">max-one-of</a>, <a href="#max-n-of">max-n-of</a>.
      </div>
    <div class="dict_entry" id="with-min">
      <h3>
        <a>with-min<span class="since">2.1</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>agentset</i> with-min [<i>reporter</i>]</span>
      </h4>
      <p>
        Takes two inputs: on the left, an agentset (usually
        &quot;turtles&quot; or &quot;patches&quot;). On the right, a
        reporter. Reports a new agentset containing only those agents that
        have the minimum value of the given reporter.
      <pre>
show count patches with-min [pycor]
;; prints the number of patches on the bottom edge
</pre>
      <p>
        See also <a href="#min-one-of">min-one-of</a>, <a href="#min-n-of">min-n-of</a>.
      </div>
    <div class="dict_entry" id="with-local-randomness">
      <h3>
        <a>with-local-randomness<span class="since">4.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">with-local-randomness [ <i>commands</i> ]</span>
      </h4>
      <p>
        The commands are run without affecting subsequent random events.
        This is useful for performing extra operations (such as output)
        without changing the outcome of a model.
      <p>
        Example:
      <pre>
;; Run #1:
random-seed 50 setup repeat 10 [ go ]
;; Run #2:
random-seed 50 setup
with-local-randomness [ watch one-of turtles ]
repeat 10 [ go ]
</pre>
      <p>
        Since <code>one-of</code> is used inside
        <code>with-local-randomness</code>, both runs will be identical.
      <p>
        Specifically how it works is, the state of the random number
        generator is remembered before the commands run, then restored
        afterwards. (If you want to run the commands with a fresh random
        state instead of the same random state that will be restored later,
        you can begin the commands with <code>random-seed new-seed</code>.)
      <p>
        The following example demonstrates that the random number generator
        state is the same both before the commands run and afterwards.
      <pre>
random-seed 10
with-local-randomness [ print n-values 10 [random 10] ]
;; prints [8 9 8 4 2 4 5 4 7 9]
print n-values 10 [random 10]
;; prints [8 9 8 4 2 4 5 4 7 9]
</pre>
    </div>
    <div class="dict_entry" id="without-interruption">
      <h3>
        <a>without-interruption<span class="since">1.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">without-interruption [ <i>commands</i> ]</span>
      </h4>
      <p>
        This primitive exists only for backwards compatibility. We
        don't recommend using it in new models.
      <p>
        The agent runs all the commands in the block without allowing other
        agents using <code>ask-concurrent</code> to &quot;interrupt&quot;. That
        is, other agents are put &quot;on hold&quot; and do not run any
        commands until the commands in the block are finished.
      <p>
        Note: This command is only useful in conjunction with
        <code>ask-concurrent</code>.
      <p>
        See also <a href="#ask-concurrent">ask-concurrent</a>.
      </div>
    <div class="dict_entry" id="word">
      <h3>
        <a>word<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">word <i>value1</i> <i>value2</i></span>
        <span class="prim_example">(word <i>value1</i> ...)</span>
      </h4>
      <p>
        Concatenates the inputs together and reports the result as a
        string.
      <pre>
show word &quot;tur&quot; &quot;tle&quot;
=&gt; &quot;turtle&quot;
word &quot;a&quot; 6
=&gt; &quot;a6&quot;
set directory &quot;c:\\foo\\fish\\&quot;
show word directory &quot;bar.txt&quot;
=&gt; &quot;c:\foo\fish\bar.txt&quot;
show word [1 54 8] &quot;fishy&quot;
=&gt; &quot;[1 54 8]fishy&quot;
show (word 3)
=&gt; &quot;3&quot;
show (word &quot;a&quot; &quot;b&quot; &quot;c&quot; 1 23)
=&gt; &quot;abc123&quot;
</pre>
    </div>
    <div class="dict_entry" id="world-dim">
      <h3>
        <a>world-width<span class="since">3.1</span></a>
        <a>world-height<span class="since">3.1</span></a>
      </h3>
      <h4>
        <span class="prim_example">world-width</span>
        <span class="prim_example">world-height</span>
      </h4>
      <p>
        These reporters give the total width and height of the NetLogo
        world.
      <p>
        The width equals max-pxcor - min-pxcor + 1 and the height equals
        max-pycor - min-pycor + 1.
      <p>
        See also <a href="#max-pcor">max-pxcor</a>, <a href="#max-pcor">max-pycor</a>, <a href="#min-pcor">min-pxcor</a>, and
        <a href="#min-pcor">min-pycor</a>
      </div>
    <div class="dict_entry" id="wrap-color">
      <h3>
        <a>wrap-color<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">wrap-color <i>number</i></span>
      </h4>
      <p>
        wrap-color checks whether <i>number</i> is in the NetLogo color
        range of 0 to 140 (not including 140 itself). If it is not,
        wrap-color &quot;wraps&quot; the numeric input to the 0 to 140
        range.
      <p>
        The wrapping is done by repeatedly adding or subtracting 140 from
        the given number until it is in the 0 to 140 range. (This is the
        same wrapping that is done automatically if you assign an
        out-of-range number to the color turtle variable or pcolor patch
        variable.)
      <pre>
show wrap-color 150
=&gt; 10
show wrap-color -10
=&gt; 130
</pre>
    </div>
    <div class="dict_entry" id="write">
      <h3>
        <a>write<span class="since">2.0</span></a>
      </h3>
      <h4>
        <span class="prim_example">write <i>value</i></span>
      </h4>
      <p>
        This command will output <i>value</i>, which can be a number,
        string, list, boolean, or nobody to the Command Center, <i>not</i>
        followed by a carriage return (unlike <a href="#print">print</a>
        and <a href="#show">show</a>).
      <p>
        This agent is <i>not</i> printed before the value, unlike <a href="#show">show</a>. Its output also includes quotes around strings
        and is prepended with a space.
      <pre>
write &quot;hello world&quot;
=&gt;  &quot;hello world&quot;
</pre>
      <p>
        See also <a href="#print">print</a>, <a href="#show">show</a>, and
        <a href="#type">type</a>.
      <p>
        See also <a href="#output-cmds">output-write</a>.
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>X</a>
    </h2><!-- ======================================== -->
    <div id="X">
    <div class="dict_entry" id="xcor">
      <h3>
        <a>xcor</a>
      </h3>
      <h4>
        <span class="prim_example">xcor</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in turtle variable. It holds the current x
        coordinate of the turtle. You can set this variable to change the
        turtle's location.
      <p>
        This variable is always greater than or equal to (min-pxcor - 0.5)
        and strictly less than (max-pxcor + 0.5).
      <p>
        See also <a href="#setxy">setxy</a>, <a href="#ycor">ycor</a>,
        <a href="#pcor">pxcor</a>, <a href="#pcor">pycor</a>,
      </div>
    <div class="dict_entry" id="xor">
      <h3>
        <a>xor<span class="since">1.0</span></a>
      </h3>
      <h4>
        <span class="prim_example"><i>boolean1</i> xor <i>boolean2</i></span>
      </h4>
      <p>
        Reports true if either <i>boolean1</i> or <i>boolean2</i> is true,
        but not when both are true.
      <pre>
if (pxcor &gt; 0) xor (pycor &gt; 0)
  [ set pcolor blue ]
;; upper-left and lower-right quadrants turn blue
</pre>
    </div><!-- ======================================== -->
  </div>
    <h2>
      <a>Y</a>
    </h2><!-- ======================================== -->
    <div id="Y">
    <div class="dict_entry" id="ycor">
      <h3>
        <a>ycor</a>
      </h3>
      <h4>
        <span class="prim_example">ycor</span>
        <img alt="Turtle Command" src="images/turtle.gif">
      </h4>
      <p>
        This is a built-in turtle variable. It holds the current y
        coordinate of the turtle. You can set this variable to change the
        turtle's location.
      <p>
        This variable is always greater than or equal to (min-pycor - 0.5)
        and strictly less than (max-pycor + 0.5).
      <p>
        See also <a href="#setxy">setxy</a>, <a href="#xcor">xcor</a>,
        <a href="#pcor">pxcor</a>, <a href="#pcor">pycor</a>,
      </div><!-- ======================================== -->
    </div>
    <h2>
      <a>?</a>
    </h2><!-- ======================================== -->
    <div id="ops">
    <div class="dict_entry" id="ques">
      <h3>
        <a>?</a>
        <a>?1</a>
        <a>?2</a>
        <a>?3</a>
      </h3>
      <h4>
        <span class="prim_example">?, ?1, ?2, ?3, ...</span>
      </h4>
      <p>
        These special variable names refer to the inputs to a task, in
        order by number.
      <p>
        <code>?</code> is always equivalent to <code>?1</code>.
      <p>
        You may not set these variables, and you may not use them except in
        the context of a task.
      <p>
        Tasks are commonly used with the primitives <a href="#foreach">foreach</a>, <a href="#map">map</a>, <a href="#reduce">reduce</a>, <a href="#filter">filter</a>, <a href="#sort-by">sort-by</a>, and <a href="#n-values">n-values</a>. See
        those entries for example usage.
      <p>
        See the <a href="programming.html#tasks">Tasks section</a> of the
        Programming Guide for more details.
      </div>

