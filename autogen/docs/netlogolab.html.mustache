<!DOCTYPE html>
<html lang="en">
  <head>
    <title>
      NetLogo {{version}} User Manual: NetLogoLab and the GoGo Board Extension
    </title>
    <link rel="stylesheet" href="netlogo.css" type="text/css">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  </head>
    <!--
- Explain why we need the third party installer, and what it does.
- Document and explain timeouts of attempts to communicate with device when it is not hooked up properly, or wrong serial port used.
- Change Ping to Test in GoGoMonitor and have it pop up a success message when good
- Improve GoGo Board is not responding message, with some suggested thing to look for or try (such as, specifying a different serial port, turning board on etc... )
-->
  <body>
    <h1>
      NetLogoLab and the GoGo Board Extension
    </h1>
    <h2>
      What is NetLogoLab?
    </h2>
    <p>
      NetLogoLab is the technological infrastructure that connects NetLogo
      and the physical world. It can be used for robotics, interactive art,
      scientific investigations, and model validation. This infrastructure
      was created at the CCL by <a href="http://www.blikstein.com/paulo">Paulo Blikstein</a> and Uri Wilensky
      in 2005 as part of the <a href="https://tltlab.org/bifocal-modeling/">Bifocal
      Modeling</a> project. For more information, please check the new and
      <a href="http://ccl.northwestern.edu/netlogolab/">old</a> websites,
      where you will find academic papers, models, and demos.
    <p>
      NetLogoLab is comprised of the following software and hardware
      components:
    <ol>
      <li>A NetLogo extension to control a robotics or data-logging board.
      <li>A robotics or data-logging board (also know as a serial interface
      board, or analog-to-digital board).
      <li>Sensor and actuator toolkits.
      <li>NetLogo models.
      </ol>
    <p>
      NetLogo's robotics/data-logging board of choice is the <a href="http://www.gogoboard.org/" target="_blank">GoGo Board</a>, an
      open-source, easy-to-build, low-cost interface designed by
      <a href="http://web.media.mit.edu/*arnans/" target="_blank">
      Arnan Sipitakiat</a> and <a href="http://www.blikstein.com/paulo">
      Paulo Blikstein</a>, first at the MIT Media Lab, then at
      Northwestern's CCL, and is in continuous refinement. Other robotics
      hardware can be used with NetLogo, including those that are
      commercially available, such as <a href="http://www.arduino.cc/" target="_blank">Arduino</a> boards, <a href="http://www.vernier.com/" target="_blank">Vernier</a> and <a href="http://www.pasco.com/" target="_blank">Pasco</a> sensors and actuators, <a href="http://www.phidgets.com/" target="_blank">Phidgets</a>,
      and <a href="http://www.vexrobotics.com/" target="_blank">VEX</a>
      kits, but specific extensions have not yet been developed for each of
      those platforms. So far, only the GoGo Board extension is available
      with NetLogo's standard distribution.
    <h3>
      The GoGo Board NetLogo extension
    </h3>
    <p>
      The GoGo Extension for NetLogo provides primitives to communicate
      with a GoGo Board. This enables the user to connect NetLogo with the
      physical world using sensors, motors, light bulbs, LEDs, relays and
      other devices.
    <h3>
      GoGo Board: a low-cost robotics and data-logging board
    </h3>
    <p>
      A <a href="http://www.gogoboard.org/">GoGo Board</a>
      is a low cost, general purpose serial interface
      board especially designed to be used in school and for educational
      projects. It was created by <a href="http://www.media.mit.edu/*7Earnans">Arnan Sipitakiat</a> and
      <a href="http://www.blikstein.com/paulo">Paulo Blikstein</a> at the
      <a href="http://www.media.mit.edu">MIT Media Lab</a> in 2001, and has
      been actively developed since then. It is currently used in over 10
      countries, such as the United States, China, Thailand, South Korea,
      Brazil, Portugal, Mexico, Malaysia, and Egypt. For more information see the
      <a href="https://gogoboard.org/about/">the gogo board about page</a>.
    <p>
      Up to 8 sensors (i.e., temperature, light, pressure) and 4 output
      devices (i.e., motors, light bulbs, LEDs, relays) can be connected to
      the board simultaneously. The board also has a connector for add-on
      devices (such as displays, Bluetooth or ZigBee wireless modules,
      voice recorders, real-time clock, and GPS).
    <h3>
      Sensor and actuator toolkits
    </h3>
    <p>
      NetLogo models can interact with the physical world in two ways.
      First, they can gather data from the environment. This information
      can be used by the model to change or calibrate its behavior. This
      data is gathered using electronic sensors, which can measure a wide
      range of phenomena: temperature, light, touch (see pictures below),
      pH, chemical concentration, pressure, etc.
    <p>
      <img src="images/gogo/netlogolab-temperature_sensor.jpg" alt="Temperature sensor"> <img src="images/gogo/netlogolab-light_sensor.jpg" alt="Light sensor">
      <img src="images/gogo/netlogolab-touch_sensor.jpg" alt="Touch sensor">
    <p>
      The second mode of interaction between NetLogo and the physical world
      is the control of output devices, or &quot;actuators&quot; - motors,
      light bulbs (see pictures below), LEDs, and more complex devices that
      include these outputs such as toys, remote controlled cars,
      electrical appliances, and automated laboratory equipment.
    <p>
      <img src="images/gogo/netlogolab-motor.jpg" alt="Motor" width="266" height="200"> <img src="images/gogo/netlogolab-bulbs.jpg" alt="" width="472" height="200">
    <p>
      For educators willing to start robotics or sensing projects, there
      are some important considerations regarding the exact type of sensors
      and actuators to use - for example, the sturdiness, reliability,
      &quot;openness&quot;, and cost of these devices. Both vary greatly in
      price and complexity. For example, for most educational projects,
      off-the-shelf, generic, low-cost sensors can be used with very
      reliable results. A generic temperature sensor with a precision of
      0.5 degrees Celsius can be purchased for approximately US$ 1.00 at
      most sensor and electronics retailers. Using generic, low-cost
      sensors requires very basic knowledge of electronics. For example,
      some basic soldering might be needed to attach a piece of wire to the
      sensors. While this is feasible in schools and has been tried in
      several educational settings, some educators might prefer to buy
      proprietary sensors and actuators, which come assembled and ready to
      be used. Some companies offer proprietary systems for educational
      sensing which are more sturdy and reliable than generic sensors, but
      are also much more expensive. As a comparison, a proprietary
      temperature sensor could cost as much as US$ 50.00. Actuators follow
      the same rule: for example, a generic geared motor could cost from
      US$ 3 to 10, while a proprietary version would retail for US$ 30 or
      40.
    <p>
      Sensors and actuators can be found through online retailers such as
      <a href="http://www.digikey.com/" target="_blank">Digikey</a>,
      <a href="http://www.mouser.com/" target="_blank">Mouser</a>, <a href="http://www.phidgets.com/" target="_blank">Phidgets</a>, <a href="http://www.sparkfun.com" target="_blank">Spark Fun</a>, and <a href="http://www.solarbotics.com/" target="_blank">Solarbotics</a>. More
      information about how to make sensors is available from an
      &quot;<a href="https://learning.media.mit.edu/projects/gogo/documents/making*20sensors.html" target="_blank">Making Sensors</a>&quot; from an old version of the GoGo board web site.
    <h3>
      NetLogo models
    </h3>
    <p>
      To make use of the GoGo Board extension and the NetLogoLab framework,
      users need to create NetLogo models using the special primitives made
      available by the extension. Later in this document, we will provide
      examples of models that do this.
    <h2>
      How to get a GoGo Board?
    </h2>
    <p>
      Gogo Boards can be purchased from the <a href="https://www.seeedstudio.com/GoGo-Board-Kit-p-2717.html" target="_blank">SEED Foundation</a>.
    <h2>
      Installing and testing the GoGo Extension
    </h2>
    <p>
      The GoGo Board connects with the computer via the USB port. Turn the GoGo Board on using the switch behind the
      power connector: the board will beep twice and the red light will
      turn on.
    <h3>
      Windows
    </h3>
    <ul>
      <li>
        <b>Windows</b>
        <p>
          Plug in your GoGo board and go to <a href="https://code.gogoboard.org/">https://code.gogoboard.org/</a>. The
          website should prompt you to download the gogo plugin for Windows. You
          can now try using the NetLogo GoGo extension. If you don't have Java
          installed, you will be prompted to locate your java execuatable. You
          will need to install Java to get the extension to work. We recommend
          using the Liberica JDK 8 installer here: <a href="https://bell-sw.com/pages/downloads/*/java-8-lts">https://bell-sw.com/pages/downloads/#/java-8-lts</a>

    <h3>
      Mac OS X
    </h3>
    <p>
      The GoGo extension requires no special installation on Mac OS X.
    <h3>
      Linux
    </h3>
    <p>
      Many versions of Linux require no special installation.

    <h2>
      Using the GoGo Extension
    </h2>
    <p>
      The GoGo Extension comes preinstalled when you download and install
      NetLogo. To use the extension in your model, add this line to the top
      of your Code tab:
    <pre>
extensions [gogo]
</pre>
    <p>
      If your model already uses other extensions, then it already has an
      <a href="dictionary.html#extensions"><code>extensions</code></a> line in
      it, so just add <code>gogo</code> to the list.
    <p>
      After loading the extension, you can see if the gogo board is connected by
      seeing if it will beep when you type into the command center:
    <pre>
  gogo:beep
</pre>

    <p>
      For more information on NetLogo extensions, see the <a href="extensions.html">Extensions Guide</a>.
    <p>
      For examples that use the GoGo extension, GoGoMonitor and GoGoMonitorSimple
      models in the Models Library.
    <h2>
      Examples of NetLogoLab models
    </h2>
    <h3>
      Controlling a car
    </h3>
    <p>
      The first step when creating a NetLogoLab model is to add the
      <a href="dictionary.html#extensions"><code>extensions</code></a> keyword
      to NetLogo's Code tab. Just go to the Code tab and add this line:
    <pre>
extensions [gogo]
</pre>

    <p>
      Now let's start the model. Imagine that we want to
      control a car with four wheels and two motors attached to the back
      wheels. We will assume that you have built such as car and connected
      the motors to the output ports &quot;a&quot; and &quot;b&quot; on the
      GoGo board. One very simple approach could be to create two buttons
      for each motor, &quot;on&quot; and &quot;off&quot;:
    <p>
      <img src="images/gogo/netlogolab-example1-on_off_buttons.png" alt="on off buttons" width="277" height="312">
    <p>
      The code associated with these buttons is very simple: for the
      &quot;on&quot; button, we could simply have
    <pre>
gogo:talk-to-output-ports [&quot;a&quot;]<br>gogo:output-port-on
</pre>
    <p>
      For the off button, it would be very similar:
    <pre>
gogo:talk-to-output-ports [&quot;a&quot;]
gogo:output-port-off
</pre>
    <p>
      The other set of &quot;on&quot; and &quot;off&quot; buttons, used to
      control the second motor, would have very similar code, except that
      we would use the second output port (&quot;b&quot;), so:
    <pre>
gogo:talk-to-output-ports [&quot;b&quot;]
</pre>
    <p>
      We could make our model more interesting by adding a &quot;toggle
      direction&quot; button, adding a button with the following code,
      which would reverse the direction of motors &quot;a&quot; and
      &quot;b&quot;:
    <pre>
gogo:talk-to-output-ports [&quot;a&quot; &quot;b&quot;]
gogo:output-port-reverse
</pre>
    <h3>
      A simple sensing project
    </h3>
    <p>
      To create a simple sensing project, we will assume that you have
      added the GoGo extension to your model and successfully opened a
      connection to the GoGo board, i.e., adding the &quot;extensions&quot;
      command to the Code Tab. For this sensing project we do not need motors,
      but we will need another device: a temperature sensor. A standard GoGo board
      comes with a temperature sensor. It is labeled (TEMP Sensor). More info on
      the sensors that come standard with a gogo board can be found <a href="https://docs.gogoboard.org/#/en/sensor/sensor-set" target="_blank">in the GoGo Docs</a>.

      The simplest use of a temperature sensor, obviously, is to display
      the temperature. We could achieve this by plugging the sensor in to input 1
      and adding a monitor to the NetLogo interface with this code:
    <pre>
  gogo:read-sensor 1
</pre>
    <p>
      <!-- <img src="images/gogo/netlogolab-example2-monitor.png" alt="Sensor monitor" width="400" height="237"> -->
    <p>
      The Gogo docs say, "Note that the readout is not in Celsius or Fahrenheit.
      The value is reflects the resistance of the sensor. Mappings between the
      resistance and the standard units must be done manually." So, to figure
      out how these values map to a real temperature, you will need to use a thermometer
      and see how the reading on the temperature sensor corresponds to the temperature in degrees.
      If you found out that the conversion is to divide by 30, the monitor
      on the NetLogo interface could be changed to:
    <pre>
  gogo:sensor 1 / 30
</pre>
    <p>
      The sensor value could also be used to control on-screen objects,
      such as turtles. For example, let us create two buttons: a
      &quot;create one turtle&quot; button, which will clear the world and
      create a turtle, and a &quot;move with heat&quot; button, that will
      cause the turtle to move forwards depending on the temperature
      reading from the sensor. The code would look like this:
    <pre>
to create-one-turtle
  clear-all
  create-turtle
end

to move-with-heat
  if gogo:read-sensor 1 &gt; 500
    [ forward 1 ]
end
</pre>
    <p>
      If the &quot;move with heat&quot; forever button is activated and the
      user heats up the sensor (by rubbing it, or <em>slowly</em> bringing
      a flame near it), the heat threshold will be achieved (&gt; 500) and
      the turtle will move.
    <p>
      A more elaborate use of this sensor apparatus would be to control
      output devices, such as motors. The user could, for example, turn a
      motor on when the value from the temperature sensor reaches 500,
      using the following code:
    <pre>
to turn-motor-on-with-heat
  if gogo:read-sensor 1 &gt; 500
  [
    gogo:talk-to-output-ports [&quot;a&quot;]
    gogo:output-port-on
  ]
end
</pre>
    <p>
      Another possible use of the sensing primitives is to plot and log
      data. Logging could be useful for more elaborate data analysis and
      comparison, and can be achieved with NetLogo's list commands. For
      example, if the user wants to log sensor values from sensor 1 every
      0.5 seconds, the code could look like this:
    <pre>
to log-data-from-sensor
  set data-vector lput (gogo:read-sensor 1) data-vector
  wait 0.5
end
</pre>
    <p>
      Finally, plotting data is straightforward. The following code, for
      example, would create a graph for the value of sensor 1:
    <pre>
plot (gogo:read-sensor 1)
</pre>
    <p>
      For more information on the GoGo Board's extensions
      functionalities and primitives, please refer to these two sample
      models: GoGoMonitor.nlogo and GoGoMonitorSimple.nlogo and see the
      <a href="http://ccl.northwestern.edu/netlogo/docs/gogo.html" target="_blank">documentation for GoGo Extension</a>.
  </body>
</html>
