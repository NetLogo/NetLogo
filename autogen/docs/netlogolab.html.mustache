<!DOCTYPE html>
<title>
      NetLogo {{version}} User Manual: NetLogoLab and the GoGo Board Extension
    </title>
    <link rel="stylesheet" href="netlogo.css" type="text/css">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <!--
- Explain why we need the third party installer, and what it does.
- Document and explain timeouts of attempts to communicate with device when it is not hooked up properly, or wrong serial port used.
- Change Ping to Test in GoGoMonitor and have it pop up a success message when good
- Improve GoGo Board is not responding message, with some suggested thing to look for or try (such as, specifying a different serial port, turning board on etc... )
-->
  <h1>
      NetLogoLab and the GoGo Board Extension
    </h1>
    <h2>
      What is NetLogoLab?
    </h2>
    <p>
      NetLogoLab is the technological infrastructure that connects NetLogo
      and the physical world. It can be used for robotics, interactive art,
      scientific investigations, and model validation. This infrastructure
      was created at the CCL by <a href="http://www.blikstein.com/paulo">Paulo Blikstein</a> and Uri Wilensky
      in 2005 as part of the <a href="http://tltl.stanford.edu/projects/bifocal-modeling">Bifocal
      Modeling</a> project. For more information, please check the new and
      <a href="http://ccl.northwestern.edu/netlogolab/">old</a> websites,
      where you will find academic papers, models, and demos.
    <p>
      NetLogoLab is comprised of the following software and hardware
      components:
    <ol>
      <li>A NetLogo extension to control a robotics or data-logging board.
      <li>A robotics or data-logging board (also know as a serial interface
      board, or analog-to-digital board).
      <li>Sensor and actuator toolkits.
      <li>NetLogo models.
      </ol>
    <p>
      NetLogo's robotics/data-logging board of choice is the <a href="http://www.gogoboard.org/" target="_blank">GoGo Board</a>, an
      open-source, easy-to-build, low-cost interface designed by
      <a href="http://web.media.mit.edu/~arnans/" target="_blank">
      Arnan Sipitakiat</a> and <a href="http://www.blikstein.com/paulo">
      Paulo Blikstein</a>, first at the MIT Media Lab, then at
      Northwestern's CCL, and is in continuous refinement. Other robotics
      hardware can be used with NetLogo, including those that are
      commercially available, such as <a href="http://www.arduino.cc/" target="_blank">Arduino</a> boards, <a href="http://www.vernier.com/" target="_blank">Vernier</a> and <a href="http://www.pasco.com/" target="_blank">Pasco</a> sensors and actuators, <a href="http://www.phidgets.com/" target="_blank">Phidgets</a>, <a href="http://mindstorms.lego.com/" target="_blank">Lego robotics</a> kits,
      and <a href="http://www.vexrobotics.com/" target="_blank">VEX</a>
      kits, but specific extensions have not yet been developed for each of
      those platforms. So far, only the GoGo Board extension is available
      with NetLogo's standard distribution.
    <h3>
      The GoGo Board NetLogo extension
    </h3>
    <p>
      The GoGo Extension for NetLogo provides primitives to communicate
      with a GoGo Board. This enables the user to connect NetLogo with the
      physical world using sensors, motors, light bulbs, LEDs, relays and
      other devices.
    <h3>
      GoGo Board: a low-cost robotics and data-logging board
    </h3>
    <p>
      A <a href="http://www.gogoboard.org/">GoGo Board</a> is an open
      source, easy-to-build, low cost, general purpose serial interface
      board especially designed to be used in school and for educational
      projects. It was created by <a href="http://www.media.mit.edu/%7Earnans">Arnan Sipitakiat</a> and
      <a href="http://www.blikstein.com/paulo">Paulo Blikstein</a> at the
      <a href="http://www.media.mit.edu">MIT Media Lab</a> in 2001, and has
      been actively developed since then. It is currently used in over 10
      countries, such as the United States, China, Thailand, South Korea,
      Brazil, Portugal, Mexico, Malaysia, and Egypt.
    <p>
      Up to 8 sensors (i.e., temperature, light, pressure) and 4 output
      devices (i.e., motors, light bulbs, LEDs, relays) can be connected to
      the board simultaneously. The board also has a connector for add-on
      devices (such as displays, Bluetooth or ZigBee wireless modules,
      voice recorders, real-time clock, and GPS).
    <h3>
      Sensor and actuator toolkits
    </h3>
    <p>
      NetLogo models can interact with the physical world in two ways.
      First, they can gather data from the environment. This information
      can be used by the model to change or calibrate its behavior. This
      data is gathered using electronic sensors, which can measure a wide
      range of phenomena: temperature, light, touch (see pictures below),
      pH, chemical concentration, pressure, etc.
    <p>
      <img src="images/gogo/netlogolab-temperature_sensor.jpg" alt="Temperature sensor"> <img src="images/gogo/netlogolab-light_sensor.jpg" alt="Light sensor">
      <img src="images/gogo/netlogolab-touch_sensor.jpg" alt="Touch sensor">
    <p>
      The second mode of interaction between NetLogo and the physical world
      is the control of output devices, or &quot;actuators&quot; - motors,
      light bulbs (see pictures below), LEDs, and more complex devices that
      include these outputs such as toys, remote controlled cars,
      electrical appliances, and automated laboratory equipment.
    <p>
      <img src="images/gogo/netlogolab-motor.jpg" alt="Motor" width="266" height="200"> <img src="images/gogo/netlogolab-bulbs.jpg" alt="" width="472" height="200">
    <p>
      For educators willing to start robotics or sensing projects, there
      are some important considerations regarding the exact type of sensors
      and actuators to use - for example, the sturdiness, reliability,
      &quot;openness&quot;, and cost of these devices. Both vary greatly in
      price and complexity. For example, for most educational projects,
      off-the-shelf, generic, low-cost sensors can be used with very
      reliable results. A generic temperature sensor with a precision of
      0.5 degrees Celsius can be purchased for approximately US$ 1.00 at
      most sensor and electronics retailers. Using generic, low-cost
      sensors requires very basic knowledge of electronics. For example,
      some basic soldering might be needed to attach a piece of wire to the
      sensors. While this is feasible in schools and has been tried in
      several educational settings, some educators might prefer to buy
      proprietary sensors and actuators, which come assembled and ready to
      be used. Some companies offer proprietary systems for educational
      sensing which are more sturdy and reliable than generic sensors, but
      are also much more expensive. As a comparison, a proprietary
      temperature sensor could cost as much as US$ 50.00. Actuators follow
      the same rule: for example, a generic geared motor could cost from
      US$ 3 to 10, while a proprietary version would retail for US$ 30 or
      40.
    <p>
      Sensors and actuators can be found through online retailers such as
      <a href="http://www.digikey.com/" target="_blank">Digikey</a>,
      <a href="http://www.mouser.com/" target="_blank">Mouser</a>, <a href="http://www.phidgets.com/" target="_blank">Phidgets</a>, <a href="http://www.sparkfun.com" target="_blank">Spark Fun</a>, and <a href="http://www.solarbotics.com/" target="_blank">Solarbotics</a>. More
      information about how to make sensors is available from the
      &quot;<a href="http://www.gogoboard.org/node/12" target="_blank">How
      to Make Sensors</a>&quot; web page on the GoGo board web site.
    <h3>
      NetLogo models
    </h3>
    <p>
      To make use of the GoGo Board extension and the NetLogoLab framework,
      users need to create NetLogo models using the special primitives made
      available by the extension. Later in this document, we will provide
      examples of models that do this.
    <h2>
      How to get a GoGo Board?
    </h2>
    <p>
      The GoGo Board is open source hardware (see the Open Hardware License
      <a href="http://www.openhardwaresummit.org/oshw-definition-v1-0/">here</a>),
      so anyone can freely make one or even sell them. To get a GoGo Board,
      you have to build one yourself, ask/hire someone to do it for you, or
      buy from some of the existing retailers such as the <a href="http://www.seedstore.slb.com/product-listing.asp?CID target="_blank">SEED Foundation</a> (or see a list <a href="http://gogoboard.stanford.edu/buy" target="_blank">here</a>.) Many
      electronics assembly companies also can assemble boards, but they
      normally require a minimum quantity, which can range from 5 to 50.
      The main resource about the GoGo Board is the web site <a href="http://www.gogoboard.org/" target="_blank">www.gogoboard.org</a>,
      where you will find step-by-step instructions on how to buy
      components, design the printed circuit board, and assemble it - the
      board was especially designed to be easy and cheap to build, even if
      you don't have electronics skills. The GoGo Board mailing list is
      gogoboard@yahoogroups.com, and you can join it by going to <a href="http://groups.yahoo.com/group/gogoboard/" target="_blank">Yahoo
      groups</a>.
    <h2>
      Installing and testing the GoGo Extension
    </h2>
    <p>
      The GoGo Board connects with the computer via the USB port (older
      versions used the serial port which required a USB-to-Serial adapter
      -- one model that worked quite well was the Keyspan <a href="http://www.keyspan.com/products/usa19hs/" target="_blank">USA-19HS</a>). To connect, make sure to plug the USB cable
      into the computer. Turn the GoGo Board on using the switch behind the
      power connector: the board will beep twice and the red light will
      turn on.
    <h3>
      Windows
    </h3>
    <ul>
      <li>
        <b>Windows 7 and Vista:</b>
        <ul>
          <li>When you start a NetLogo model that uses the GoGo extension,
          it will check to see if you have the proper drivers installed. If
          it detects that you do not, NetLogo will offer to launch a small
          program that will install the drivers for you (but note that you
          will need to have &quot;administrator&quot; access to the
          computer in order to do so (basically, Windows will ask you to
          click a button to confirm that you really want to run the
          program). You will also need to accept an &quot;unsigned&quot;
          driver (this does not mean you are installing anything harmful,
          it just means that the driver file was not officially recognized
          by Microsoft as an &quot;official&quot; driver, but the file
          comes from the GoGo board creators and is 100% safe.)
          <li>If you already have the drivers installed and <i>still</i>
          receive the popup, please select &quot;Halt and Don't Remind
          Me Again&quot; to prevent any further notices.
          <li>If installing the GoGo Board drivers through NetLogo does not
          work correctly for you, please view the instructions for Windows
          advanced installation and see <a href="contact.html">Contacting Us</a>.
          </ul>
      <li>
        <b>Windows advanced installation:</b> Unfortunately, the driver
        installer does not always work properly on Windows.
        <ol>
          <li>One possible solution is to download and install the
            <a href="http://www.gogoboard.org/downloads-hardware" target="_blank">GoGo Monitor for Windows</a>.
          <li>If you don't want to download the GoGo Monitor, you can
          also install the driver more manually. To do so, please follow
          these steps:
            <ul>
              <li>Go to your Windows Control Panel and open Device Manager
              <li>Look for a device called &quot;SERIAL DEMO&quot;,
              right-click it, and select &quot;Update driver software&quot;
              <li>Choose to browse for the driver manually
              <li>Navigate to the &quot;Windows&quot; folder in your GoGo
              extension installation (likely something along the lines of
              &quot;C:\Program Files\NetLogo
              5.x\extensions\gogo\Windows&quot;), and select the file named
              &quot;gogo_cdc_NTXPVista.inf&quot;
              <li>Proceed through the driver installation wizard to
              complete the installation
              <li>
                <u><b>Note</b></u>: Depending on your computer, this
                process may install the driver for <i>only</i> the current
                USB port that the GoGo board is plugged into. That is, if
                the GoGo board is later connected to a different USB port,
                you may have to repeat this process in order for it to be
                recognized from that port.
              </ul>
          </ol>
      </ul>
    <h3>
      Mac OS X
    </h3>
    <p>
      The GoGo extension requires no special installation on Mac OS X. The
      only issue for now, due to a bug in the open source software we use
      for controlling the serial port, is that you CANNOT use the
      &quot;gogo:close&quot; command, or execute the &quot;gogo:open&quot;
      twice. This will be fixed as soon as we get the updated software from
      the RXTX team. If you are using any of the example models (GoGo
      Monitor and GoGo Monitor Simple), DO NOT click on &quot;setup&quot;
      twice -- click once and wait some seconds for the connection to be
      made.
    <h3>
      Linux
    </h3>
    <p>
      Many versions of Linux require no special installation. However, if
      you face problems, ensure that you are able to write to the serial
      devices (usually, this means <code>/dev/ttyS*</code>). In most Linux
      distributions this can be set up through the User Manager.
    <h2>
      Using the GoGo Extension
    </h2>
    <p>
      The GoGo Extension comes preinstalled when you download and install
      NetLogo. To use the extension in your model, add this line to the top
      of your Code tab:
    <pre>
extensions [gogo]
</pre>
    <p>
      If your model already uses other extensions, then it already has an
      <a href="dictionary.html#extensions"><code>extensions</code></a> line in
      it, so just add <code>gogo</code> to the list.
    <p>
      After loading the extension, see what ports are available by typing
      the following into the command center:
    <pre>
print gogo:ports
</pre>
    <p>
      You can open the serial port that the GoGo Board is connected to so
      that commands can begin to be sent to the board by using the
      <code><a href="dictionary.html#gogo:open">gogo:open</a></code> command.
      To make sure the board is properly connected, check that it is
      responding with the <a href="dictionary.html#gogo:ping"><code>ping</code></a> reporter. Note that in
      order to communicate with the board, you need to know which
      communications port it is connected to. If you are not sure which
      port is being used, you can use the <a href="dictionary.html#gogo:ports"><code>gogo:ports</code></a> primitive (see
      below), or you can find out by using the Device Manager on a Windows
      computer (in the Control Panel, click on the System icon), or the
      System Profiler on Mac OS X.
    <p>
      On Windows:
    <pre>
gogo:open &quot;COM1&quot;
print gogo:ping
</pre>
    <p>
      On Linux:
    <pre>
gogo:open &quot;/dev/ttyS01&quot;
print gogo:ping
</pre>
    <p>
      On Mac:
    <pre>
gogo:open &quot;/dev/tty.KeySerial1&quot;
print gogo:ping
</pre>
    <p>
      For more information on NetLogo extensions, see the <a href="extensions.html">Extensions Guide</a>.
    <p>
      For examples that use the GoGo extension, see the Robotics/NetLogoLab
      section under Sample Models in NetLogo's Models Library.
    <h2>
      Examples of NetLogoLab models
    </h2>
    <h3>
      Controlling a car
    </h3>
    <p>
      The first step when creating a NetLogoLab model is to add the
      <a href="dictionary.html#extensions"><code>extensions</code></a> keyword
      to NetLogo's Code tab. Just go to the Code tab and add this line:
    <pre>
extensions [gogo]
</pre>
    <p>
      The second step is to create a button to connect NetLogo to the GoGo
      board using the correct serial port for your operating system as
      described above.
    <pre>
gogo:open &quot;COM1&quot; ;; (for Windows machines)
</pre>
    <p>
      When you are done creating the button, the &quot;edit&quot; dialog
      should look like this:
    <p>
      <img src="images/gogo/netlogolab-example1-setup_button.png" alt="setup button">
    <p>
      Now let's actually start the model. Imagine that we want to
      control a car with four wheels and two motors attached to the back
      wheels. We will assume that you have built such as car and connected
      the motors to the output ports &quot;a&quot; and &quot;b&quot; on the
      GoGo board. One very simple approach could be to create two buttons
      for each motor, &quot;on&quot; and &quot;off&quot;:
    <p>
      <img src="images/gogo/netlogolab-example1-on_off_buttons.png" alt="on off buttons" width="277" height="312">
    <p>
      The code associated with these buttons is very simple: for the
      &quot;on&quot; button, we could simply have
    <pre>
gogo:talk-to-output-ports [&quot;a&quot;]<br>gogo:output-port-on
</pre>
    <p>
      For the off button, it would be very similar:
    <pre>
gogo:talk-to-output-ports [&quot;a&quot;]
gogo:output-port-off
</pre>
    <p>
      The other set of &quot;on&quot; and &quot;off&quot; buttons, used to
      control the second motor, would have very similar code, except that
      we would use the second output port (&quot;b&quot;), so:
    <pre>
gogo:talk-to-output-ports [&quot;b&quot;]
</pre>
    <p>
      We could make our model more interesting by adding a &quot;toggle
      direction&quot; button, adding a button with the following code,
      which would reverse the direction of motors &quot;a&quot; and
      &quot;b&quot;:
    <pre>
gogo:talk-to-output-ports [&quot;a&quot; &quot;b&quot;]
gogo:output-port-reverse
</pre>
    <h3>
      A simple sensing project
    </h3>
    <p>
      To create a simple sensing project, we will assume that you have
      added the GoGo extension to your model and successfully opened a
      connection to the GoGo board, i.e., adding the &quot;extensions&quot;
      command to the Code Tab and adding a &quot;setup&quot; button as
      previously described. For this sensing project we do not need motors,
      but we will need another device: a temperature sensor (click to see
      <a href="http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail?name target="_blank">more information about a typical temperature
      sensor</a> at Digikey's web site). Instructions on how to
      purchase and assemble a temperature sensor can be found in the
      <a href="http://www.gogoboard.org/cocoon/gogosite/documentation/makingSensors.xsp?lang target="_blank">&quot;Making Sensors&quot; tutorial on the GoGo
      Board's web site</a>. This is how a temperature sensor will look
      after it has been assembled:
    <p>
      <img src="images/gogo/netlogolab-temperature_sensor.jpg" alt="Temperature sensor">
    <p>
      The simplest use of a temperature sensor, obviously, is to display
      the temperature. We could achieve this by adding a monitor to the
      NetLogo interface with this code:
    <pre>
gogo:sensor 1
</pre>
    <p>
      <img src="images/gogo/netlogolab-example2-monitor.png" alt="Sensor monitor" width="400" height="237">
    <p>
      The sensor values shown are arbitrary numbers within a given range,
      and need to be properly converted to actual temperature units such as
      degrees Celsius or Fahrenheit. For all sensors, the GoGo Board's
      reporting range is from 0 to 1023. Every sensor comes with a data
      sheet with a converting formula or table that will transform the
      arbitrary 0-1023 range into an actual physical unit. Let us imagine
      that the sensor's data sheet contains a conversion formula that
      looks like this: <em>degrees = arbitrary value / 30</em>. The monitor
      on the NetLogo interface could be changed to:
    <pre>
gogo:sensor 1 / 30
</pre>
    <p>
      The sensor value could also be used to control on-screen objects,
      such as turtles. For example, let us create two buttons: a
      &quot;create one turtle&quot; button, which will clear the world and
      create a turtle, and a &quot;move with heat&quot; button, that will
      cause the turtle to move forwards depending on the temperature
      reading from the sensor. The code would look like this:
    <pre>
to create-one-turtle
  clear-all
  create-turtle
end

to move-with-heat
  if gogo:sensor 1 &lt; 500
    [ forward 1 ]
end
</pre>
    <p>
      If the &quot;move with heat&quot; forever button is activated and the
      user heats up the sensor (by rubbing it, or <em>slowly</em> bringing
      a flame near it), the heat threshold will be achieved (&lt; 500) and
      the turtle will move. (Note that we are using one kind of temperature
      sensor for which resistance <em>decreases</em> with temperature, and
      so the sensor readings will go down as we heat the sensor up. This is
      a very common and inexpensive off-the-shelf sensor).
    <p>
      A more elaborate use of this sensor apparatus would be to control
      output devices, such as motors. The user could, for example, turn a
      motor on when the value from the temperature sensor reaches 500,
      using the following code:
    <pre>
to turn-motor-on-with-heat
  if gogo:sensor 1 &lt; 500
  [
    gogo:talk-to-output-ports [&quot;a&quot;]
    gogo:output-port-on
  ]
end
</pre>
    <p>
      Another possible use of the sensing primitives is to plot and log
      data. Logging could be useful for more elaborate data analysis and
      comparison, and can be achieved with NetLogo's list commands. For
      example, if the user wants to log sensor values from sensor 1 every
      0.5 seconds, the code could look like this:
    <pre>
to log-data-from-sensor
  set data-vector lput (gogo:sensor 1) data-vector
  wait 0.5
end
</pre>
    <p>
      Finally, plotting data is straightforward. The following code, for
      example, would create a graph for the value of sensor 1:
    <pre>
plot (gogo:sensor 1)
</pre>
    <p>
      For more information on the GoGo Board's extensions
      functionalities and primitives, please refer to these two sample
      models: GoGoMonitor.nlogo and GoGoMonitorSimple.nlogo.
    <h2>
      Primitives
    </h2>
    <p>
      <a href="#gogo:beep">gogo:beep</a>
      <a href="#gogo:burst-value">gogo:burst-value</a>
      <a href="#gogo:close">gogo:close</a>
      <a href="#gogo:install">gogo:install</a>
      <a href="#gogo:led-off">gogo:led-off</a>
      <a href="#gogo:led-on">gogo:led-on</a>
      <a href="#gogo:open">gogo:open</a>
      <a href="#gogo:openp">gogo:open?</a>
      <a href="#gogo:ports">gogo:ports</a>
      <a href="#gogo:output-port-coast">gogo:output-port-coast</a>
      <a href="#gogo:output-port-off">gogo:output-port-off</a>
      <a href="#gogo:output-port-reverse">gogo:output-port-reverse</a>
      <a href="#gogo:output-port-thatway">gogo:output-port-[that|this]way</a>
      <a href="#gogo:ping">gogo:ping</a>
      <!-- <a href="#read-sensors">read-sensors</a> -->
       <a href="#gogo:sensor">gogo:sensor</a>
       <a href="#gogo:set-burst-mode">gogo:set-burst-mode</a>
       <a href="#gogo:set-output-port-power">gogo:set-output-port-power</a>
       <a href="#gogo:set-servo">gogo:set-servo</a>
       <a href="#gogo:stop-burst-mode">gogo:stop-burst-mode</a>
       <a href="#gogo:talk-to-output-ports">gogo:talk-to-output-ports</a>
       <div class="dict_entry" id="gogo:beep">
         <h3>
           <a>gogo:beep</a>
         </h3>
         <h4>
           <span class="prim_example">gogo:beep</span>
         </h4>
         <p>
         Sends a signal to the GoGo Board to make it emit an audible beep.
         Useful for a testing purposes.
         <p>
         Example:
         <pre>
gogo:beep
</pre>
         </div>
         <div class="dict_entry" id="gogo:burst-value">
           <h3>
             <a>gogo:burst-value</a>
           </h3>
           <h4>
             <span class="prim_example">gogo:burst-value <i>sensor</i></span>
           </h4>
           <p>
           Reads the most recent value that was received by the gogo board from
           a sensor set to send burst data.
           <p>
           See also <a href="#gogo:set-burst-mode">gogo:set-burst-mode</a> and
           <a href="#gogo:stop-burst-mode">gogo:stop-burst-mode</a>.
         </div>
         <div class="dict_entry" id="gogo:close">
           <h3>
             <a>gogo:close</a>
           </h3>
           <h4>
             <span class="prim_example">gogo:close</span>
           </h4>
           <p>
           Close the connection to the GoGo Board.
           <p>
           See also <a href="gogo:open"><code>gogo:open</code></a> and <a href="gogo:openp"><code>gogo:open?</code></a>.
         </div>
         <div class="dict_entry" id="gogo:install">
           <h3>
             <a>gogo:install</a>
           </h3>
           <h4>
             <span class="prim_example">gogo:install</span>
           </h4>
           <p>
           If on a Windows system, attempt to force-run the Windows driver
           installer.
           <p>
           Example:
           <pre>
gogo:install
</pre>
           </div>
           <div class="dict_entry" id="gogo:led-off">
             <h3>
               <a>gogo:led-off</a>
             </h3>
             <h4>
               <span class="prim_example">gogo:led-off</span>
             </h4>
             <p>
             Sends the signal to the GoGo Board to turn off the LED.
             <p>
             Example:
             <pre>
gogo:led-off
</pre>
             <p>
             See also <a href="gogo:led-on"><code>gogo:led-on</code></a>.
           </div>
           <div class="dict_entry" id="gogo:led-on">
             <h3>
               <a>gogo:led-on</a>
             </h3>
             <h4>
               <span class="prim_example">gogo:led-on</span>
             </h4>
             <p>
             Sends the signal to the GoGo Board to turn on the LED.
             <p>
             Example:
             <pre>
gogo:led-on
</pre>
             <p>
             See also <a href="gogo:led-off"><code>gogo:led-off</code></a>.
           </div>
           <div class="dict_entry" id="gogo:open">
             <h3>
               <a>gogo:open</a>
             </h3>
             <h4>
               <span class="prim_example">gogo:open <i>port-name</i></span>
             </h4>
             <p>
             Open a connection to the GoGo Board connected to serial port named
             <i>port-name</i>. See <a href="gogo:ports"><code>gogo:ports</code></a>
             for more information about port names.
             <p>
             If the GoGo Board is not responding, or you attempt to open a port
             without a GoGo Board connected to it, an error will be generated.
             <p>
             Example:
             <pre>
gogo:open &quot;COM1&quot;
</pre>
             <p>
             See also <a href="gogo:openp"><code>gogo:open?</code></a> and <a href="gogo:close"><code>gogo:close</code></a>.
           </div>
           <div class="dict_entry" id="gogo:openp">
             <h3>
               <a>gogo:open?</a>
             </h3>
             <h4>
               <span class="prim_example">gogo:open?</span>
             </h4>
             <p>
             Reports true if there is a connection to a GoGo Board open. Reports
             false otherwise.
           </div>
           <div class="dict_entry" id="gogo:ports">
             <h3>
               <a>gogo:ports</a>
             </h3>
             <h4>
               <span class="prim_example">gogo:ports</span>
             </h4>
             <p>
             Reports a list of serial port names that a GoGo Board <b>may</b> be
             connected to. On certain computers, you might get a list of two or
             three different serial ports. In that case, try to open each of them
             until the connection is successful.
           </div>
           <div class="dict_entry" id="gogo:output-port-coast">
             <h3>
               <a>gogo:output-port-coast</a>
             </h3>
             <h4>
               <span class="prim_example">gogo:output-port-coast</span>
             </h4>
             <p>
             Turns off the power of the active ports. When attached to motors,
             does not apply a braking force as <a href="#gogo:output-port-off"><code>gogo:output-port-off</code></a> does.
             Therefore, the motor will gradually slow down before stopping
             completely. This will have the same effect as <a href="#gogo:output-port-off"><code>gogo:output-port-off</code></a> on most
             output devices other than motors. The output-ports affected by this
             command are determined by the <a href="#gogo:talk-to-output-ports"><code>gogo:talk-to-output-ports</code></a>
             command.
             <p>
             The following code will turn on an output port a for 1 second, and
             then stop the motor gradually:
             <pre>
gogo:talk-to-output-ports [&quot;a&quot;]
gogo:output-port-on
wait 1
gogo:output-port-coast
</pre>
             </div>
             <div class="dict_entry" id="gogo:output-port-off">
               <h3>
                 <a>gogo:output-port-off</a>
               </h3>
               <h4>
                 <span class="prim_example">gogo:output-port-off</span>
               </h4>
               <p>
               Turns off power to the output ports. If using motors, a braking force
               is applied. The output ports affected by this command are determined
               by the <a href="#gogo:talk-to-output-ports"><code>gogo:talk-to-output-ports</code></a>
               command.
             </div>
             <div class="dict_entry" id="gogo:output-port-on">
               <h3>
                 <a>gogo:output-port-on</a>
               </h3>
               <h4>
                 <span class="prim_example">gogo:output-port-on</span>
               </h4>
               <p>
               Turns on power to the output ports. The output ports affected by this
               command are determined by the <a href="#gogo:talk-to-output-ports"><code>gogo:talk-to-output-ports</code></a>
               command.
             </div>
             <div class="dict_entry" id="gogo:output-port-reverse">
               <h3>
                 <a>gogo:output-port-reverse</a>
               </h3>
               <h4>
                 <span class="prim_example">gogo:output-port-reverse</span>
               </h4>
               <p>
               Reverses the direction of the output ports. The output ports affected
               by this command are determined by the <a href="#gogo:talk-to-output-ports"><code>gogo:talk-to-output-ports</code></a>
               command.
             </div>
             <div class="dict_entry" id="gogo:output-port-thatway">
               <h3>
                 <a>gogo:output-port-[that/this]way</a>
               </h3>
               <h4>
                 <span class="prim_example">gogo:output-port-thatway</span>
               </h4>
               <h4>
                 gogo:output-port-thisway
               </h4>
               <p>
               Apply power to the output port in a given direction. Output ports can
               be powered in two directions, arbitrarily called <i>thisway</i> and
               <i>thatway</i>. The output-ports affected by the command are
               determined by the <a href="#gogo:talk-to-output-ports"><code>gogo:talk-to-output-ports</code></a>
               command. Note that this is different from <a href="#gogo:output-port-reverse"><code>gogo:output-port-reverse</code></a>
               because <em>thisway</em> and <em>thatway</em> will always be the same
               direction provided the connector's polarity is the same.
             </div>
             <div class="dict_entry" id="gogo:talk-to-output-ports">
               <h3>
                 <a>gogo:talk-to-output-ports</a>
               </h3>
               <h4>
                 <span class="prim_example">gogo:talk-to-output-ports <i>output-portlist</i></span>
               </h4>
               <p>
               This command will set the corresponding output ports as active. They
               will be the ones affected by the commands such as <a href="#gogo:output-port-on"><code>gogo:output-port-on</code></a> and <a href="#gogo:output-port-off"><code>gogo:output-port-off</code></a>. The user
               can &quot;talk&quot; to one or multiple ports at the same time.
               Output ports are typically connected to motors, but you could also
               use bulbs, LEDs and relays. Output ports are identified by one letter
               names: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, and
               &quot;d&quot;.
               <p>
               Examples:
               <pre>
;; talk to all output-ports
gogo:talk-to-output-ports [ &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ]
;; will give power to all output-ports
gogo:output-port-on

;; talk to output-ports A and D
gogo:talk-to-output-ports [ &quot;a&quot; &quot;d&quot; ]
;; will turn off output-ports A and D.
;; The other output-ports will keep
;; their current state
gogo:output-port-off

gogo:talk-to-output-ports [ &quot;c&quot; &quot;b&quot; ]
;; turn off remaining output-ports
gogo:output-port-off
</pre>
               </div>
               <div class="dict_entry" id="gogo:ping">
                 <h3>
                   <a>gogo:ping</a>
                 </h3>
                 <h4>
                   <span class="prim_example">gogo:ping</span>
                 </h4>
                 <p>
                 Checks the status of GoGo board. This is mostly used to make sure the
                 board is connected to the correct serial port. It reports true if the
                 GoGo Board responds to a diagnostic message, and false otherwise.
                 <p>
                 Example:
                 <pre>
print gogo:ping
</pre>
                 <!-- not enabled now
               </div>
               <div class="dict_entry" id="read-sensors">
                 <h3><a>read-sensors</a></h3>
                 <h4>
                   <span class="prim_example">read-sensors</span>
                 </h4>
                 <p>
                 -->
               </div>
               <div class="dict_entry" id="gogo:sensor">
                 <h3>
                   <a>gogo:sensor</a>
                 </h3>
                 <h4>
                   <span class="prim_example">gogo:sensor <i>sensor</i></span>
                 </h4>
                 <p>
                 Reports the numeric value of the sensor named <i>sensor</i>. Sensors
                 are identified by numbers 1 to 8. Values range between 0-1023. 1023
                 is returned when there is no sensor attached to the port (highest
                 resistance), or when the sensor is an &quot;open&quot; state. Zero is
                 returned when the sensor is short circuited (no resistance).
                 <p>
                 Examples:
                 <pre>
print gogo:sensor 1
;; prints the value of sensor 1

foreach [ 1 2 3 4 5 6 7 8 ]
  [print (word &quot;Sensor &quot; ? &quot; = &quot; gogo:sensor ?)]
;; prints the value of all sensors

if gogo:sensor 1 &lt; 500 [ ask turtles [ fd 10 ]]<br>;; will move all turtles 10 steps forward if sensor 1's value is less than 500.

loop [if gogo:sensor 1 &lt; 500 [ ask turtles [ fd 10 ] ] ]<br>;; will continuously check sensor 1's value and
;; move all turtles 10 steps forward every time
;; that the sensor value is less than 500.
</pre>
                 </div>
                 <div class="dict_entry" id="gogo:set-burst-mode">
                   <h3>
                     <a>gogo:set-burst-mode</a>
                   </h3>
                   <h4>
                     <span class="prim_example">gogo:set-burst-mode <i>sensor-list</i> <i>high-speed-mode?</i></span>
                   </h4>
                   <p>
                   Turns on &quot;burst mode&quot; for the sensors in
                   <i>sensor-list</i>. If <i>high-speed-mode?</i> is <code>true</code>
                   then high speed burst mode will be used. If it is false, then low
                   speed burst mode will be used.
                   <p>
                   See also <a href="#gogo:burst-value">gogo:burst-value</a> and
                   <a href="#gogo:stop-burst-mode">gogo:stop-burst-mode</a>.
                   <p>
                   Examples:
                   <pre>

  gogo:set-burst-mode [ 1 2 3 ] true
  ;; turns on high speed burst mode for sensors 1, 2 and 3

  gogo:set-burst-mode [ 4 ] false
  ;; turns on low speed burst mode for sensor 4
  ;; this will also override any previous set-burst-mode calls
  ;; so there will be no new burst mode data for sensors 1, 2 and 3
</pre>
                   </div>
                   <div class="dict_entry" id="gogo:set-output-port-power">
                     <h3>
                       <a>gogo:set-output-port-power</a>
                     </h3>
                     <h4>
                       <span class="prim_example">gogo:set-output-port-power <i>power-level</i></span>
                     </h4>
                     <p>
                     Sets the power level of the active output ports. <i>power-level</i>
                     is a number between 0 (off) and 7 (full-power). The output-ports
                     affected by this command are determined by the <a href="#gogo:talk-to-output-ports"><code>gogo:talk-to-output-ports</code></a>
                     command. Note that for many practical applications it is more
                     efficient to use mechanical devices, such as gears and pulleys, to
                     control the torque of motors.
                     <p>
                     Example:
                     <pre>
gogo:talk-to-motors [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;]
gogo:set-motor-power 4
;; will lower the power of all output ports by half of the full power .
</pre>
                     </div>
                     <div class="dict_entry" id="gogo:set-servo">
                       <h3>
                         <a>gogo:set-servo</a>
                       </h3>
                       <h4>
                         <span class="prim_example">gogo:set-servo <i>servo-position</i></span>
                       </h4>
                       <p>
                       Set the servo position to the value given by <i>servo-position</i>.
                       <p>
                       <i>servo-position</i> must be between 20 and 40 (inclusive).
                       <p>
                       Example:
                       <pre>
gogo:set-servo 25
</pre>
                       </div>
                       <div class="dict_entry" id="gogo:stop-burst-mode">
                         <h3>
                           <a>gogo:stop-burst-mode</a>
                         </h3>
                         <h4>
                           <span class="prim_example">gogo:stop-burst-mode</span>
                         </h4>
                         <p>
                         Turns off &quot;burst mode&quot; for all sensors
                         <p>
                         See also <a href="#gogo:burst-value">gogo:burst-value</a> and
                         <a href="#gogo:set-burst-mode">gogo:set-burst-mode</a>.
                       </div>

