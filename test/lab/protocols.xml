<experiments>
  <experiment name="testBehaviorSpace1" repetitions="2" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>set counter 0</setup>
    <go>repeat param1 [ repeat param2 [ set counter counter + 1 ] ]</go>
    <exitCondition><![CDATA[counter > param2]]></exitCondition>
    <metrics>
      <metric>counter</metric>
    </metrics>
    <constants>
      <enumeratedValueSet variable="param1">
        <value value="1"></value>
        <value value="2"></value>
        <value value="3"></value>
      </enumeratedValueSet>
      <steppedValueSet variable="param2" first="1" step="1" last="5"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testBehaviorSpace2" repetitions="2" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="2">
    <setup>set counter 0</setup>
    <go>repeat param1 [ repeat param2 [ set counter counter + 1 ] ]</go>
    <exitCondition><![CDATA[counter > param2]]></exitCondition>
    <metrics>
      <metric>counter</metric>
    </metrics>
    <constants>
      <enumeratedValueSet variable="param1">
        <value value="1"></value>
        <value value="2"></value>
        <value value="3"></value>
      </enumeratedValueSet>
      <steppedValueSet variable="param2" first="1" step="1" last="5"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testMultipleMetrics" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="4">
    <setup>set counter 0</setup>
    <go>set counter counter + 1</go>
    <exitCondition><![CDATA[counter >= param1]]></exitCondition>
    <metrics>
      <metric>counter</metric>
      <metric>counter / 2</metric>
      <metric>counter / 10</metric>
    </metrics>
    <constants>
      <enumeratedValueSet variable="param1">
        <value value="1"></value>
        <value value="2"></value>
        <value value="3"></value>
      </enumeratedValueSet>
    </constants>
  </experiment>
  <experiment name="testNoMetrics1" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="4">
    <setup>set counter 0</setup>
    <go>set counter counter + 1</go>
    <exitCondition><![CDATA[counter >= param1]]></exitCondition>
    <constants>
      <enumeratedValueSet variable="param1">
        <value value="1"></value>
        <value value="2"></value>
        <value value="3"></value>
      </enumeratedValueSet>
    </constants>
  </experiment>
  <experiment name="testNoMetrics2" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="4">
    <setup>set counter 0</setup>
    <go>set counter counter + 1</go>
    <exitCondition><![CDATA[counter >= param1]]></exitCondition>
    <constants>
      <enumeratedValueSet variable="param1">
        <value value="1"></value>
        <value value="2"></value>
        <value value="3"></value>
      </enumeratedValueSet>
    </constants>
  </experiment>
  <experiment name="testImmediateExit" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="4">
    <setup>set foo 0</setup>
    <postRun>set foo 99</postRun>
    <exitCondition>true</exitCondition>
    <metrics>
      <metric>5</metric>
    </metrics>
  </experiment>
  <experiment name="testCarryover" repetitions="4" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="5">
    <go>set foo foo + 1</go>
    <metrics>
      <metric>foo</metric>
    </metrics>
  </experiment>
  <experiment name="experiment1" repetitions="5" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="50">
    <setup>setup-random</setup>
    <go>go</go>
    <postRun>show timer</postRun>
    <exitCondition><![CDATA["foo&bar!"

"\n+\n"baz!]]></exitCondition>
    <metrics>
      <metric>count patches with [living?]</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="bgcolor" first="0" step="1" last="100"></steppedValueSet>
      <enumeratedValueSet variable="fgcolor">
        <value value="133"></value>
        <value value="134"></value>
        <value value="135"></value>
        <value value="136"></value>
      </enumeratedValueSet>
      <steppedValueSet variable="foobarbaz" first="0" step="1" last="100"></steppedValueSet>
      <enumeratedValueSet variable="foo?">
        <value value="true"></value>
        <value value="false"></value>
      </enumeratedValueSet>
    </constants>
  </experiment>
  <experiment name="experiment2" repetitions="6" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="50">
    <setup>setup-random</setup>
    <go>go</go>
    <metrics>
      <metric>count patches with [living?]</metric>
      <metric>count patches with [not living?]</metric>
    </metrics>
  </experiment>
  <experiment name="experiment3" repetitions="9" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="11">
    <setup>setup-random</setup>
    <go>go</go>
    <metrics>
      <metric>count patches with [living?]</metric>
      <metric>count patches with [not living?]</metric>
    </metrics>
  </experiment>
  <experiment name="experiment4" repetitions="9" sequentialRunOrder="true" runMetricsEveryStep="true">
    <setup>setup-random</setup>
    <go>go</go>
  </experiment>
  <experiment name="testResizingWorld1" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false">
    <exitCondition>true</exitCondition>
    <metrics>
      <metric>count patches</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="max-pxcor" first="0" step="1" last="5"></steppedValueSet>
      <steppedValueSet variable="max-pycor" first="0" step="1" last="5"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testResizingWorld2" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false">
    <exitCondition>true</exitCondition>
    <metrics>
      <metric>count patches</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="world-width" first="1" step="2" last="11"></steppedValueSet>
      <steppedValueSet variable="world-height" first="1" step="2" last="11"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testResizingWorld3" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false">
    <exitCondition>true</exitCondition>
    <metrics>
      <metric>count patches</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="world-width" first="2" step="1" last="5"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testRandomSeed" repetitions="2" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <metrics>
      <metric>random 1000</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="random-seed" first="0" step="1" last="2"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testExportGraphics" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="20">
    <setup>ask patches [ set pcolor black ] crt 10 [ set size 10 fd random 40 ]</setup>
    <postRun>export-view "tmp/testExportGraphics.png"</postRun>
    <metrics>
      <metric>random 1000</metric>
    </metrics>
  </experiment>
  <experiment name="testStopping1" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="10">
    <setup>set x 0</setup>
    <go>if x = 5 [ stop ] set x x + 1</go>
  </experiment>
  <experiment name="testStopping2" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="10">
    <setup>set x 0</setup>
    <go>go</go>
  </experiment>
  <experiment name="badAtBeginning" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="5">
    <setup>setup</setup>
    <go>go</go>
    <metrics>
      <metric>bad-divide</metric>
    </metrics>
  </experiment>
  <experiment name="metricsLocalRandomness" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>random-seed 0</setup>
    <go>set x random-float 1.0</go>
    <metrics>
      <metric>random-float 1.0</metric>
    </metrics>
  </experiment>
  <experiment name="exitConditionLocalRandomness" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="3">
    <setup>random-seed 0</setup>
    <go>set x random-float 1.0</go>
    <exitCondition>one-of [false false]</exitCondition>
    <metrics>
      <metric>random-float 1.0</metric>
    </metrics>
  </experiment>
  <experiment name="testResizingWorld13d" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false">
    <exitCondition>true</exitCondition>
    <metrics>
      <metric>count patches</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="max-pxcor" first="0" step="1" last="5"></steppedValueSet>
      <steppedValueSet variable="max-pycor" first="0" step="1" last="5"></steppedValueSet>
      <steppedValueSet variable="max-pzcor" first="0" step="1" last="5"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testResizingWorld23d" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false">
    <exitCondition>true</exitCondition>
    <metrics>
      <metric>count patches</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="world-width" first="1" step="2" last="11"></steppedValueSet>
      <steppedValueSet variable="world-height" first="1" step="2" last="11"></steppedValueSet>
      <steppedValueSet variable="world-depth" first="1" step="2" last="11"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testResizingWorld23d (1)" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false">
    <exitCondition>true</exitCondition>
    <metrics>
      <metric>count patches</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="world-width" first="1" step="2" last="11"></steppedValueSet>
      <steppedValueSet variable="world-height" first="1" step="2" last="11"></steppedValueSet>
      <steppedValueSet variable="world-depth" first="1" step="2" last="11"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="wait1" repetitions="4" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>reset-timer</setup>
    <go>wait 1</go>
    <metrics>
      <metric>round timer</metric>
    </metrics>
  </experiment>
  <experiment name="metricGoBoom" repetitions="2" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>ca reset-ticks</setup>
    <go>tick</go>
    <metrics>
      <metric>__boom</metric>
    </metrics>
  </experiment>
  <experiment name="metricGoBoom2" repetitions="100" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="20">
    <setup>setup</setup>
    <go>go</go>
    <metrics>
      <metric>mean [who] of turtles</metric>
    </metrics>
  </experiment>
  <experiment name="goCommandsGoBoom" repetitions="2" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>ca reset-ticks</setup>
    <go>tick __ignore __boom</go>
    <metrics>
      <metric>ticks</metric>
    </metrics>
  </experiment>
  <experiment name="setupCommandsGoBoom" repetitions="2" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>ca reset-ticks __ignore __boom</setup>
    <go>tick</go>
    <metrics>
      <metric>ticks</metric>
    </metrics>
  </experiment>
  <experiment name="metricsWithSideEffects" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>clear-all reset-ticks</setup>
    <go>tick</go>
    <metrics>
      <metric>metric</metric>
    </metrics>
  </experiment>
  <experiment name="stringMetrics" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="1">
    <setup>clear-all reset-ticks</setup>
    <go>tick</go>
    <metrics>
      <metric>s1</metric>
      <metric>s2</metric>
    </metrics>
  </experiment>
  <experiment name="runNumber" repetitions="3" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>clear-all reset-ticks</setup>
    <go>tick</go>
    <metrics>
      <metric>behaviorspace-run-number</metric>
    </metrics>
  </experiment>
  <experiment name="basicRunCondition" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="50">
    <setup>reset-ticks</setup>
    <go>tick</go>
    <runMetricsCondition>ticks mod 5 = 0</runMetricsCondition>
    <metrics>
      <metric>ticks</metric>
    </metrics>
  </experiment>
  <experiment name="Run metrics every step" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="100">
    <setup>setup</setup>
    <go>go</go>
    <runMetricsCondition><![CDATA[count turtles with [color = red] > count turtles with [color = white]]]></runMetricsCondition>
    <metrics>
      <metric>count turtles with [color = red]</metric>
      <metric>count turtles with [color = white]</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="num-turtles" first="1" step="1" last="20"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="Run metrics when count red &gt; count white" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="100">
    <setup>setup</setup>
    <go>go</go>
    <runMetricsCondition><![CDATA[count turtles with [color = red] > count turtles with [color = white]]]></runMetricsCondition>
    <metrics>
      <metric>count turtles with [color = red]</metric>
      <metric>count turtles with [color = white]</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="num-turtles" first="1" step="1" last="20"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="Run metrics when reporter box is empty" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="100">
    <setup>setup</setup>
    <go>go</go>
    <metrics>
      <metric>count turtles with [color = red]</metric>
      <metric>count turtles with [color = white]</metric>
    </metrics>
    <constants>
      <steppedValueSet variable="num-turtles" first="1" step="1" last="20"></steppedValueSet>
    </constants>
  </experiment>
  <experiment name="testBasicSubExperiment" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="1">
    <metrics>
      <metric>a</metric>
      <metric>b</metric>
    </metrics>
    <subExperiments>
      <subExperiment>
        <steppedValueSet variable="a" first="1" step="1" last="5"></steppedValueSet>
        <enumeratedValueSet variable="b">
          <value value="23"></value>
          <value value="77"></value>
        </enumeratedValueSet>
      </subExperiment>
    </subExperiments>
  </experiment>
  <experiment name="testMultipleSubExperiments" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="1">
    <metrics>
      <metric>a</metric>
      <metric>b</metric>
    </metrics>
    <subExperiments>
      <subExperiment>
        <steppedValueSet variable="a" first="1" step="1" last="3"></steppedValueSet>
        <steppedValueSet variable="b" first="4" step="1" last="6"></steppedValueSet>
      </subExperiment>
      <subExperiment>
        <steppedValueSet variable="a" first="7" step="1" last="9"></steppedValueSet>
        <steppedValueSet variable="b" first="10" step="1" last="12"></steppedValueSet>
      </subExperiment>
    </subExperiments>
  </experiment>
  <experiment name="testConstantOverride" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="1">
    <constants>
      <steppedValueSet variable="a" first="1" step="1" last="5"></steppedValueSet>
    </constants>
    <subExperiments>
      <subExperiment>
        <steppedValueSet variable="a" first="6" step="1" last="10"></steppedValueSet>
      </subExperiment>
    </subExperiments>
  </experiment>
  <experiment name="testConstantReplace" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="1">
    <constants>
      <enumeratedValueSet variable="a">
        <value value="6"></value>
      </enumeratedValueSet>
    </constants>
    <subExperiments>
      <subExperiment>
        <enumeratedValueSet variable="a">
          <value value="5"></value>
        </enumeratedValueSet>
        <enumeratedValueSet variable="b">
          <value value="1"></value>
        </enumeratedValueSet>
      </subExperiment>
      <subExperiment>
        <enumeratedValueSet variable="b">
          <value value="2"></value>
        </enumeratedValueSet>
      </subExperiment>
    </subExperiments>
  </experiment>
  <experiment name="testMultipleConstantReplace" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="1">
    <constants>
      <enumeratedValueSet variable="a">
        <value value="1"></value>
      </enumeratedValueSet>
      <enumeratedValueSet variable="b">
        <value value="1"></value>
      </enumeratedValueSet>
      <enumeratedValueSet variable="c">
        <value value="1"></value>
      </enumeratedValueSet>
    </constants>
    <subExperiments>
      <subExperiment>
        <enumeratedValueSet variable="a">
          <value value="2"></value>
        </enumeratedValueSet>
      </subExperiment>
      <subExperiment>
        <enumeratedValueSet variable="b">
          <value value="2"></value>
        </enumeratedValueSet>
      </subExperiment>
      <subExperiment>
        <enumeratedValueSet variable="c">
          <value value="2"></value>
        </enumeratedValueSet>
      </subExperiment>
    </subExperiments>
  </experiment>
  <experiment name="testSubExperimentRepetitionsNonSequential" repetitions="2" sequentialRunOrder="false" runMetricsEveryStep="false" timeLimit="1">
    <subExperiments>
      <subExperiment>
        <enumeratedValueSet variable="a">
          <value value="1"></value>
          <value value="2"></value>
        </enumeratedValueSet>
        <enumeratedValueSet variable="b">
          <value value="3"></value>
        </enumeratedValueSet>
      </subExperiment>
      <subExperiment>
        <enumeratedValueSet variable="a">
          <value value="3"></value>
          <value value="4"></value>
        </enumeratedValueSet>
        <enumeratedValueSet variable="b">
          <value value="5"></value>
        </enumeratedValueSet>
      </subExperiment>
    </subExperiments>
  </experiment>
  <experiment name="testSubExperimentRepetitionsSequential" repetitions="2" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="1">
    <subExperiments>
      <subExperiment>
        <enumeratedValueSet variable="a">
          <value value="1"></value>
          <value value="2"></value>
        </enumeratedValueSet>
        <enumeratedValueSet variable="b">
          <value value="3"></value>
        </enumeratedValueSet>
      </subExperiment>
      <subExperiment>
        <enumeratedValueSet variable="a">
          <value value="3"></value>
          <value value="4"></value>
        </enumeratedValueSet>
        <enumeratedValueSet variable="b">
          <value value="5"></value>
        </enumeratedValueSet>
      </subExperiment>
    </subExperiments>
  </experiment>
  <experiment name="testComplexSubExperiments" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="false" timeLimit="1">
    <constants>
      <steppedValueSet variable="a" first="1" step="1" last="10"></steppedValueSet>
      <steppedValueSet variable="b" first="5" step="3" last="26"></steppedValueSet>
      <enumeratedValueSet variable="c">
        <value value="15"></value>
        <value value="16"></value>
      </enumeratedValueSet>
    </constants>
    <subExperiments>
      <subExperiment>
        <enumeratedValueSet variable="a">
          <value value="2"></value>
        </enumeratedValueSet>
      </subExperiment>
      <subExperiment>
        <steppedValueSet variable="a" first="1" step="1" last="15"></steppedValueSet>
      </subExperiment>
      <subExperiment>
        <steppedValueSet variable="c" first="15" step="1" last="18"></steppedValueSet>
      </subExperiment>
      <subExperiment>
        <steppedValueSet variable="b" first="50" step="2" last="60"></steppedValueSet>
        <steppedValueSet variable="c" first="50" step="2" last="60"></steppedValueSet>
      </subExperiment>
    </subExperiments>
  </experiment>
  <experiment name="testSimpleLists" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>clear-turtles reset-ticks create-turtles n [setxy n n]</setup>
    <metrics>
      <metric>[xcor] of turtles</metric>
      <metric>[ycor] of turtles</metric>
    </metrics>
    <constants>
      <enumeratedValueSet variable="n">
        <value value="2"></value>
        <value value="4"></value>
      </enumeratedValueSet>
    </constants>
  </experiment>
  <experiment name="testListsEmptyExperiment" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="1"></experiment>
  <experiment name="testStats" repetitions="3" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="5">
    <setup>ca reset-ticks random-seed behaviorspace-run-number</setup>
    <go>create-turtles random 10 [setxy random 4 random 4] tick</go>
    <metrics>
      <metric>count turtles</metric>
      <metric>[ pxcor ] of turtles</metric>
    </metrics>
  </experiment>
  <experiment name="testStatsExcludeMetrics" repetitions="3" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="2">
    <setup>ca reset-ticks set string-test "a"</setup>
    <go>ifelse ticks mod 2 = 0 [ set list-test (list 1 2) ] [ set list-test 3 ] tick</go>
    <metrics>
      <metric>string-test</metric>
      <metric>list-test</metric>
    </metrics>
  </experiment>
  <experiment name="testIgnoreComments" repetitions="1" sequentialRunOrder="true" runMetricsEveryStep="true">
    <setup>ca reset-ticks</setup>
    <go>tick</go>
    <exitCondition><![CDATA[; stop when ticks > 2

ticks > 2 ; this is the stop condition]]></exitCondition>
    <metrics>
      <metric>; hello this is a comment</metric>
      <metric>count turtles ; count the number of turtles</metric>
      <metric>; count patches please ignore me</metric>
    </metrics>
  </experiment>
</experiments>
