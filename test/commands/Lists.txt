ModesTurtles1
  O> crt 2
  length modes (list turtle 0 turtle 1 turtle 0) => 1
  [who] of first modes (list turtle 0 turtle 1 turtle 0) => 0
  O> ask turtles [ die ]
  modes (list 5 5 5 5 turtle 0 turtle 1 turtle 2 nobody) => [5 nobody]

ForeachInsideRecursiveProcedure1
  to-report foo [l] let ret [] foreach l [ x -> ifelse is-list? x [ let nlist foo x set ret lput nlist ret ] [ set ret lput x ret ] ] report ret end
  foo [[1 2] [[3 4] 5]] => [[1 2] [[3 4] 5]]

# `run` is one of only a few variadic commands, and `foreach` is one of the only commands that takes a concise
# command, so to test concise, varidic commands I do this.  It's a contrived example, but
# works well enough to test the various scenarios.
ForeachWithConciseVariadicCommand
  globals [stuff1 stuff2 stuff3 frump]
  O> set stuff1 [ [x] -> show x set frump (x) ]
  O> set stuff2 [ [x y] -> show x set frump (x + y) ]
  O> set stuff3 [ [x y z] -> show x set frump (x + y + z) ]
  O> (run stuff2 1 3)
  frump => 4
  O> (foreach (list stuff1 stuff1 stuff1) [1 2 3] run)
  frump => 3
  O> (foreach (list stuff2 stuff2 stuff2) [1 2 3] [4 5 6] run)
  frump => 9
  O> (foreach (list stuff3 stuff3 stuff3) [1 2 3] [4 5 6] [7 8 9] run)
  frump => 18

NValuesComplex
  O> random-seed 478932
  map [ x -> (list (first x + 1))] n-values 10 [ifelse-value (random 2 = 0) [[1]] [[2]]] => [[2] [3] [3] [3] [2] [3] [2] [3] [2] [3]]

RemoveBug997FirstArgMustBeStringIfSecondArgIsString
  remove [] "" => ERROR REMOVE expected input to be a string but got the list [] instead.

Remove
  remove 7 [2 7 4 7 "Bob"] => [2 4 "Bob"]
  remove "to" "phototonic" => "phonic"

RemoveDuplicatesNegativeZero1
  remove-duplicates list 0 (- count turtles) => [0]

RemoveDuplicatesNegativeZero2
  remove-duplicates list [0] (list (- count turtles)) => [[0]]

FilterTypeError
  to-report foo [x] report 5 end
  filter [ x -> foo x] [] => []
  filter [ x -> foo x] [1] => ERROR FILTER expected input to be a TRUE/FALSE but got the number 5 instead.
