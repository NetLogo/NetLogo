Links1
  O> crt 2
  O> ask turtle 0 [ create-link-to turtle 1 ]
  [(list [who] of end1 [who] of end2 )] of link 0 1 => [0 1]
  [color] of link 0 1 => 5
  [end1] of link 0 1 = turtle 0 => true
  [end2] of link 0 1 = turtle 1 => true
  [label] of link 0 1 = "" => true
  [label-color] of link 0 1 => 9.9
  [hidden?] of link 0 1 => false
  [breed] of link 0 1 = links => true
  [shape] of link 0 1 => "default"

Links2
  O> crt 2 [ create-links-with turtles with [ who > [who] of myself ] ]
  O> ask link 0 1 [ set color 140 ]
  [color] of link 0 1 => 0
  O> ask link 0 1 [ set color -10 ]
  [color] of link 0 1 => 130
  O> ask link 0 1 [ set color 150 ]
  [color] of link 0 1 => 10

LinkWithBadEndPointsReturnsNobody
  O> crt 2
  O> ask turtle 0 [ create-link-with turtle 1 ]
  link 0 2 => nobody
  link 2 0 => nobody
  link 2 2 => nobody
  link 2 3 => nobody
  link 3 2 => nobody

LinksInitBlock
  globals [ glob1 ]
  O> set glob1 0
  O> crt 50
  T> create-links-with other turtles [ set glob1 glob1 + 1 ]
  count links = glob1 => true
  L> die
  O> set glob1 0
  T> create-links-to other turtles [ set glob1 glob1 + 1 ]
  count links = glob1 => true
  L> die
  O> set glob1 0
  T> create-links-from other turtles [ set glob1 glob1 + 1 ]
  count links = glob1 => true

CreateDuplicateLinks
 O> crt 2 [ create-links-with other turtles ]
 count links = 1 => true
 O> ask turtle 0 [ create-link-with turtle 1 ]
 count links = 1 => true
 O> ca
 O> crt 3 [ create-links-to other turtles ]
 count links = 6 => true
 O> ask turtle 0 [ create-link-to turtle 1 ]
 count links = 6 => true
 O> ca
 O> crt 3 [ create-links-from other turtles ]
 count links = 6 => true
 O> ask turtle 0 [ create-link-from turtle 1 ]
 count links = 6 => true
 O> ca
 O> crt 2
 O> ask turtle 0 [ create-link-with turtle 1 ]
 count [link-neighbors] of turtle 0 => 1
 count [link-neighbors] of turtle 1 => 1
 O> ask turtle 1 [ create-link-with turtle 0 ]
 count [link-neighbors] of turtle 0 => 1
 count [link-neighbors] of turtle 1 => 1

CreateLinksTo
  breed [nodes node]
  directed-link-breed [directed-edges directed-edge]
  O> crt 1
  O> create-nodes 2
  count links => 0
  O> ask turtle 0 [ create-links-to nodes [set color red] ]
  count turtles => 3
  count links => 2
  count links with [color = red] => 2
  [color] of link 0 1 = red => true
  [color] of link 0 2 = red => true
  T> create-directed-edges-to other turtles => ERROR You cannot have both breeded and unbreeded links in the same world.
  T> create-directed-edge-to one-of turtles => ERROR You cannot have both breeded and unbreeded links in the same world.
  O> ask turtle 0 [ ask my-out-links [ die ] ]
  count links => 0

CreateLinksFrom
  breed [nodes node]
  directed-link-breed [directed-edges directed-edge]
  O> crt 1
  O> create-nodes 2
  count links => 0
  O> ask turtle 0 [ create-links-from nodes [set color red] ]
  count turtles => 3
  count links => 2
  count links with [color = red] => 2
  T> create-directed-edges-from other turtles => ERROR You cannot have both breeded and unbreeded links in the same world.
  T> create-directed-edge-from one-of turtles => ERROR You cannot have both breeded and unbreeded links in the same world.
  O> ask turtle 0 [ ask my-in-links [ die ] ]
  count links => 0

CreateLinksWith
  breed [nodes node]
  undirected-link-breed [undirected-edges undirected-edge]
  O> crt 1
  O> create-nodes 2
  count links => 0
  O> ask turtle 0 [ create-links-with nodes [set color red] ]
  count turtles => 3
  count links => 2
  count links with [color = red] => 2
  T> create-undirected-edges-with other turtles => ERROR You cannot have both breeded and unbreeded links in the same world.
  T> create-undirected-edge-with one-of turtles => ERROR You cannot have both breeded and unbreeded links in the same world.
  O> ask turtle 0 [ ask my-links [ die ] ]
  count links => 0

LinkedTest1
  O> crt 2
  [in-link-neighbor? turtle 1] of turtle 0 => false
  [in-link-neighbor? turtle 0] of turtle 1 => false
  [out-link-neighbor? turtle 1] of turtle 0 => false
  [out-link-neighbor? turtle 0] of turtle 1 => false
  [link-neighbor? turtle 1] of turtle 0 => false
  [link-neighbor? turtle 0] of turtle 1 => false
  O> ask turtle 0[ create-link-to turtle 1]
  [in-link-neighbor? turtle 1] of turtle 0 => false
  [in-link-neighbor? turtle 0] of turtle 1 => true
  [out-link-neighbor? turtle 1] of turtle 0 => true
  [out-link-neighbor? turtle 0] of turtle 1 => false

LinkedTest2
  O> crt 2
  O> ask turtle 0[ create-link-from turtle 1]
  [in-link-neighbor? turtle 1] of turtle 0 => true
  [in-link-neighbor? turtle 0] of turtle 1 => false
  [out-link-neighbor? turtle 1] of turtle 0 => false
  [out-link-neighbor? turtle 0] of turtle 1 => true

LinkedTest3
  O> crt 2
  O> ask turtle 0[ create-link-with turtle 1]
  [link-neighbor? turtle 1] of turtle 0 => true
  [link-neighbor? turtle 0] of turtle 1 => true

LinkNeighbor
  directed-link-breed [directed-edges directed-edge]
  O> crt 2
  O> ask turtle 0 [create-directed-edge-to turtle 1]
  [link-neighbor? turtle 1] of turtle 0 => true
  [link-neighbor? turtle 0] of turtle 1 => true

LinkNeighbor2
  undirected-link-breed [undirected-edges undirected-edge]
  O> crt 2
  O> ask turtle 0 [create-undirected-edge-with turtle 1]
  [ link-neighbor? turtle 1 ] of turtle 0 => true
  [ link-neighbor? turtle 0 ] of turtle 1 => true

LinkNeighbor3
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  [ link-neighbor? turtle 1 ] of turtle 0 => true
  [ link-neighbor? turtle 0 ] of turtle 1 => true

NodeDies1
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-to turtle 1]
  count nodes => 2
  count links => 1
  O> ask turtle 0 [die]
  count nodes => 1
  count links => 0

NodeDies2
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-from turtle 1]
  count nodes => 2
  count links => 1
  O> ask turtle 0 [die]
  count nodes => 1
  count links => 0

NodeDies3
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-with turtle 1]
  count nodes => 2
  count links => 1
  O> ask turtle 0 [die]
  count nodes => 1
  count links => 0

LinkDies1
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-to turtle 1]
  O> ask link 0 1 [die]
  count nodes => 2
  count links => 0
  [ out-link-neighbor? turtle 1] of turtle 0 => false

LinkDies2
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-from turtle 1]
  O> ask link 1 0 [die]
  count nodes => 2
  count links => 0
  [ in-link-neighbor? turtle 1] of turtle 0 => false

LinkDies3
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-with turtle 1]
  O> ask link 0 1 [die]
  count nodes => 2
  count links => 0
  [ link-neighbor? turtle 1] of turtle 0 => false

LinkDestTest1
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-to turtle 1]
  [ end1 ] of link 0 1 = turtle 0 => true
  [ end2 ] of link 0 1 = turtle 1 => true
  O> ask link 0 1 [die]
  O> ask turtle 0 [create-link-from turtle 1]
  [ end1 ] of link 1 0 = turtle 1 => true
  [ end2 ] of link 1 0 = turtle 0 => true

LinkDestTest2
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-with turtle 1]
  [ end1 ] of link 0 1 = turtle 0 => true
  [ end2 ] of link 0 1 = turtle 1 => true

BothEnds1
  O> crt 2
  O> ask turtle 0 [create-link-to turtle 1]
  [sort [who] of both-ends] of link 0 1 => [0 1]

BothEnds2
  O> crt 2
  O> ask turtle 0 [create-link-from turtle 1]
  [sort [who] of both-ends] of link 1 0 => [0 1]

BothEnds3
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  [sort [who] of both-ends] of link 0 1 => [0 1]

OtherEnd1
  O> crt 2
  O> ask turtle 0 [create-link-to turtle 1]
  [[[who] of other-end] of link 0 1] of turtle 0 => 1
  [[[who] of other-end] of link 0 1] of turtle 1 => 0
  [[[who] of other-end] of turtle 0] of link 0 1 => 1
  [[[who] of other-end] of turtle 1] of link 0 1 => 0

OtherEnd2
  O> crt 2
  O> ask turtle 0 [create-link-from turtle 1]
  [[[who] of other-end] of link 1 0] of turtle 0 => 1
  [[[who] of other-end] of link 1 0] of turtle 1 => 0
  [[[who] of other-end] of turtle 0] of link 1 0 => 1
  [[[who] of other-end] of turtle 1] of link 1 0 => 0

OtherEnd3
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  [[[who] of other-end] of link 0 1] of turtle 0 => 1
  [[[who] of other-end] of link 0 1] of turtle 1 => 0
  [[[who] of other-end] of turtle 0] of link 0 1 => 1
  [[[who] of other-end] of turtle 1] of link 0 1 => 0

IsLink1
  O> crt 2
  O> ask turtle 0 [create-link-to turtle 1]
  O> ask turtle 0 [create-link-from turtle 1]
  is-link? turtle 0 => false
  is-link? turtle 1 => false
  is-link? link 0 1 => true
  is-link? link 1 0 => true

IsLink2
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  is-link? turtle 0 => false
  is-link? turtle 1 => false
  is-link? link 0 1 => true

LinkKillsNode1
  breed [nodes node]
  O> create-nodes 2
  count nodes => 2
  count links => 0
  O> ask turtle 0 [create-link-to turtle 1 [ask myself [die]]]
  count nodes => 1
  count links => 0

LinkKillsNode2
  breed [nodes node]
  O> create-nodes 2
  count nodes => 2
  count links => 0
  O> ask turtle 0 [create-link-from turtle 1 [ask myself [die]]]
  count nodes => 1
  count links => 0

LinkKillsNode3
  breed [nodes node]
  O> create-nodes 2
  count nodes => 2
  count links => 0
  O> ask turtle 0 [create-link-with turtle 1 [ask myself [die]]]
  count nodes => 1
  count links => 0

LinkFromToWith1
  O> crt 2
  [in-link-from turtle 1] of turtle 0 => nobody
  [out-link-to turtle 1] of turtle 0 => nobody
  [in-link-from turtle 0] of turtle 1 => nobody
  [out-link-to turtle 0] of turtle 1 => nobody
  [link-with turtle 1] of turtle 0 => nobody
  [link-with turtle 0] of turtle 1 => nobody
  O> ask turtle 0 [ create-link-to turtle 1 ]
  [in-link-from turtle 1] of turtle 0 => nobody
  [(list [who] of end1 [who] of end2 )] of [out-link-to turtle 1] of turtle 0 => [0 1]
  [(list [who] of end1 [who] of end2 )] of [in-link-from turtle 0] of turtle 1 => [0 1]
  [out-link-to turtle 0] of turtle 1 => nobody
  (word [link-with turtle 1] of turtle 0) => "(link 0 1)"
  (word [link-with turtle 0] of turtle 1) => "(link 0 1)"

LinkFromToWith2
  O> crt 2
  O> ask turtle 0 [create-link-from turtle 1]
  [(list [who] of end1 [who] of end2 )] of [in-link-from turtle 1] of turtle 0 => [1 0]
  [out-link-to turtle 1] of turtle 0 => nobody
  [in-link-from turtle 0] of turtle 1 => nobody
  [(list [who] of end1 [who] of end2 )] of [out-link-to turtle 0] of turtle 1 => [1 0]

LinkFromToWith3
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  [(list [who] of end1 [who] of end2 )] of [link-with turtle 1] of turtle 0 => [0 1]
  [(list [who] of end1 [who] of end2 )] of [link-with turtle 0] of turtle 1 => [0 1]

LinkedFromToWith1
  O> crt 2
  sort [who] of [in-link-neighbors] of turtle 0 => []
  sort [who] of [out-link-neighbors] of turtle 0 => []
  sort [who] of [in-link-neighbors ] of turtle 1 => []
  sort [who] of [out-link-neighbors ] of turtle 1 => []
  sort [who] of [link-neighbors ] of turtle 0 => []
  sort [who] of [link-neighbors ] of turtle 1 => []
  O> ask turtle 0 [create-link-to turtle 1]
  sort [who] of [in-link-neighbors ] of turtle 0 => []
  sort [who] of [out-link-neighbors ] of turtle 0 => [1]
  sort [who] of [in-link-neighbors ] of turtle 1 => [0]
  sort [who] of [out-link-neighbors ] of turtle 1 => []

LinkedFromToWith2
  O> crt 2
  O> ask turtle 0 [create-link-from turtle 1]
  sort [who] of [in-link-neighbors] of turtle 1 => []
  sort [who] of [out-link-neighbors ] of turtle 1 => [0]
  sort [who] of [in-link-neighbors] of turtle 0 => [1]
  sort [who] of [out-link-neighbors ] of turtle 0 => []

LinkedFromToWith3
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  sort [who] of [link-neighbors ] of turtle 1 => [0]
  sort [who] of [link-neighbors ] of turtle 0 => [1]

LinksAllFromTo1
  O> crt 2
  sort [my-in-links] of turtle 0 => []
  sort [my-out-links] of turtle 0 => []
  sort [my-in-links ] of turtle 1 => []
  sort [my-out-links ] of turtle 1 => []
  sort [my-links ] of turtle 0 => []
  sort [my-links ] of turtle 1 => []
  O> ask turtle 0 [create-link-to turtle 1]
  map [[l] -> [ (list [who] of end1 [who] of end2 ) ] of l ] sort [my-out-links ] of turtle 0 => [[0 1]]
  map [[l] -> [ (list [who] of end1 [who] of end2 ) ] of l ] sort [my-in-links ] of turtle 1 => [[0 1]]
  sort [my-in-links] of turtle 0 => []
  sort [my-out-links ] of turtle 1 => []

LinksAllFromTo2
  O> crt 2
  O> ask turtle 0 [create-link-from turtle 1]
  map [[l] -> [ (list [who] of end1 [who] of end2 ) ] of l ] sort [my-in-links ] of turtle 0 => [[1 0]]
  sort [my-out-links ] of turtle 0 => []
  sort [my-in-links] of turtle 1 => []
  map [[l] -> [ (list [who] of end1 [who] of end2 ) ] of l ] sort [my-out-links ] of turtle 1 => [[1 0]]

LinksAllFromTo3
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  map [[l] -> [ (list [who] of end1 [who] of end2 ) ] of l ] sort [my-links ] of turtle 0 => [[0 1]]
  map [[l] -> [ (list [who] of end1 [who] of end2 ) ] of l ] sort [my-links ] of turtle 1 => [[0 1]]

LinkKillsItself1
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-to turtle 1 [die]]
  count nodes => 2
  count links => 0
  [in-link-from turtle 1] of turtle 0 => nobody
  [out-link-to turtle 1] of turtle 0 => nobody
  [in-link-from turtle 0] of turtle 1 => nobody
  [out-link-to turtle 0] of turtle 1 => nobody
  sort [who] of [in-link-neighbors] of turtle 0 => []
  sort [who] of [out-link-neighbors] of turtle 0 => []
  sort [who] of [in-link-neighbors ] of turtle 1 => []
  sort [who] of [out-link-neighbors ] of turtle 1 => []
  sort [who] of [my-in-links] of turtle 0 => []
  sort [who] of [my-out-links] of turtle 0 => []
  sort [who] of [my-in-links ] of turtle 1 => []
  sort [who] of [my-out-links ] of turtle 1 => []

LinkKillsItself2
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-from turtle 1 [die]]
  count nodes => 2
  count links => 0
  [in-link-from turtle 1] of turtle 0 => nobody
  [out-link-to turtle 1] of turtle 0 => nobody
  [in-link-from turtle 0] of turtle 1 => nobody
  [out-link-to turtle 0] of turtle 1 => nobody
  sort [who] of [in-link-neighbors] of turtle 0 => []
  sort [who] of [out-link-neighbors] of turtle 0 => []
  sort [who] of [in-link-neighbors ] of turtle 1 => []
  sort [who] of [out-link-neighbors ] of turtle 1 => []
  sort [who] of [my-in-links] of turtle 0 => []
  sort [who] of [my-out-links] of turtle 0 => []
  sort [who] of [my-in-links ] of turtle 1 => []
  sort [who] of [my-out-links ] of turtle 1 => []

LinkKillsItself3
  breed [nodes node]
  O> create-nodes 2
  O> ask turtle 0 [create-link-with turtle 1 [die]]
  count nodes => 2
  count links => 0
  [link-with turtle 1] of turtle 0 => nobody
  [link-with turtle 0] of turtle 1 => nobody
  sort [who] of [link-neighbors] of turtle 0 => []
  sort [who] of [link-neighbors ] of turtle 1 => []
  sort [who] of [my-links] of turtle 0 => []
  sort [who] of [my-links ] of turtle 1 => []

LinkKillsParents1
  O> crt 2 [ create-links-with turtles with [ who > [who] of myself  ] [ ask both-ends [die] ] ]
  count links = 0 => true
  count turtles = 0 => true
  O> crt 2 [ create-links-with turtles with [ who > [who] of myself  ] [ ask end1 [die] ask end2 [die ] ] ]
  count links = 0 => true
  count turtles = 1 => true

LinkKillsParents2
  O> crt 10
  T> create-links-with other turtles [ ask turtles with [true] [ die ] ]
  count turtles => 0
  count links => 0

SwitchDirectednessOfUnbreededLinks1
  O> crt 2
  O> ask turtle 0 [ create-link-to turtle 1 ]
  O> ask turtle 1 [ die ]
  O> crt 1
  O> ask turtle 0 [ create-link-with turtle 2 ]
  count turtles => 2
  count links => 1

SwitchDirectednessOfUnbreededLinks2
  O> crt 2
  O> ask turtle 0 [ create-link-with turtle 1 ]
  O> ask turtle 1 [ die ]
  O> crt 1
  O> ask turtle 0 [ create-link-to turtle 2 ]
  count turtles => 2
  count links => 1

RemoveFrom
  O> crt 2
  O> ask turtle 0 [create-link-from turtle 1]
  O> ask turtle 0 [ask link 1 0 [ die ] ]
  [in-link-from turtle 1] of turtle 0 => nobody
  [out-link-to turtle 1] of turtle 0 => nobody
  [in-link-from turtle 0] of turtle 1 => nobody
  [out-link-to turtle 0] of turtle 1 => nobody
  sort [who] of [in-link-neighbors] of turtle 0 => []
  sort [who] of [out-link-neighbors] of turtle 0 => []
  sort [who] of [in-link-neighbors ] of turtle 1 => []
  sort [who] of [out-link-neighbors ] of turtle 1 => []
  sort [who] of [my-in-links] of turtle 0 => []
  sort [who] of [my-out-links] of turtle 0 => []
  sort [who] of [my-in-links ] of turtle 1 => []
  sort [who] of [my-out-links ] of turtle 1 => []

RemoveTo
  O> crt 2
  O> ask turtle 0 [create-link-to turtle 1]
  O> ask turtle 0 [ask link 0 1 [die]]
  [in-link-from turtle 1] of turtle 0 => nobody
  [out-link-to turtle 1] of turtle 0 => nobody
  [in-link-from turtle 0] of turtle 1 => nobody
  [out-link-to turtle 0] of turtle 1 => nobody
  sort [who] of [in-link-neighbors] of turtle 0 => []
  sort [who] of [out-link-neighbors] of turtle 0 => []
  sort [who] of [in-link-neighbors ] of turtle 1 => []
  sort [who] of [out-link-neighbors ] of turtle 1 => []
  sort [who] of [my-in-links] of turtle 0 => []
  sort [who] of [my-out-links] of turtle 0 => []
  sort [who] of [my-in-links ] of turtle 1 => []
  sort [who] of [my-out-links ] of turtle 1 => []

RemoveWith
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  O> ask turtle 0 [ask link 0 1[die]]
  [link-with turtle 1] of turtle 0 => nobody
  [link-with turtle 0] of turtle 1 => nobody
  sort [who] of [link-neighbors] of turtle 0 => []
  sort [who] of [link-neighbors ] of turtle 1 => []
  sort [who] of [my-links] of turtle 0 => []
  sort [who] of [my-links ] of turtle 1 => []

BreedTest1
  directed-link-breed [directed-edges directed-edge]
  O> crt 2
  O> ask turtle 0 [create-link-to turtle 1]
  [in-directed-edge-from turtle 1] of turtle 0 => nobody
  [out-directed-edge-to turtle 1] of turtle 0 => nobody
  [in-directed-edge-from turtle 0] of turtle 1 => nobody
  [out-directed-edge-to turtle 0] of turtle 1 => nobody
  sort [who] of [in-directed-edge-neighbors ] of turtle 0 => []
  sort [who] of [out-directed-edge-neighbors ] of turtle 0 => []
  sort [who] of [in-directed-edge-neighbors ] of turtle 1 => []
  sort [who] of [out-directed-edge-neighbors ] of turtle 1 => []
  sort [who] of [my-in-directed-edges ] of turtle 0 => []
  sort [who] of [my-out-directed-edges ] of turtle 0 => []
  sort [who] of [my-in-directed-edges ] of turtle 1 => []
  sort [who] of [my-out-directed-edges ] of turtle 1 => []

BreedTest2
  directed-link-breed [directed-edges directed-edge]
  O> crt 2
  O> ask turtle 0 [create-link-from turtle 1]
  [in-directed-edge-from turtle 1] of turtle 0 => nobody
  [out-directed-edge-to turtle 1] of turtle 0 => nobody
  [in-directed-edge-from turtle 0] of turtle 1 => nobody
  [out-directed-edge-to turtle 0] of turtle 1 => nobody
  sort [who] of [in-directed-edge-neighbors] of turtle 0 => []
  sort [who] of [out-directed-edge-neighbors] of turtle 0 => []
  sort [who] of [in-directed-edge-neighbors ] of turtle 1 => []
  sort [who] of [out-directed-edge-neighbors ] of turtle 1 => []
  sort [who] of [my-in-directed-edges] of turtle 0 => []
  sort [who] of [my-out-directed-edges] of turtle 0 => []
  sort [who] of [my-in-directed-edges ] of turtle 1 => []
  sort [who] of [my-out-directed-edges ] of turtle 1 => []

BreedTest3
  undirected-link-breed [undirected-edges undirected-edge]
  O> crt 2
  O> ask turtle 0 [create-link-with turtle 1]
  [undirected-edge-with turtle 1] of turtle 0 => nobody
  [undirected-edge-with turtle 0] of turtle 1 => nobody
  sort [who] of [undirected-edge-neighbors ] of turtle 0 => []
  sort [who] of [undirected-edge-neighbors ] of turtle 1 => []
  sort [who] of [my-undirected-edges ] of turtle 0 => []
  sort [who] of [my-undirected-edges ] of turtle 1 => []

LinkCantChangeBreeds
  globals [ glob1 ]
  breed [frogs frog]
  O> crt 2
  O> ask turtle 0 [ create-link-to turtle 1 [ set glob1 self ] ]
  [breed] of glob1 = links => true
  O> ask glob1 [ set breed frogs ] => ERROR You can't set BREED to a non-link-breed agentset.

LinkEquality
  O> crt 3 [ create-links-with other turtles ]
  link 0 1 = link 0 1 => true
  link 0 1 = link 0 2 => false

LinkBreedIdentifiers
  directed-link-breed [directed-edges directed-edge]
  undirected-link-breed [undirected-edges undirected-edge]
  O> crt 2
  O> ask turtle 0 [ create-link-with turtle 1 [ set color blue ] ]
  link 0 1 = one-of links with [color = blue] => true
  link 1 0 = one-of links with [color = blue] => true
  link 1 1 = nobody => true
  O> ask links [ die ]
  O> crt 2
  O> ask turtle 2 [ create-directed-edge-to turtle 3 [ set color green ] ]
  O> crt 2
  O> ask turtle 4 [ create-undirected-edge-with turtle 5 [ set color red ] ]
  directed-edge 0 1 = nobody => true
  undirected-edge 0 1 = nobody => true
  link 2 3 = nobody => true
  directed-edge 2 3 = one-of links with [color = green] => true
  directed-edge 3 2 = nobody => true
  undirected-edge 2 3 = nobody => true
  link 4 5 = nobody => true
  directed-edge 4 5 = nobody => true
  undirected-edge 4 5 = one-of links with [color = red] => true
  undirected-edge 5 4 = one-of links with [color = red] => true
  O> ask turtle 0 [ create-directed-edge-to turtle 1 [ set color green ] ]
  O> ask turtle 0 [ create-undirected-edge-with turtle 1 [ set color red ] ]
  link 0 1 = one-of links with [color = blue] => true

LinkNeighborsUnbreeded
  directed-link-breed [directed-edges directed-edge]
  undirected-link-breed [undirected-edges undirected-edge]
  O> crt 5 [ create-undirected-edges-with other turtles ]
  count links => 10
  count undirected-edges => 10
  [count undirected-edge-neighbors] of turtle 0 => 4
  [count link-neighbors] of turtle 0 => 4
  [undirected-edge-neighbor? turtle 1] of turtle 0 => true
  [link-neighbor? turtle 1] of turtle 0 => true
  T> create-directed-edges-to other turtles
  count links => 30
  count undirected-edges => 10
  count directed-edges => 20
  [count undirected-edge-neighbors] of turtle 0 => 4
  [count in-directed-edge-neighbors] of turtle 0 => 4
  [count out-directed-edge-neighbors] of turtle 0 => 4
  [count link-neighbors] of turtle 0 => 4
  [count out-link-neighbors] of turtle 0 => 4
  [count in-link-neighbors] of turtle 0 => 4

LinksNotAllowed
  globals [ glob1 ]
 O> crt 2 [ create-links-with other turtles [ set glob1 self ] ]
 [towards glob1] of turtle 0 => ERROR Expected a turtle or a patch but got a link.
 [distance glob1] of turtle 0 => ERROR Expected a turtle or a patch but got a link.
 [distance turtle 0] of glob1 => ERROR this code can't be run by a link
 [neighbors] of glob1 => ERROR this code can't be run by a link
 T> move-to glob1 => ERROR you can't move-to a link
 O> follow glob1 => ERROR FOLLOW expected input to be a turtle but got the link (link 0 1) instead.
 O> ride glob1 => ERROR RIDE expected input to be a turtle but got the link (link 0 1) instead.
 T> face glob1 => ERROR Expected a turtle or a patch but got a link.
 O> ask glob1 [ facexy 0 1 ] => ERROR this code can't be run by a link, only a turtle
 O> ask glob1 [ face turtle 0 ] => ERROR this code can't be run by a link, only a turtle
 O> ask glob1 [ follow-me ] => ERROR this code can't be run by a link, only a turtle
 O> set glob1 links
 [glob1 in-radius 5] of turtle 0 => ERROR Expected a turtle or a patch but got a link.
 [glob1 in-cone 5 5] of turtle 0 => ERROR Expected a turtle or a patch but got a link.

LinksNotAllowed_Legacy
  globals [ glob1 ]
 O> crt 2 [ create-links-with other turtles [ set glob1 self ] ]
 [towards-nowrap glob1] of turtle 0 => ERROR Expected a turtle or a patch but got a link.
 [distance-nowrap glob1] of turtle 0 => ERROR Expected a turtle or a patch but got a link.
 O> ask glob1 [ facexy-nowrap 0 1 ] => ERROR this code can't be run by a link, only a turtle
 O> ask glob1 [ face-nowrap turtle 0 ] => ERROR this code can't be run by a link, only a turtle
 O> set glob1 links
 [glob1 in-radius-nowrap 5] of turtle 0 => ERROR Expected a turtle or a patch but got a link.
 [glob1 in-cone-nowrap 5 5] of turtle 0 => ERROR Expected a turtle or a patch but got a link.

LinkNotAllowed_2D
  globals [ glob1 ]
 O> crt 2 [ create-links-with other turtles [ set glob1 self ] ]
 [patch-at 0 1] of glob1 => ERROR this code can't be run by a link

LinkNotAllowed_3D
  globals [ glob1 ]
 O> crt 2 [ create-links-with other turtles [ set glob1 self ] ]
 [patch-at 0 1 1] of glob1 => ERROR this code can't be run by a link

BadLinkBreeds
  breed [frogs frog]
  directed-link-breed [directed-edges directed-edge]
  undirected-link-breed [undirected-edges undirected-edge]
 O> crt 2 [ create-links-with turtles with [ who > [who] of myself ] ]
 L> set breed turtles => ERROR You can't set BREED to a non-link-breed agentset.
 L> set breed frogs => ERROR You can't set BREED to a non-link-breed agentset.
 L> set breed directed-edges => ERROR You cannot have both breeded and unbreeded links in the same world.
 L> die
 O> ask turtle 0 [ create-directed-edge-to turtle 1 ]
 L> set breed undirected-edges
 O> ask turtle 0 [ create-directed-edge-to turtle 1 ]
 L> set breed undirected-edges => ERROR there is already a UNDIRECTED-EDGE with endpoints turtle 0 and turtle 1
 L> set breed links => ERROR You cannot have both breeded and unbreeded links in the same world.

SetLinkVariable
  directed-link-breed [directed-edges directed-edge]
  undirected-link-breed [undirected-edges undirected-edge]
  directed-edges-own [lvar]
  undirected-edges-own [weight]
  O> crt 10
  T> create-directed-edges-to other turtles [ set lvar 5 ]
  T> create-undirected-edges-with other turtles [ set weight 5 ]

LinkBreedsDying
  globals [ glob1 ]
  directed-link-breed [directed-edges directed-edge]
  undirected-link-breed [undirected-edges undirected-edge]
 O> create-turtles 10 [ fd 10 repeat 5 [ ifelse one-of [true false] [ create-directed-edge-to one-of other turtles ] [ create-undirected-edge-with one-of other turtles ] ] ]
 O> set glob1 count links
 O> repeat glob1 [ ask one-of links [ die ] ]
 count links => 0

LinkHeading
  O> cro 360 [ create-link-with turtle ((who + 1) mod 360) ]
  [link-heading] of link 0 1 => ERROR there is no heading of a link whose endpoints are in the same position
  T> fd 5
  all? links [link-heading = [towards other-end] of end1] => true

LinkHeading_3D
  O> cro 360 [ create-link-with turtle ((who + 1) mod 360) ]
  [link-pitch] of link 0 1 => ERROR there is no pitch of a link whose endpoints are in the same position
  T> fd 5 tilt-up 90 fd 5
  all? links [link-pitch = [towards-pitch other-end] of end1] => true

# https://github.com/NetLogo/NetLogo/issues/338
LinkCreationTypeChecking_2D
  O> crt 1
  T> create-link-with patch-here => COMPILER ERROR CREATE-LINK-WITH expected this input to be a turtle, but got a patch instead
  T> let x patch-here create-link-with x => ERROR CREATE-LINK-WITH expected input to be a turtle but got the patch (patch 0 0) instead.
  T> create-links-with neighbors => COMPILER ERROR CREATE-LINKS-WITH expected this input to be a turtle agentset, but got a patch agentset instead
  T> let x neighbors create-links-with x => ERROR CREATE-LINKS-WITH expected input to be a turtle agentset but got the agentset (agentset, 8 patches) instead.

MyLinksListsUndirectedLinks
  O> crt 2
  O> ask turtle 0 [ create-link-with turtle 1 ]
  [ count my-links ] of turtle 0 => 1
  [ count my-links ] of turtle 1 => 1

MyLinksListsDirectedLinks
  O> crt 2
  O> ask turtle 0 [ create-link-to turtle 1 ]
  O> ask turtle 1 [ create-link-to turtle 0 ]
  [ count my-links ] of turtle 0 => 2
  [ count my-links ] of turtle 1 => 2

MyLinksListsBreededLinks
  directed-link-breed [directed-edges directed-edge]
  undirected-link-breed [undirected-edges undirected-edge]
  O> crt 2
  O> ask turtle 0 [ create-directed-edge-to turtle 1 create-undirected-edge-with turtle 1 ]
  [ count my-links ] of turtle 0 => 2
  [ count my-links ] of turtle 1 => 2

LinkShapes
  link-shapes => ["default"]

LinkNeighborsBreeded
  directed-link-breed [directed-edges directed-edge]
  undirected-link-breed [undirected-edges undirected-edge]
  O> crt 3
  O> ask turtle 0 [ create-undirected-edge-with turtle 1 ]
  O> ask turtle 2 [ create-directed-edge-to turtle 1]
  [link-neighbor? turtle 1] of turtle 0 => true
  [link-neighbor? turtle 2] of turtle 0 => false
  [link-neighbor? turtle 0] of turtle 1 => true
  [link-neighbor? turtle 2] of turtle 1 => true
  [out-link-neighbor? turtle 1] of turtle 0 => true
  [in-link-neighbor? turtle 1] of turtle 0 => true
  [out-link-neighbor? turtle 0] of turtle 1 => true
  [in-link-neighbor? turtle 0] of turtle 1 => true
  [undirected-edge-neighbor? turtle 1] of turtle 0 => true
  [undirected-edge-neighbor? turtle 2] of turtle 0 => false
  [undirected-edge-neighbor? turtle 0] of turtle 1 => true
  [undirected-edge-neighbor? turtle 2] of turtle 1 => false
  [in-directed-edge-neighbor? turtle 1] of turtle 0 => false
  [in-directed-edge-neighbor? turtle 2] of turtle 0 => false
  [in-directed-edge-neighbor? turtle 0] of turtle 1 => false
  [in-directed-edge-neighbor? turtle 2] of turtle 1 => true
  [in-directed-edge-neighbor? turtle 1] of turtle 2 => false
  [out-directed-edge-neighbor? turtle 1] of turtle 0 => false
  [out-directed-edge-neighbor? turtle 2] of turtle 0 => false
  [out-directed-edge-neighbor? turtle 0] of turtle 1 => false
  [out-directed-edge-neighbor? turtle 2] of turtle 1 => false
  [out-directed-edge-neighbor? turtle 1] of turtle 2 => true

UndirectedUnbreededLink
  globals [ source dest l ]
  O> crt 2
  O> set source turtle 0
  O> set dest turtle 1
  O> ask source [ create-link-with dest [ set l self ] ]
  # unspecified
  [ member? l my-links ] of source => true
  [ member? dest link-neighbors ] of source => true
  [ link-neighbor? dest ] of source => true
  [ l = link-with dest ] of source => true
  # out
  [ member? l my-out-links ] of source => true
  [ member? dest out-link-neighbors ] of source => true
  [ out-link-neighbor? dest ] of source => true
  [ l = out-link-to dest ] of source => true
  # in
  [ member? l my-in-links ] of source => true
  [ member? dest in-link-neighbors ] of source => true
  [ in-link-neighbor? dest ] of source => true
  [ l = in-link-from dest ] of source => true

DirectedUnbreededLink
  globals [ source dest l ]
  O> crt 2
  O> set source turtle 0
  O> set dest turtle 1
  O> ask source [ create-link-to dest [ set l self ] ]
  # Test source node
  # unspecified
  [ member? l my-links ] of source => true
  [ member? dest link-neighbors ] of source => true
  [ link-neighbor? dest ] of source => true
  [ l = link-with dest ] of source => true
  # out
  [ member? l my-out-links ] of source => true
  [ member? dest out-link-neighbors ] of source => true
  [ out-link-neighbor? dest ] of source => true
  [ l = out-link-to dest ] of source => true
  # in
  [ member? l my-in-links ] of source => false
  [ member? dest in-link-neighbors ] of source => false
  [ in-link-neighbor? dest ] of source => false
  [ l = in-link-from dest ] of source => false
  # Test dest node
  # unspecified
  [ member? l my-links ] of dest => true
  [ member? source link-neighbors ] of dest => true
  [ link-neighbor? source ] of dest => true
  [ l = link-with source ] of dest => true
  # out
  [ member? l my-out-links ] of dest => false
  [ member? source out-link-neighbors ] of dest => false
  [ out-link-neighbor? source ] of dest => false
  [ l = out-link-to source ] of dest => false
  # in
  [ member? l my-in-links ] of dest => true
  [ member? source in-link-neighbors ] of dest => true
  [ in-link-neighbor? source ] of dest => true
  [ l = in-link-from source ] of dest => true

UndirectedBreededLink
  globals [ source dest l ]
  undirected-link-breed [ undirected-edges undirected-edge ]
  O> crt 2
  O> set source turtle 0
  O> set dest turtle 1
  O> ask source [ create-undirected-edge-with dest [ set l self ] ]
  # unspecified
  [ member? l my-undirected-edges ] of source => true
  [ member? dest undirected-edge-neighbors ] of source => true
  [ undirected-edge-neighbor? dest ] of source => true
  [ l = undirected-edge-with dest ] of source => true
  # out
  [ member? l my-out-undirected-edges ] of source => true
  [ member? dest out-undirected-edge-neighbors ] of source => true
  [ out-undirected-edge-neighbor? dest ] of source => true
  [ l = out-undirected-edge-to dest ] of source => true
  # in
  [ member? l my-in-undirected-edges ] of source => true
  [ member? dest in-undirected-edge-neighbors ] of source => true
  [ in-undirected-edge-neighbor? dest ] of source => true
  [ l = in-undirected-edge-from dest ] of source => true

DirectedBreededLink
  globals [ source dest l ]
  directed-link-breed [ directed-edges directed-edge ]
  O> crt 2
  O> set source turtle 0
  O> set dest turtle 1
  O> ask source [ create-directed-edge-to dest [ set l self ] ]
  # Test source node
  # unspecified
  [ member? l my-directed-edges ] of source => true
  [ member? dest directed-edge-neighbors ] of source => true
  [ directed-edge-neighbor? dest ] of source => true
  [ l = directed-edge-with dest ] of source => true
  # out
  [ member? l my-out-directed-edges ] of source => true
  [ member? dest out-directed-edge-neighbors ] of source => true
  [ out-directed-edge-neighbor? dest ] of source => true
  [ l = out-directed-edge-to dest ] of source => true
  # in
  [ member? l my-in-directed-edges ] of source => false
  [ member? dest in-directed-edge-neighbors ] of source => false
  [ in-directed-edge-neighbor? dest ] of source => false
  [ l = in-directed-edge-from dest ] of source => false
  # Test dest node
  # unspecified
  [ member? l my-directed-edges ] of dest => true
  [ member? source directed-edge-neighbors ] of dest => true
  [ directed-edge-neighbor? source ] of dest => true
  [ l = directed-edge-with source ] of dest => true
  # out
  [ member? l my-out-directed-edges ] of dest => false
  [ member? source out-directed-edge-neighbors ] of dest => false
  [ out-directed-edge-neighbor? source ] of dest => false
  [ l = out-directed-edge-to source ] of dest => false
  # in
  [ member? l my-in-directed-edges ] of dest => true
  [ member? source in-directed-edge-neighbors ] of dest => true
  [ in-directed-edge-neighbor? source ] of dest => true
  [ l = in-directed-edge-from source ] of dest => true

link-finder-primitives-give-all-possible
  undirected-link-breed [ undirected-edges undirected-edge ]
  directed-link-breed [ directed-edges directed-edge ]
  O> random-seed 0
  O> crt 2
  O> ask turtle 0 [ create-undirected-edge-with turtle 1 create-directed-edge-to turtle 1 ]
  length remove-duplicates [ n-values 10 [ link-with turtle 1 ] ] of turtle 0 => 2
  length remove-duplicates [ n-values 10 [ out-link-to turtle 1 ] ] of turtle 0 => 2
  length remove-duplicates [ n-values 10 [ in-link-from turtle 1 ] ] of turtle 0 => 1
  length remove-duplicates [ n-values 10 [ link-with turtle 0 ] ] of turtle 1 => 2
  length remove-duplicates [ n-values 10 [ out-link-to turtle 0 ] ] of turtle 1 => 1
  length remove-duplicates [ n-values 10 [ in-link-from turtle 0 ] ] of turtle 1 => 2

link-manager-handles-breed-changes
  directed-link-breed [ directed-edges directed-edge ]
  undirected-link-breed [ undirected-edges undirected-edge ]
  O> clear-all
  O> crt 2
  O> ask turtle 0 [ create-directed-edge-to turtle 1 ]
  L> set breed undirected-edges
  (word one-of [ my-undirected-edges ] of turtle 0) => "(undirected-edge 0 1)"
  count [ my-out-directed-edges ] of turtle 0 => 0
  O> ask turtle 0 [ die ]

link-resize-world-preserves-directedness-of-breeds_2D
  directed-link-breed [ directed-edges directed-edge ]
  undirected-link-breed [ undirected-edges undirected-edge ]
  O> resize-world -20 20 -20 20
  O> crt 2
  O> ask turtle 0 [ create-undirected-edge-with turtle 1 ]
  O> ask turtle 0 [ create-directed-edge-to turtle 1 ]
  is-directed-link? undirected-edge 0 1 => false
  is-undirected-link? undirected-edge 0 1 => true
  is-directed-link? directed-edge 0 1 => true
  is-undirected-link? directed-edge 0 1 => false

link-clear-links
  O> crt 4
  O> ask turtle 0 [ create-links-with other turtles ]
  O> clear-links
  count [ link-neighbors ] of turtle 0 => 0
  count [ my-links ] of turtle 0 => 0

lots-of-link-breeds
  directed-link-breed [links1 link1]
  directed-link-breed [links2 link2]
  directed-link-breed [links3 link3]
  O> random-seed 1939640085
  O> crt 3 [ create-links1-to other turtles create-links2-to other turtles create-links3-to other turtles ]
  member? nobody [ [ link1 who [ who ] of myself ] of other turtles ] of turtles => false
  member? nobody [ [ link2 who [ who ] of myself ] of other turtles ] of turtles => false
  member? nobody [ [ link3 who [ who ] of myself ] of other turtles ] of turtles => false
