Let
  globals [g1 g2 l t]

  to set-globals [v1 v2] /
    (set g1 v1) /
    (set g2 v2) /
  end

  to-report report-nums /
    (report [70 80]) /
  end

  O> let [v1 v2] [10 20] (set-globals v1 v2)
  g1 => 10
  g2 => 20

  O> let [v3 v4] [30 40 50] (set-globals v3 v4)
  g1 => 30
  g2 => 40

  O> set l [50 60]
  O> let [v5 v6] l (set-globals v5 v6)
  g1 => 50
  g2 => 60

  O> let [v7 v8] report-nums (set-globals v7 v8)
  g1 => 70
  g2 => 80

  O> set t [ [x] -> let [v11 v12] (list x 100) (set-globals v11 v12) ]
  O> (run t 22)
  g1 => 22
  g2 => 100

  O> let [] [0] => COMPILER ERROR The list of variables names given to LET must contain at least one item.
  O> let [v1 g1] [0 1] => COMPILER ERROR There is already a global variable called G1
  O> let [v9 v10] [0] => ERROR The list of values for LET must be at least as long as the list of names.  We need 2 value(s) but only got 1 from the list [0].

SetOnGlobals
  globals [g1 g2 l]

  to-report report-nums /
    (report [70 80]) /
  end

  O> set [g1 g2] [10 20]
  g1 => 10
  g2 => 20

  O> set [g1 g2] [30 40 50]
  g1 => 30
  g2 => 40

  O> set l [50 60]
  O> set [g1 g2] l
  g1 => 50
  g2 => 60

  O> set [g1 g2] report-nums
  g1 => 70
  g2 => 80

  O> set [] [0] => COMPILER ERROR The list of variables names given to SET must contain at least one item.
  O> set [v1 g1] [0 1] => COMPILER ERROR There is no variable called V1.
  O> set [g1 g2] [0] => ERROR The list of values for SET must be at least as long as the list of names.  We need 2 value(s) but only got 1 from the list [0].

SetOnLets
  globals [g1 g2 l]

  to set-globals [v1 v2] /
    (set g1 v1) /
    (set g2 v2) /
  end

  O> let v1 0 let v2 0 set [v1 v2] [10 20] (set-globals v1 v2)
  g1 => 10
  g2 => 20

SetOnMultipleVariableTypes
  globals [g1 g2 l]
  breed [toads toad]
  turtles-own [energy]
  toads-own [warts]

  to set-globals [v1 v2] /
    (set g1 v1) /
    (set g2 v2) /
  end

  O> create-toads 10 [ set energy 111 set warts 222 ]
  O> let z 10 ask one-of toads [ set [z g1 g2 energy warts] [20 30 40 50 60] set-globals energy warts set [energy warts] [7 8] ]

  g1 => 50
  g2 => 60

# ArgsProc
#   true => true
#
# ArgsAnonProc
#   true => true
#

TaskDisplayPreservesMultis
  globals [t g1 g2]
  O> set t [ [x] -> let [v1 v2] (list x 100) ]
  word t => "(anonymous command: [ [x] -> let [v1 v2] list x 100 ])"
  O> set t [ [x y] -> set [g1 g2] (list x y 300) ]
  # This is actually wrong as dropping the parens around `list` makes it incorrect syntax, but that's a separate issue.
  word t => "(anonymous command: [ [x y] -> set [g1 g2] list x y 300 ])"
  # once we have task args destructuring...
  # O> set t [ [[x y]] -> set [g1 g2] (list x y 300) ]
  # word t => "(anonymous command: [ [[x y]] -> set [g1 g2] list x y 300 ] "
