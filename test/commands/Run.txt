RunRejectExtraArgumentsIfFirstArgIsString
  O> (run "__ignore 5" 1) => ERROR run doesn't accept further inputs if the first is a string

RunResultRejectExtraArgumentsIfFirstArgIsString
  O> __ignore (runresult "5" 1) => ERROR runresult doesn't accept further inputs if the first is a string

LuisIzquierdoRun1
  to foo [x] run "reset-timer" end
  O> run "reset-timer"
  O> foo 0

LuisIzquierdoRunResult1
  to-report foo [x] report runresult "count turtles" end
  O> __ignore runresult "count turtles"
  O> __ignore foo 0

# these may take longer to fail because it depends on the exact timing of garbage collection
# causing a cached Procedure to be discarded - ST 5/14/09

LuisIzquierdoRun2
  globals [ glob1 ]
  to setup crt 1 [ while [glob1 < 100000] [ foo 0 run "reset-timer" set glob1 glob1 + 1 ] ] end
  to foo [x] run "reset-timer" end
  O> setup
  glob1 => 100000

LuisIzquierdoRunResult2
  globals [ glob1 ]
  to setup crt 1 [ while [glob1 < 100000] [ foo runresult "color" set glob1 glob1 + 1 ] ] end
  to foo [x] __ignore runresult "color" end
  O> setup
  glob1 => 100000

run-evaluate-string-input-only-once
  globals [ glob1 ]
  to-report foo set glob1 glob1 + 1 report "__ignore glob1" end
  O> run foo
  glob1 => 1

VarClosureWithRunStrings
  globals [check message]
  turtles-own [turtle-var]
  to-report test1 [vars proc-arg] /
    let proc-let 20 /
    let t1 [ [task-arg] -> /
      let task-let 50000 /
      run (word "set check (" vars ")") /
    ] /
    ask turtles [ /
      let ask-let 300 /
      (run t1 4000) /
    ] /
    report check
  end
  to-report test2 [vars proc-arg] /
    let proc-let 20 /
    ask turtles [ /
      let ask-let 300 /
      run (word "set check (" vars ")") /
    ] /
    report check /
  end
  to-report test3 [proc-arg] /
    let proc-let 20 /
    run "set check (proc-arg + proc-let)" /
    report check /
  end
  to-report test4 [vars proc-arg] /
    let proc-let 20 /
    ask turtle 0 [ /
      let ask-let 300 /
      ask other turtles [ /
        run (word "set check (" vars ")") /
      ] /
    ] /
    report check /
  end
  O> create-turtles 1 [ set turtle-var 600000 ]
  test1 "proc-arg + proc-let + ask-let + task-arg + task-let + turtle-var" 1 => ERROR Nothing named PROC-ARG has been defined.
  test1 "ask-let + task-arg + task-let + turtle-var" 1 => ERROR Nothing named ASK-LET has been defined.
  test1 "task-arg + task-let + turtle-var" 1 => ERROR Nothing named TASK-ARG has been defined.
  test1 "task-let + turtle-var" 1 => ERROR Nothing named TASK-LET has been defined.
  test1 "turtle-var" 1 => 600000
  test2 "proc-arg + proc-let + ask-let + turtle-var" 1 => ERROR Nothing named ASK-LET has been defined.
  test2 "proc-arg + proc-let + turtle-var" 1 => 600021
  test2 "ask-let + turtle-var" 1 => ERROR Nothing named ASK-LET has been defined.
  test3 1 => 21
  O> create-turtles 1 [ set turtle-var 7000000 ]
  O> set check 0
  test4 "proc-arg + proc-let + turtle-var" 1 => 7000021

LetVarsStayContained
  to-report test1 let s 0 run "set s -1" report s end
  to-report test2 run "show s" report runresult "s" end
  test1 => 0
  test2 => ERROR Nothing named S has been defined.

StringRunLetVarsDoNotEscape1
  to foo run "let a 1" end
  O> foo
  O> foo
  O> foo foo

StringRunLetVarsDoNotEscape2
  to foo run "let a 1" run "let a 2" end
  O> foo

StringRunLetVarsDoNotEscape3
  to foo run "run \"let a 1\" run \"let a 2\"" end
  O> foo

StringRunLetVarsDoNotEscape4
  globals [b]
  to bar run "let a 2 set b a" end
  to foo run "let a 2 set b a run \"let a 3 set b a\"" end
  O> bar
  b => 2
  O> foo => ERROR There is already a local variable here called A

CannotReportOutOfRunString
  to-report foo run "report 10" end
  foo => ERROR REPORT can only be used inside TO-REPORT.

StopInRunString
  globals [b]
  to foo run "stop set b 10" set b 5 end
  b => 0
