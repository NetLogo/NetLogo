IfelseReportT
  ifelse-value 2 = 2 ["here"] ["there"] => "here"

IfelseReportF
  ifelse-value 2 = 3 ["here"] ["there"] => "there"

Occurrences
  reduce [[x y] -> ifelse-value y = 1 [x + 1] [x]] (fput 0 [1 2 1 3 1 2 3 1 1 4 5 1]) => 6

IfelseAsExpression
  to-report fake-branching report ifelse-value true [ 10 ] [ 20 ] end
  5 + ifelse-value true  [ 0 ] [ 1 ] => 5
  5 + ifelse-value false [ 0 ] [ 1 ] => 6
  fake-branching - 2 => 8

# The following tests were originated from the CF extension to test variadicity of ifelse-value

Ifelse-value-takes-first-true
  (ifelse-value false [ 1 ] true [ 2 ] true [ 4 ] [ 8 ]) => 2

Ifelse-value-falls-through-to-else-block
  (ifelse-value false [ 1 ] false [ 2 ] [ 4 ]) => 4

Ifelse-errors-with-no-true-conditions
  O> __ignore (ifelse-value false [ 1 ] false [ 2 ]) => ERROR IFELSE-VALUE found no true conditions and no else branch. If you don't wish to error when no conditions are true, add a final else branch.

Ifelse-value-associates-smartly
  (ifelse-value 0 > 1 [ false ] 0 < 1 [ true ] [ nobody ]) => true

Ifelse-value-gives-type-errors-in-variadic-position
  O> __ignore (ifelse-value false [ 0 ] false [ 1 ] [ 3 ] [ 4 ] [ 5 ]) => ERROR IFELSE-VALUE expected input to be a TRUE/FALSE but got the number 3 instead.

Ifelse-value-handles-prefix-predicates
  (ifelse-value any? links [ 0 ] any? turtles [ 1 ] any? patches [ 2 ]  [ 3 ]) => 2

Ifelse-value-handles-complex-conditions
  (ifelse-value count turtles > 0 [ 0 ] any? turtles [ 10 ] any? patches [ 100 ] [ -1 ]) => 100
  (ifelse-value count patches < 0 [ 0 ] count patches < 10 [ 10 ] count patches < 100 [ 100 ] count patches < 1000 [ 1000 ] [ -1 ]) => 1000
