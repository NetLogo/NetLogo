// (C) Uri Wilensky. https://github.com/NetLogo/NetLogo

package org.nlogo.window

import javax.swing.{ AbstractAction, BorderFactory, Box, BoxLayout, ButtonGroup, ImageIcon,
  JButton, JCheckBox, JComponent, JDialog, JFrame, JLabel, JPanel, JRadioButton, JToggleButton,
  SwingConstants, WindowConstants }
import java.awt.{ Color, Component, Container, Dimension, Font, Frame,
  GridBagConstraints, GridBagLayout, GridLayout, Insets, Toolkit }
import java.awt.datatransfer.{ Clipboard, ClipboardOwner, StringSelection, Transferable }
import java.awt.event.{ ActionEvent, ActionListener, ComponentEvent, ItemEvent, ItemListener,
  MouseEvent, MouseListener, WindowEvent, WindowListener }
import org.nlogo.awt.Tree
import java.awt.image.BufferedImage
import java.text.{ DecimalFormat, NumberFormat }
import java.util.Enumeration
import org.nlogo.api.{ Graphics2DWrapper, I18N }
import org.nlogo.shape.VectorShape
import org.nlogo.swing.ColorSwatch
import org.nlogo.swing.Utils._
import scala.collection.JavaConverters._

object ColorDialog {
  private val SIZE_X = 600
  private val SIZE_Y = 400
}

class ColorDialog(frame: Frame, modalFlag: Boolean)
    extends JDialog(frame, I18N.gui.get("tools.colorswatch"), modalFlag)
    with ActionListener with ItemListener with MouseListener with ClipboardOwner with WindowListener {
  implicit val i18nName = I18N.Prefix("tools.colorswatch")

  private var step = 1: Double // The increment of the color index incremented  patches
  private var numberVisibilityFlag = false // Flat to view color value on swatches
  //To remember the visibility after change by itemStateChanged generated by setSelected
  private var pointOneStepflag = false

  private val formatter = new DecimalFormat("###.####")

  private var okCancelFlag = 0
  private var plotPenMode = false
  private var okButton: JButton = null

  private var selectedColor: Color = null
  private var selectedColorNumber = 0: Double
  private var selectedColorName = ""

  private val swatchesGroup = new ButtonGroup
  private val swatchesContainer = new Container
  private val leftNameContainer = new Container
  private val topNameContainer = new Container
  private val rightPreviewContainer = new Container

  private var oneStep, pointFiveStep, pointOneStep: JRadioButton = null

  private var checkboxHideNumbers: JCheckBox = null
  private var selectedColorLabel: JLabel = null
  private val turtleLabel = new Array[JLabel](16)

  setVisible(false)

  getContentPane.setLayout(new GridBagLayout)
  setSize(ColorDialog.SIZE_X, ColorDialog.SIZE_Y)
  setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE)

  private val pane = getContentPane
  private var turtleIcon = getShapeIcon(0)

  addWindowListener(this)

  createLeftNames()
  createTopNames(turtleIcon)
  createRightPreview(turtleIcon)
  createTopLeftLabel()
  createSwatches()
  addEscKeyAction(this, new AbstractAction {
      def actionPerformed(e: ActionEvent) = {
        setVisible(false)
        dispose()
      }
    })

  def showDialog() = {
    plotPenMode = false

    createControls(plotPenMode)
    selectSwatch(Color.black)
    workAroundQuaquaBug(this)
    setVisible(true)
  }

  def showPlotPenDialog(initialColor: Color) = {
    plotPenMode = true

    createControls(plotPenMode)
    selectSwatch(initialColor)
    workAroundQuaquaBug(this)
    setVisible(true)

    if(okCancelFlag == 1)
      selectedColor
    else
      null
  }

  def showInputBoxDialog(initialColor: Double) = {
    plotPenMode = true

    createControls(plotPenMode)
    selectSwatch(org.nlogo.api.Color.getColor(initialColor: java.lang.Double))
    workAroundQuaquaBug(this)
    setVisible(true)

    if(okCancelFlag == 1)
      selectedColorNumber
    else
      initialColor
  }

  private def selectSwatch(initialColor: Color) = {
    val closest = org.nlogo.api.Color.getClosestColorNumberByARGB(initialColor.getRGB)
    val closestColor = new Color(org.nlogo.api.Color.getARGBbyPremodulatedColorNumber(closest))

    if(closest % 1 == 0 || closest >= 9.9)
      oneStep.doClick()
    else if(closest % 5 == 0)
      pointOneStep.doClick()
    else
      pointFiveStep.doClick()

    swatchesGroup.getElements.asScala foreach { swatch =>
      val color = swatch.getBackground
      if(closestColor == color)
        swatch.doClick()
    }
  }

  /// Interface Creation

  // Create the Black and White Buttons at the top
  private def createTopNames(turtleIcon: ImageIcon) = {
    topNameContainer.setLayout(new GridLayout)
    // Create the black button
    val blackButtonContainer = new Container
    blackButtonContainer.setLayout(new GridLayout(1, 3))

    turtleLabel(14) = new JLabel(turtleIcon, SwingConstants.CENTER)
    turtleLabel(14).setPreferredSize(new Dimension(60, 20))
    turtleLabel(14).setBackground(new Color(0, 0, 0))
    turtleLabel(14).setOpaque(true)
    blackButtonContainer.add(turtleLabel(14))

    val blackName = new JToggleButton(s"${org.nlogo.api.Color.getColorNameByIndex(14)} = 0")
    blackName.addActionListener(this)
    blackName.setActionCommand("0.0")
    blackName.setOpaque(true)
    blackName.setFont(new Font("ArialNarrow", 0, 10))
    val insets = new Insets(0, 0, 0, 0)
    blackName.setMargin(insets)
    swatchesGroup.add(blackName)
    blackButtonContainer.add(blackName)
    blackButtonContainer.add(new JLabel(""))
    topNameContainer.add(blackButtonContainer)

    // Create the white button
    val whiteButtonContainer = new Container
    whiteButtonContainer.setLayout(new GridLayout(1, 3))

    whiteButtonContainer.add(new JLabel(""))

    val whiteName = new JToggleButton(s"${org.nlogo.api.Color.getColorNameByIndex(15)} = 9.9")
    whiteName.addActionListener(this)
    whiteName.setActionCommand("9.9")
    whiteName.setOpaque(true)
    whiteName.setFont(new Font("ArialNarrow", 0, 10))
    whiteName.setMargin(insets)
    swatchesGroup.add(whiteName)
    whiteButtonContainer.add(whiteName)

    turtleLabel(15) = new JLabel(turtleIcon, SwingConstants.CENTER)
    turtleLabel(15).setPreferredSize(new Dimension(60, 20))
    turtleLabel(15).setBackground(new Color(255, 255, 255))
    turtleLabel(15).setOpaque(true)
    whiteButtonContainer.add(turtleLabel(15))
    topNameContainer.add(whiteButtonContainer)

    // Add the container to the GridBag
    val c = new GridBagConstraints
    c.gridx = 1
    c.gridy = 0
    c.fill = GridBagConstraints.HORIZONTAL
    pane.add(topNameContainer, c)
    getContentPane.validate()
  }

  private def createLeftNames() = {
    leftNameContainer.setLayout(new GridLayout(14, 1))

    for(i <- 5 to 139 by 10) {
      // Create name Buttons
      val colorName = new JToggleButton(s"${org.nlogo.api.Color.getColorNameByIndex(i / 10)} = $i")
      colorName.addActionListener(this)
      colorName.setActionCommand(i.toString)
      colorName.setFont(new Font("ArialNarrow", 0, 10))
      swatchesGroup.add(colorName)
      leftNameContainer.add(colorName)
    }
    getContentPane.invalidate()

    val c = new GridBagConstraints
    c.gridx = 0
    c.gridy = 1
    c.fill = GridBagConstraints.VERTICAL
    c.insets = new Insets(5, 0, 0, 0)
    pane.add(leftNameContainer, c)
  }

  private def createRightPreview(turtleIcon: ImageIcon) = {
    rightPreviewContainer.setLayout(new GridLayout(14, 1))

    var turtleIconindex = 0
    for(i <- 5 to 139 by 10) {
      // Create color turtles with variable background
      turtleLabel(turtleIconindex) = new JLabel(turtleIcon, SwingConstants.CENTER)
      turtleLabel(turtleIconindex).setBackground(
        new Color(org.nlogo.api.Color.getARGBbyPremodulatedColorNumber(i)))
      turtleLabel(turtleIconindex).setOpaque(true)
      rightPreviewContainer.add(turtleLabel(turtleIconindex))
      turtleIconindex += 1
    }
    getContentPane.invalidate()

    val c = new GridBagConstraints
    c.gridx = 2
    c.gridy = 1
    c.fill = GridBagConstraints.BOTH
    c.insets = new Insets(5, 0, 0, 0)
    pane.add(rightPreviewContainer, c)
  }

  private def createTopLeftLabel() = {
    val upperLeftCorner = new JLabel(I18N.gui("preview"))

    upperLeftCorner.setFont(new Font("ArialNarrow", 0, 10))
    upperLeftCorner.setPreferredSize(new Dimension(45, 20))

    val c = new GridBagConstraints
    c.gridx = 2
    c.gridy = 0
    c.insets = new Insets(0, 2, 0, 0)
    pane.add(upperLeftCorner, c)
  }

  private def createSwatches() = {
    val rows = 14
    var colorNumber = 0: Double
    val columnlength = 10
    val swatchPerRow = StrictMath.round(columnlength / step).toInt

    swatchesContainer.invalidate()

    swatchesContainer.setLayout(new GridLayout(rows, swatchPerRow))

    for(i <- 0 to rows-1; j <- 0 to swatchPerRow) {
      colorNumber = i * 10
      val swatch = new JToggleButton
      if(j >= swatchPerRow)
        colorNumber = (i * 10) + 9.9
      else
        swatch.setForeground(Color.BLACK)
      swatch.setRolloverEnabled(true)
      swatch.setBorderPainted(true)
      swatch.setOpaque(true)
      swatch.setFocusPainted(false)
      swatch.setBorder(BorderFactory.createEmptyBorder)

      // I don't entirely understand what's going on here
      // on xp l&f java 1.5 the background color of the toggle
      //  buttons doesn't show up so we work around using
      // a color swatch (which is really just a Jpanel)
      // that works on windows but doesn't on mac.
      // however, setting the background of the button
      // seems to work fine so just do both. ev 3/17/06
      val c = new Color(org.nlogo.api.Color.getARGBbyPremodulatedColorNumber(colorNumber))

      swatch.setBackground(c)
      val s = new ColorSwatch(swatch.getPreferredSize.width, swatch.getPreferredSize.height)
      s.setBackground(c)

      if(!numberVisibilityFlag && !pointOneStepflag) {
        val label = new JLabel(formatter.format(colorNumber))
        label.setFont(new Font("ArialNarrow", 0, 8))
        if(colorNumber % 10 < 3.5)
          label.setForeground(Color.LIGHT_GRAY)
        s.add(label)
      }
      swatch.add(s)
      swatch.setActionCommand(colorNumber.toString)
      swatch.addActionListener(this)
      swatch.addMouseListener(this)

      swatchesGroup.add(swatch)
      swatchesContainer.add(swatch)

      colorNumber = step + colorNumber
    }
    swatchesContainer.validate()

    val c = new GridBagConstraints
    c.gridx = 1
    c.gridy = 1
    c.weightx = 1.0
    c.weighty = 1.0
    c.fill = GridBagConstraints.BOTH
    c.anchor = GridBagConstraints.CENTER
    c.insets = new Insets(5, 5, 0, 2)

    pane.add(swatchesContainer, c)
  }

  private def createControls(plotPenFlag: Boolean) = {
    val controlsContainer = new Container
    controlsContainer.setLayout(new BoxLayout(controlsContainer, BoxLayout.LINE_AXIS))
    // Copy button
    if(!plotPenFlag) {
      val copyButton = new JButton(I18N.gui("copy"))
      copyButton.setActionCommand("Copy")
      copyButton.addActionListener(this)
      controlsContainer.add(copyButton)
    } else {
      controlsContainer.add(Box.createRigidArea(new Dimension(10, 0)))
      okButton = new JButton(I18N.gui.get("common.buttons.ok"))
      controlsContainer.add(okButton)
      okButton.addActionListener(this)
      controlsContainer.add(Box.createRigidArea(new Dimension(10, 0)))
      val cancelButton = new JButton(I18N.gui.get("common.buttons.cancel"))
      cancelButton.addActionListener(this)
      controlsContainer.add(cancelButton)
      controlsContainer.add(Box.createRigidArea(new Dimension(10, 0)))
      //JLabel selectedColorLabel = new JLabel("selected color");
      //controlsContainer.add(selectedColorLabel);
    }
    // selected Color Label
    selectedColorLabel = new JLabel(org.nlogo.api.Color.getColorNameByIndex(14))
    selectedColorLabel.setMinimumSize(new Dimension(100, 20))
    selectedColorLabel.setMaximumSize(new Dimension(100, 20))
    selectedColorLabel.setPreferredSize(new Dimension(100, 20))
    selectedColorLabel.setBorder(BorderFactory.createLoweredBevelBorder)
    controlsContainer.add(selectedColorLabel)

    controlsContainer.add(Box.createHorizontalGlue)

    // Hide numbers checkbox
    checkboxHideNumbers = new JCheckBox(I18N.gui("numbers"), true)
    controlsContainer.add(checkboxHideNumbers)
    checkboxHideNumbers.addItemListener(this)

    controlsContainer.add(Box.createHorizontalGlue)

    // Radio buttons

    val stepPanel = new JPanel
    stepPanel.setLayout(new BoxLayout(stepPanel, BoxLayout.LINE_AXIS))
    stepPanel.setBorder(BorderFactory.createLineBorder(Color.gray))

    oneStep = new JRadioButton("1")
    oneStep.setActionCommand("oneStep")
    stepPanel.add(oneStep)
    oneStep.setSelected(true)

    pointFiveStep = new JRadioButton("0.5")
    pointFiveStep.setActionCommand("pointFiveStep")
    stepPanel.add(pointFiveStep)

    pointOneStep = new JRadioButton("0.1")
    pointOneStep.setActionCommand("pointOneStep")
    stepPanel.add(pointOneStep)

    val groupStep = new ButtonGroup
    groupStep.add(oneStep)
    groupStep.add(pointFiveStep)
    groupStep.add(pointOneStep)

    oneStep.addActionListener(this)
    pointFiveStep.addActionListener(this)
    pointOneStep.addActionListener(this)

    controlsContainer.add(stepPanel)

    val gradationLabel = new JLabel(s" ${I18N.gui("increment")}")
    controlsContainer.add(gradationLabel)

    controlsContainer.add(Box.createRigidArea(new Dimension(10, 0)))
    controlsContainer.add(new JLabel("  "))

    val c = new GridBagConstraints
    c.gridx = 0
    c.gridy = 2
    c.fill = GridBagConstraints.HORIZONTAL
    c.gridwidth = 3
    pane.add(controlsContainer, c)
  }


  /// Auxiliary Methods

  // Create turtle icon
  private def getShapeIcon(colorValue: Double) = {
    val defaultShape = VectorShape.getDefaultShape
    val image = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB)
    val g2 = new Graphics2DWrapper(image.createGraphics)
    g2.antiAliasing(true)
    defaultShape.paint(g2,
      new Color(org.nlogo.api.Color.getARGBbyPremodulatedColorNumber(colorValue)),
      0, 0, 16, 0)
    g2.drawImage(image)
    new ImageIcon(image)
  }

  // Check if the passed String is a number
  private def isNumber(n: String) =
    try {
      n.toDouble
      true
    } catch {
      case _: NumberFormatException => false
    }

  def swatchAction() = {}

  /// Event Handling

  def actionPerformed(e: ActionEvent) = {
    val actionCommand = e.getActionCommand
    if(isNumber(actionCommand)) { // Select a Color Swatch
      selectedColorNumber = actionCommand.toDouble
      selectedColor = new Color(org.nlogo.api.Color.getARGBbyPremodulatedColorNumber(selectedColorNumber))
      selectedColorName = org.nlogo.api.Color.getClosestColorNameByARGB(selectedColor.getRGB)
      selectedColorLabel.setText(selectedColorName)
      turtleIcon = getShapeIcon(selectedColorNumber)
      turtleLabel foreach (_.setIcon(turtleIcon))
    } else if(actionCommand == "Copy") { // Copy the Color value to the Clipboard
      val tk = Toolkit.getDefaultToolkit
      val st = new StringSelection(selectedColorName)
      val cp = tk.getSystemClipboard
      cp.setContents(st, this)
    } else if(actionCommand.endsWith("Step")) { // Change Swaches size
      actionCommand match {
        case "oneStep" =>
          step = 1
          pointOneStepflag = false
          checkboxHideNumbers.setEnabled(true)
        case "pointFiveStep" =>
          step = .5
          pointOneStepflag = false
          checkboxHideNumbers.setEnabled(true)
        case "pointOneStep" =>
          step = .1
          pointOneStepflag = true
          checkboxHideNumbers.setEnabled(false)
      }
      swatchesContainer.setVisible(false)
      swatchesContainer.removeAll()
      createSwatches()
      swatchesContainer.setVisible(true)
      swatchesContainer.repaint()
    } else if(actionCommand == I18N.gui.get("common.buttons.ok")) {
      okCancelFlag = 1
      dispose()
    } else if(actionCommand == I18N.gui.get("common.buttons.cancel")) {
      okCancelFlag = -1
      dispose()
    }
  }

  // Hide or show color values
  def itemStateChanged(e: ItemEvent) = {
    if(e.getStateChange == ItemEvent.SELECTED)
      numberVisibilityFlag = false
    else if(e.getStateChange == ItemEvent.DESELECTED)
      numberVisibilityFlag = true
    swatchesContainer.removeAll()
    createSwatches()
  }

  // Illuminate the patch under the mouse cusor as it moves.
  def mouseEntered(e: MouseEvent) = {

    val selectedSwatch = e.getSource.asInstanceOf[JToggleButton]
    selectedSwatch.setBorder(BorderFactory.createLineBorder(Color.gray))

    // Why does (e.getModifiers) return 16 instead of
    // 503 which is equal to MouseEvent.MOUSE_PRESSED
    // Thus (e.getModifiers & MouseEvent.MOUSE_PRESSED) should return 503?
    if((e.getModifiers & MouseEvent.MOUSE_PRESSED) == 16)
      selectedSwatch.doClick()
  }

  def mouseExited(e: MouseEvent) = {
    val selectedSwatch = e.getSource.asInstanceOf[JToggleButton]
    selectedSwatch.setSelected(false)
    selectedSwatch.setBorder(BorderFactory.createEmptyBorder)
  }

  // I check the flag below to see if we are in PlotPenMode
  // In that case closing the window is the same as pressing OK
  // This is a different behavior than in the "MenuToolsMode"
  def windowClosing(e: WindowEvent) = if(plotPenMode) {
      okCancelFlag = 1
      okButton.doClick()
    }

  // The following callbacks are not used for anything
  // but the Interfaces demands them
  def mouseDragged(e: MouseEvent) = {}
  def mouseClicked(e: MouseEvent) = {}
  def mousePressed(e: MouseEvent) = {}
  def mouseReleased(e: MouseEvent) = {}

  def lostOwnership(clip: Clipboard, tr: Transferable) = {}

  def componentMoved(arg0: ComponentEvent) = {}
  def componentShown(arg0: ComponentEvent) = {}
  def componentHidden(arg0: ComponentEvent) = {}

  def windowOpened(arg0: WindowEvent) = {}
  def windowClosed(arg0: WindowEvent) = {}
  def windowIconified(arg0: WindowEvent) = {}
  def windowDeiconified(arg0: WindowEvent) = {}
  def windowActivated(arg0: WindowEvent) = {}
  def windowDeactivated(arg0: WindowEvent) = {}

  // work around bug in Quaqua 6.5 causing NullPointerExceptions in
  // QuaquaButtonUI.getMinimumSize - ST 5/12/10

  def workAroundQuaquaBug(root: Container) = Tree.walkComponentTree(root, 0, new Tree.ComponentTreeWalker {
      def touch(comp: Component, level: Int) = comp match {
          // using a different style than the default doesn't affect
          // the visual appearance, and it avoids the code path
          // that was causing the exceptions - ST 5/12/10
          case jcomp: JComponent => jcomp.putClientProperty("Quaqua.Button.style", "toggle")
          case _ =>
        }
    })
}
